fn sqrt_exact(a: i64) -> i64 {
    let sqrt_a = (a as f64).sqrt();

    return (sqrt_a.round()) as i64;
}

fn is_square(a: i64) -> bool {

    let sqrt_a_exact = sqrt_exact(a);

    return (a-sqrt_a_exact*sqrt_a_exact) == 0;
}

fn is_hexagonal(a: i64) -> bool {
    if !is_square(1+8*a)
    {
        return false;
    }

    return ((1+sqrt_exact(1+8*a)) & 3) == 0;
}

fn prob_45() -> i64 {
    let p_fun = |x: i64| -> i64 {(x*(3*x-1))>>1};

    let mut k = 166;

    let mut p = p_fun(k);

    while !is_hexagonal(p) {
        k += 1;
        p = p_fun(k);
    }

    return p;
}

fn main() {

    let answer = prob_45();

    println!("{}", answer);
}
