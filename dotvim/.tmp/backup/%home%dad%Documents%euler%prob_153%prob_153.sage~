#!/usr/bin/sage

import time

precomp_vals = [1,4,8,15,21]

def sum_for_rationals(N):

    if N <= len(precomp_vals):
        return precomp_vals[N-1]

    a = 1
    num_times = N

    S = num_times

    while a < N:

        a += 1

        new_num_times = floor(N/a)

        if new_num_times == num_times:
            break

        num_times = new_num_times

        S += num_times * a

    # readjust
    a -= 1
    S -= num_times * a

    while num_times > 0:

        a_min = a

        a_max = floor(N/num_times)

        S += num_times * (a_max+a_min) * (a_max-a_min+1) // 2

        a = a_max + 1

        num_times -= 1

    return S


if __name__ == "__main__":

    # look through coprime pairs

    # N = 5
    N = 10**8

    start_tm = time.perf_counter()

    max_a = floor(sqrt(N))

    pairs = []

    S = sum_for_rationals(N)

    for a in range(1,max_a+1):

        max_b = min(a, floor(sqrt(N-a^2)))

        for b in range(1,max_b+1):

            if gcd(a,b) == 1:

                pairs.append([a,b])

                nm_a_b = a^2 + b^2

                max_coeff = floor(N / nm_a_b)

                contr = 2*a + 2*b

                if a == b:
                    contr = 2*a

                S += sum_for_rationals(max_coeff) * contr

    end_tm = time.perf_counter()

    tm = end_tm - start_tm

    print("TIME = %.3lf" % tm)

    print("S = %d" % S)
