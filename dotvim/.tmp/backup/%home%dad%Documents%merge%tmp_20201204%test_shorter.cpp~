#include "flint_wrapper.hpp"

#include <flint/fmpz.h>

#include "yaml-cpp/yaml.h"

#include <iomanip>
#include <iostream>
#include <string>
#include <type_traits>
#include <variant>
#include <vector>
// testing
#include <gtest/gtest.h>

using namespace std;

typedef fmpz_t ZZ_raw;
typedef __flint_type<ZZ_raw> ZZ;

template<>
void ZZ::init(ZZ_raw a){ fmpz_init(a); }

template<>
void ZZ::clear(ZZ_raw a){ fmpz_clear(a); }

  template<>
void ZZ::assign(ZZ_raw a, const ZZ_raw b) { fmpz_set(a,b); }

template<>
void ZZ::assign(ZZ_raw a, const int64_t b) { 
  fmpz_set_si(a,b); 
}

template<>
void ZZ::assign(ZZ_raw a, const uint64_t b) { fmpz_set_ui(a,b); }

template<>
void ZZ::assign(ZZ_raw a, const double b) { fmpz_set_d(a,b); }

template<>
void ZZ::assign(ZZ_raw a, const string b) { fmpz_set_str(a,b.c_str(), 10); }

template<>
void ZZ::add(ZZ_raw a, const ZZ_raw b, const ZZ_raw c) { fmpz_add(a, b, c); }

ostream &operator<<(ostream &os, const ZZ &f) {
  char *out_string = fmpz_get_str(NULL, 10, f.data);
  os << out_string;
  free(out_string);

  return os;
}

TEST(Tests, ZZ) {

  auto a = ZZ(123456L);
  auto b = ZZ("123456789123456789");
  auto c = a + b;

  cout << a << endl;
  cout << b << endl;
  cout << c << endl;
}

int main(int argc, char *argv[]){

  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();

}
