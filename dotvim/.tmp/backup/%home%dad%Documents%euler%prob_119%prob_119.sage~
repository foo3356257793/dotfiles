#!/usr/bin/sage

import time

def digit_sum(a):

    return sum([int(c) for c in str(a)])

def find_floor_digit_sum_pow(n):

    n_digits = 1

    max_dig_sum = n_digits * 9
    max_pow = (max_dig_sum) ** n

    while max_pow >= 10**(n_digits-1):

        n_digits += 1

    return n_digits


if __name__ == "__main__":

    bd = 2**46

    """
    # find powers under this amount

    n = 2

    vals = []

    start_tm = time.perf_counter()

    while 10**n <= bd:

        base_bd = floor(bd**(1/n))

        a_min = ceil(10**(1/n))

        for a in range(a_min,base_bd+1):

            big = a**n

            if digit_sum(big) == a and not big in vals:

                vals.append(big)

        n += 1

    vals.sort()

    end_tm = time.perf_counter()
    tot_tm = end_tm-start_tm
    print("TIME = %.3lf" % tot_tm)

    print(len(vals))
    """
