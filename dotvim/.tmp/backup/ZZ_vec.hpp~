#pragma once

#include "myflint.hpp"

//struct ZZ_vec;
struct ZZ_vec_ptr;

// TODO
#if 0
struct ZZ_vec {

  std::vector<ZZ> data;

  #if 0
  #define _ZZ_vec ZZ_vec
  #include "ZZ_vec/ZZ_vec_struct.hpp"
  #undef _ZZ_vec

  #include "ZZ_vec/ZZ_vec_only_ZZ_vec.hpp"

  ZZ_vec(int rows, int cols);
  ZZ_vec();

  ZZ_vec(ZZ_vec &&in) noexcept;
  ZZ_vec &operator=(ZZ_vec &&in) noexcept;

  ~ZZ_vec();
  #endif

};
#endif

struct ZZ_vec_ptr {

  fmpz* data;

  ZZ_vec_ptr() = delete;
  ZZ_vec_ptr(fmpz* in) : data(in) {}

  //ZZ_vec_ptr(const ZZ_vec &in) = delete;
  //ZZ_vec_ptr(ZZ_vec &&in) noexcept = delete;
  //ZZ_vec_ptr &operator=(ZZ_vec &&in) noexcept = delete;

  ZZ_vec_ptr(const ZZ_vec_ptr &in) = delete;
  ZZ_vec_ptr(ZZ_vec_ptr &&in) noexcept = delete;
  ZZ_vec_ptr &operator=(ZZ_vec_ptr &&in) noexcept = delete;

  ~ZZ_vec_ptr() {}

  #if 0
  #define _ZZ_vec ZZ_vec_ptr
  #include "ZZ_vec/ZZ_vec_struct.hpp"
  #undef _ZZ_vec_ptr
  #endif

  ZZ_ptr operator[](const slong col);
  const ZZ_ptr operator[](const slong col) const;

};
