#!/usr/bin/sage

import time

def check_10_sol(n):

    div_n = divisors(n)

    num_divisors = len(div_n)

    if num_divisors < 10:
        return False

    num_found = 0

    for i in range(num_divisors):

        d1 = div_n[i]
        d2 = div_n[-(i+1)]

        b = (-d1+3*d2)

        if b <= 0:
            continue

        if (b & 3) == 0:
            num_found += 1

            if num_found > 10:
                return False

    return num_found == 10

def print_sol(n):

    div_n = divisors(n)

    num_divisors = len(div_n)

    num_found = 0

    for i in range(num_divisors):

        d1 = div_n[i]
        d2 = div_n[-(i+1)]

        b = (-d1+3*d2)

        if b <= 0:
            continue

        if (b & 3) == 0:
            num_found += 1

            b >>= 2

            a = (d1+d2) >> 2

            print(num_found, [a,b])
            print('  ', (b+2*a)^2 - (b+a)^2 - b^2)


    return num_found == 10


if __name__ == "__main__":

    bd = 500000

    start_tm = time.perf_counter()

    num_sols = [0] * bd

    for f in range(1,bd-1):

        g_lb = ceil((f+1)/3)
        g_lb += (-g_lb-f) & 3

        for g in range(g_lb,((bd-1)//f)+1,4):

            num_sols[f*g] += 1

    ct = 0

    for i in range(1,bd):

        if num_sols[i] == 1:
            ct += 1

    print(ct)

    end_tm = time.perf_counter()
    tot_tm = end_tm-start_tm
    print("TIME = %.3lf" % tot_tm)

