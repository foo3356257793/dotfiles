#pragma once

#include "myflint_ZZ_mat.hpp"

struct RR_ptr{
  double* ptr;
  explicit operator double*() { return ptr; }
  explicit operator const double*() const { return ptr; }

  RR_ptr(double* in) : ptr(in) {}
}

struct RR_vec_ptr {
  double* row;

  RR_vec_ptr(double* in_row) : row(in_row) {}

  RR_ptr operator[](const int col) const {
    return row + col;
  }
};

struct RR_mat {

  d_mat* data;

  explicit operator d_mat_struct*() { return (d_mat_struct*) data; }
  explicit operator const d_mat_struct*() const { return (const d_mat_struct*) data; }

  #if 0
  slong nrows() const;
  slong ncols() const;

  // get entries
  RR_vec_ptr operator[](const int row) const;

  template <typename T>
    RR_mat(const vector<vector<T>>& mat_as_vectors);

  RR_mat(const fmpz_mat_t other);

  bool dim_match(const RR_mat &other);
  #endif

  RR_mat();
  RR_mat(int nrows, int ncols);
  RR_mat(const ZZ_mat& other);
  RR_mat(const RR_mat& other);
  RR_mat(RR_mat &&other) noexcept;
  RR_mat& operator=(const RR_mat &other);
  RR_mat &operator=(RR_mat &&other) noexcept;
  ~RR_mat();
}
