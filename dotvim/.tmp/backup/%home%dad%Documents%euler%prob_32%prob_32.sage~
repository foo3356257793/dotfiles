#!/usr/bin/sage

def gen_candidates(n,digits):

    if n == 1:

        return [[d] for d in digits]

    ret = []

    for i in range(len(digits)):

        d = digits[i]

        sub_array = digits[0:i]
        sub_array += digits[i+1:]

        sub_ret = gen_candidates(n-1,sub_array)

        ret += [[d] + tup for tup in sub_ret]

    return ret


if __name__ == "__main__":

    all_digits = [i for i in range(1,10)]
    candidates = gen_candidates(5, all_digits)

    S = 0

    products = []

    for tup in candidates:

        a = tup[0] * 10 + tup[1]
        b = tup[2] * 100 + tup[3] * 10 + tup[4]

        c = a * b

        full_tup = copy(tup)

        works = True

        while c > 0:

            d = c % 10

            if d in full_tup or d==0:

                works = False
                break

            full_tup.append(d)

            c = c // 10

        if len(full_tup) != 9:
            works = False

        if works:
            print(a,b,a*b)

            if not a*b in products:
                products.append(a*b)

    for tup in candidates:

        a = tup[0]
        b = tup[1] * 1000 + tup[2] * 100 + tup[3] * 10 + tup[4]

        c = a * b

        full_tup = copy(tup)

        works = True

        while c > 0:

            d = c % 10

            if d in full_tup or d==0:

                works = False
                break

            full_tup.append(d)

            c = c // 10

        if len(full_tup) != 9:
            works = False

        if works:
            print(a,b,a*b)

            if not a*b in products:
                products.append(a*b)

    print(S)
