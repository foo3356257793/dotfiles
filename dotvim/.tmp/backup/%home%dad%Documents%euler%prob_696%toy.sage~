#!/usr/bin/sage

import time

def _gen_all_hands(hand,S,i,n,T):

    if S==T:
        return [hand]
    elif i == n:
        return []

    branch_hand = copy(hand)

    ret = []
    for j in range(5):

        ret += _gen_all_hands(copy(branch_hand), S, i+1, n, T)

        branch_hand[i] += 1
        S += 1

        if S > T:
            break

    return ret

def gen_all_hands(n,T):

    hand = [0] * n

    return _gen_all_hands(hand, 0, 0, n, T)

# chow is a run of three
def remove_chow(hand, starting_index):

    if hand == None:
        return None

    # verify that this is possible
    if (starting_index + 2 >= len(hand)) or (hand[starting_index] < 1) or (hand[starting_index+1] < 1) or (hand[starting_index+2] < 1):
        return None

    red_hand = copy(hand)
    for j in range(3):
        red_hand[starting_index+j] -= 1

    return red_hand

# pung is a set of three
def remove_pung(hand, starting_index):

    if hand == None:
        return None

    if (starting_index >= len(hand)) or (hand[starting_index] < 3):
        return None

    red_hand = copy(hand)
    red_hand[starting_index] -= 3

    return red_hand

# pair is a set of two
def remove_pair(hand, starting_index):

    if hand == None:
        return None

    if (starting_index >= len(hand)) or (hand[starting_index] < 2):
        return None

    red_hand = copy(hand)
    red_hand[starting_index] -= 2

    return red_hand

def reduce_hand(hand,index,len_hand):

    if index == len_hand:
        return True

    red_hand = copy(hand)

    if hand[index] == 1:

        red_hand = remove_chow(red_hand,index)

    if hand[index] == 2:

        # already removed any pairs
        red_hand = remove_chow(red_hand,index)
        red_hand = remove_chow(red_hand,index)

    if hand[index] == 3:

        # can assume a pung is sufficient
        red_hand = remove_pung(red_hand,index)

    if hand[index] == 4:

        # can assume a pung is sufficient
        red_hand = remove_pung(red_hand,index)
        red_hand = remove_chow(red_hand,index)

    if red_hand == None:
        return False

    return reduce_hand(red_hand,index+1,len_hand)

def is_winning(hand):

    len_hand = len(hand)

    if (sum(hand) - 2) % 3 != 0:
        return False

    ret = False

    for i in range(len(hand)):

        if hand[i] >= 2:

            red_hand = remove_pair(hand,i)

            ret = reduce_hand(red_hand,0,len_hand)

            if ret:
                break

    return ret

if __name__ == "__main__":


    n = 26
    s = 1
    t = 1

    hands = gen_all_hands(n,3*t+2)

    n_winning = 0

    start_tm = time.perf_counter()

    for hand in hands:

        if is_winning(hand):
            n_winning += 1

    print('# win = %d' % n_winning)

    end_tm = time.perf_counter()
    tot_tm = end_tm-start_tm
    print("TIME = %.3lf" % tot_tm)

