#!/usr/bin/sage

if __name__ == "__main__":

    sols = []

    k = 0
    L = 1

    for round in range(12):

        k_new = -9*k -4*L - 4
        L_new = -20*k -9*L - 8

        k = k_new
        L = L_new

        sols.append([k,L])

    k = 0
    L = -1

    for round in range(12):

        k_new = -9*k -4*L - 4
        L_new = -20*k -9*L - 8

        k = k_new
        L = L_new

        sols.append([k,L])


    k = 0
    L = 1

    for round in range(12):

        k_new = -9*k +4*L - 4
        L_new = 20*k -9*L + 8

        k = k_new
        L = L_new

        sols.append([k,L])

    k = 0
    L = -1

    for round in range(12):

        k_new = -9*k +4*L - 4
        L_new = 20*k -9*L + 8

        k = k_new
        L = L_new

        sols.append([k,L])

    k = 0
    L = 1

    for round in range(12):

        k_new = -9*k -4*L + 4
        L_new = -20*k -9*L + 8

        k = k_new
        L = L_new

        sols.append([k,L])

    k = 0
    L = -1

    for round in range(12):

        k_new = -9*k -4*L + 4
        L_new = -20*k -9*L + 8

        k = k_new
        L = L_new

        sols.append([k,L])


    k = 0
    L = 1

    for round in range(12):

        k_new = -9*k -4*L + 4
        L_new = 20*k -9*L - 8

        k = k_new
        L = L_new

        sols.append([k,L])

    k = 0
    L = -1

    for round in range(12):

        k_new = -9*k +4*L + 4
        L_new = 20*k -9*L - 8

        k = k_new
        L = L_new

        sols.append([k,L])

    valid_sols = []
    for tup in sols:

        b = 2*tup[0]
        L = tup[1]

        if b < 0:
            b *= -1
        if L < 0:
            L *= -1

        h = L^2 - (b//2)^2

        if is_square(h):

            h = sqrt(h)

            tup = [L,b,h]

            if ((b-h == 1) or (h-b == 1)) and (not tup in valid_sols):
                valid_sols.append(tup)

    valid_sols.sort()
