#include "ZZ_mat_struct_ZZ_mat.cpp"
#include "ZZ_mat_struct_ZZ.cpp"
#include "ZZ_mat_struct_UI.cpp"
#include "ZZ_mat_struct_SI.cpp"

_ZZ_mat &_ZZ_mat::translate(const std::function<void(fmpz_mat_t)> &fun){
  fun(data);
  return *this;
}

_ZZ_mat &_ZZ_mat::translate(const std::function<void(fmpz_mat_t,fmpz_mat_t)> &fun){
  fun(data,data);
  return *this;
}

_ZZ_mat &_ZZ_mat::operator-(){
  return translate(fmpz_mat_neg);
}

ZZ _ZZ_mat::inverse_eq(){
  auto den = ZZ();
  int success = fmpz_mat_inv(data,den.data,data);
  if(success == 0){
    throw std::invalid_argument("Singular matrix inverse_eq");
  }
  return den;
}

_ZZ_mat &_ZZ_mat::inverse_strict_eq(){
  auto den = inverse_eq();
  if(den == -1){
    operator-();
    den.operator-();
  }
  if(den != 1){
    throw std::invalid_argument("Inverse strict eq failed");
  }
  return *this;
}

_ZZ_mat &_ZZ_mat::resize(int rows, int cols){
  if(rows != nrows() || cols != ncols()){
    if(rows<0 || cols<0){
      throw std::invalid_argument("Negative dimension matrix");
    }
    fmpz_mat_clear(data);
    fmpz_mat_init(data,rows,cols);
  }
  return *this;
}

ZZ_vec_ptr _ZZ_mat::operator[](const slong row){
  return data->rows[row];
}

const ZZ_vec_ptr _ZZ_mat::operator[](const slong row) const{
  return data->rows[row];
}
