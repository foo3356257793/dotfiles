#!/usr/bin/sage

def enumerate_factorizations(a):
    """
    first pass
    very inefficient
    """

    div_a = a.divisors()

    ret = []
    for d in div_a:

        if d == 1:
            continue

        if d == a:
            ret.append([a])
            continue

        tails = enumerate_factorizations(a//d)

        ret += [[d] + t for t in tails]

    # clean this
    for tup in ret:
        tup.sort()
    ret.sort()

    unique_ret = [ret[0]]
    for i in range(1,len(ret)):

        if ret[i] != ret[i-1]:
            unique_ret.append(ret[i])

    return unique_ret

def find_k_for_factorization(tup):

    if len(tup) <= 1:
        return 0

    pr = prod(tup)
    sm = sum(tup)
    k = (pr - sm) + len(tup)

    return k

if __name__ == "__main__":

    k_bd = 1200

    k_table = [0] * (k_bd+1)

    n_table_remaining = k_bd - 1

    prod_sums = []
    sum_prod_sums = 0

    f = 1
    while n_table_remaining > 0:

        f += 1
        is_prod_sum = False

        #print("working with f=%d" % f)

        facs = enumerate_factorizations(f)

        for tup in facs:

            k = find_k_for_factorization(tup)

            if k > 1 and k <= k_bd and k_table[k] == 0:
                k_table[k] = f
                n_table_remaining -= 1
                is_prod_sum = True

        if is_prod_sum:
            prod_sums.append(f)
            sum_prod_sums += f



