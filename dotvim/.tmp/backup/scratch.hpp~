#pragma once

#include <flint/fmpq.h>
#include <flint/fmpz.h>
#include <flint/fmpz_mat.h>

#include <algorithm>
#include <iomanip>
#include <iostream>
#include <string>
#include <type_traits>
#include <variant>
#include <vector>

struct ZZ {
  fmpz_t data;

  ZZ& operator+=(const ZZ& in);

  ZZ& operator-=(const ZZ& in);

  ZZ& operator*=(const ZZ& in);

  ZZ& operator%=(const ZZ& in);

  ZZ& cdiv_q_eq(const ZZ& in);

  ZZ& fdiv_q_eq(const ZZ& in);

  ZZ& tdiv_q_eq(const ZZ& in);

  ZZ& divexact_eq(const ZZ& in);

  ZZ& gcd_eq(const ZZ& in);

  ZZ& pow_eq(const ZZ& in);

  ZZ& abs_eq();

  ZZ& operator+=(const int8_t in);

  ZZ& operator-=(const int8_t in);

  ZZ& operator*=(const int8_t in);

  ZZ& operator+=(const int16_t in);

  ZZ& operator-=(const int16_t in);

  ZZ& operator*=(const int16_t in);

  ZZ& operator+=(const int32_t in);

  ZZ& operator-=(const int32_t in);

  ZZ& operator*=(const int32_t in);

  ZZ& operator+=(const int64_t in);

  ZZ& operator-=(const int64_t in);

  ZZ& operator*=(const int64_t in);
};

ZZ operator+(const ZZ& in_1, const ZZ& in_2);

ZZ operator-(const ZZ& in_1, const ZZ& in_2);

ZZ operator*(const ZZ& in_1, const ZZ& in_2);

ZZ operator%(const ZZ& in_1, const ZZ& in_2);

ZZ cdiv_q(const ZZ& in_1, const ZZ& in_2);

ZZ fdiv_q(const ZZ& in_1, const ZZ& in_2);

ZZ tdiv_q(const ZZ& in_1, const ZZ& in_2);

ZZ divexact(const ZZ& in_1, const ZZ& in_2);

ZZ gcd(const ZZ& in_1, const ZZ& in_2);

ZZ pow(const ZZ& in_1, const ZZ& in_2);

ZZ abs(const ZZ& in);

ZZ operator+(const ZZ& in_1, const int8_t in_2);

ZZ operator+(const int8_t in_2, const ZZ& in_1);

ZZ operator-(const ZZ& in_1, const int8_t in_2);

ZZ operator-(const int8_t in_2, const ZZ& in_1);

ZZ operator*(const ZZ& in_1, const int8_t in_2);

ZZ operator*(const int8_t in_2, const ZZ& in_1);

ZZ operator+(const ZZ& in_1, const int16_t in_2);

ZZ operator+(const int16_t in_2, const ZZ& in_1);

ZZ operator-(const ZZ& in_1, const int16_t in_2);

ZZ operator-(const int16_t in_2, const ZZ& in_1);

ZZ operator*(const ZZ& in_1, const int16_t in_2);

ZZ operator*(const int16_t in_2, const ZZ& in_1);

ZZ operator+(const ZZ& in_1, const int32_t in_2);

ZZ operator+(const int32_t in_2, const ZZ& in_1);

ZZ operator-(const ZZ& in_1, const int32_t in_2);

ZZ operator-(const int32_t in_2, const ZZ& in_1);

ZZ operator*(const ZZ& in_1, const int32_t in_2);

ZZ operator*(const int32_t in_2, const ZZ& in_1);

ZZ operator+(const ZZ& in_1, const int64_t in_2);

ZZ operator+(const int64_t in_2, const ZZ& in_1);

ZZ operator-(const ZZ& in_1, const int64_t in_2);

ZZ operator-(const int64_t in_2, const ZZ& in_1);

ZZ operator*(const ZZ& in_1, const int64_t in_2);

ZZ operator*(const int64_t in_2, const ZZ& in_1);
