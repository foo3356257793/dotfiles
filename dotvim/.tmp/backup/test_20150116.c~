#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <omp.h>

//#define N 10000
//#define M 4294967296
#define M 100000000

uint64_t randomLCG(uint64_t *state)
{
   uint64_t value = (1664525 * (*state) + (1013904223)) % (4294967296);
   *state = value;
   return value;
}

int main(int argc, char *argv[])
{
    if(argc != 2){
        printf("usage: %s <N>\n", argv[0]);
        return 1;
    }

    uint64_t N = atoi(argv[1]);


    clock_t start, end;
    double time_used;

    start = clock();

    #pragma omp parallel
    {
        uint64_t j;
        int *values = malloc(N * sizeof(int));
        for(int i = 0; i < N; i++){
            values[i] = 0;
        }
        uint64_t state = 1;
        uint64_t value;
        for(int i = 0; i < M; i++){
            value = (randomLCG(&state));
            j = value % N;
            if(j < 0 || j >= N){
                printf("bad j");
                j = 0;
            }
            values[j]++;
        }

        free(values);
    }

    end = clock();
    time_used = ((double) (end - start)) / CLOCKS_PER_SEC;
    printf("time used = %lf sec\n", time_used);

    return 0;

}

