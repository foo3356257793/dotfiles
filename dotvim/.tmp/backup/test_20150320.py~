#!/usr/bin/python3

from random import *
from math import *

key_bits = 16

n = (1<<20)
num_keys = (1<<key_bits)
max_key = num_keys-1

num_buckets = 8
cutoff_idx = [r*(n//num_buckets) for r in range(1,num_buckets)]
exp_cutoffs = [int(max_key * (idx/n)) for idx in cutoff_idx]

num_trials = 10

mean_val = [0] * (num_buckets-1)
mean_diff = [0] * (num_buckets-1)
var_diff = [0] * (num_buckets-1)
num_over = [0] * (num_buckets-1)

for trial in range(num_trials):
  a = [randint(0,max_key) for r in range(n)]
  a.sort()
  cutoff_diff = [a[cutoff_idx[i]] - exp_cutoffs[i] for i in range(0,num_buckets-1)]
  for i in range(num_buckets-1):
    mean_val[i] += a[cutoff_idx[i]]
    mean_diff[i] += cutoff_diff[i]
    var_diff[i] += (cutoff_diff[i] ** 2)
    j = cutoff_idx[i]
    while a[j] < exp_cutoffs[i]:
      num_over[i] += 1
      j += 1

std_diff = [0] * (num_buckets-1)
log_std_diff = [0] * (num_buckets-1)
for i in range(num_buckets-1):
  mean_val[i] /= num_trials
  mean_diff[i] /= num_trials
  var_diff[i] /= num_trials
  var_diff[i] -= (mean_diff[i] ** 2)
  std_diff[i] = sqrt(var_diff[i])
  log_std_diff[i] = log(std_diff[i])/log(2)
  num_over[i] /= num_trials

print("obs means", mean_val)
print("exp cutoffs", exp_cutoffs)
print("std", [key_bits - lgstd for lgstd in log_std_diff])
print("num_over", num_over)
print("num_over %", [num/(n/num_buckets) for num in num_over])
