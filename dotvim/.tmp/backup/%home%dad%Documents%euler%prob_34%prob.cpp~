#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>

#include <iostream>

#include <math.h>

using std::cout;
using std::endl;

#include <array>
using std::array;

auto factorials = array<int64_t,10>();

int64_t sum_factorial_digits(int64_t a)
{
  int64_t S = 0;

  while(a>0)
  {
    int64_t d = a % 10;
    S += factorials[d];

    a = a/10;
  }

  return S;
}

int64_t prob_34()
{

  // initialize factorials
  int64_t f = 1;
  for(int i=0; i<10; i++)
  {
    factorials[i] = f;
    f *= i+1;
  }

  int64_t n = 1;
  while(n * factorials[9] >= (pow(10,n)-1))
  {
    n += 1;
  }

  int64_t min_val = 10;
  int64_t max_val = n*factorials[9];

  int64_t answer = 0;

  #pragma omp parallel for
  for(int64_t a=min_val; a<=max_val; a++)
  {
    auto S = sum_factorial_digits(a);

    if(S == a)
    {
      #pragma omp atomic
      answer += a;
    }
  }

  return answer;

}

int main(int argc, char *argv[])
{

  int64_t answer = prob_34();

  cout << answer << endl;

}

