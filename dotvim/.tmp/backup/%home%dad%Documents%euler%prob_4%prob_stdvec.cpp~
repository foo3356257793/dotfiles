#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>

#include <iostream>
#include <vector>

std::vector<int> get_digits(int32_t a)
{

    std::vector<int> digits = {};

    while(a != 0)
    {
        digits.push_back(a % 10);
        a = a/10;
    }

    return digits;
}

int is_palindrome(int32_t a)
{
    // check for case which breaks this
    if(a <= 0)
        return 0;

    std::vector<int> digits = get_digits(a);

    int i=0;
    int j=digits.size()-1;

    while(i<j)
    {
        if(digits[i] != digits[j])
            return 0;
        i++;
        j--;
    }

    return 1;
}

int main(int argc, char *argv[])
{

    int32_t max = 1;
    int32_t arg_max_max_factor = 1;
    int32_t arg_max_min_factor = 1;

    int32_t max_factor = 999;
    while(max_factor*max_factor > max)
    {
        int32_t min_factor = max_factor;

        int32_t prod = max_factor * min_factor;

        if(prod <= max)
            break;

        while((!is_palindrome(prod)) && (prod > max))
        {
            min_factor -= 1;
            prod -= max_factor;
        }

        if(prod > max)
        {
            max = prod;
            arg_max_max_factor = max_factor;
            arg_max_min_factor = min_factor;
        }

        max_factor -= 1;
    }

    printf("%ld\n", max);

}

