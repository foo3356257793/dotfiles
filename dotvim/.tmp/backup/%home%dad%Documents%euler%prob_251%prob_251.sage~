#!/usr/bin/sage

from multiprocessing import Pool

import time

def cardano_check(a,b,c):

    val = ((2*a-1)/3) ** 3 + (a**2) - (b**2) * c

    return val == 0

bd = 1000  # 149
bd = 10000  # 1632
bd = 100000  # 16916
bd = 1000000  # 171128
bd = 10000000  # 1719479
bd = 110000000


def square_factors(a,b):

    a //= a.squarefree_part()
    a = sqrt(a)

    return divisors(a*b)

def num_k_triplets(k):

    # if k % 100000 == 0:
    #     print(k)

    ret = 0
    a = 3*k+2

    F = 8*k+5
    G = k+1

    prd = F * (G ** 2)

    for b in square_factors(8*k+5,G):
    #for f in divisors(prd):

        # if not is_square(f):
        #     continue
        # b = sqrt(f)

        c = prd // b^2

        if a+b+c <= bd:

            ret += 1

    return ret

if __name__ == "__main__":

    num_cardano = 0

    # this is what I thought: 18896662

    k_bd = (bd - 2)//3 # too high (use factor of 7?)

    # num_triplets = 0
    # for k in range(k_bd+1):

    #     num_triplets += num_k_triplets(k)

    start_tm = time.perf_counter()

    with Pool(4) as p:
        data = p.map(num_k_triplets, range(k_bd+1))

    num_triplets = sum(data)

    end_tm = time.perf_counter()
    tot_tm = end_tm-start_tm

    print('took %lf sec' % tot_tm)

    est_hrs = tot_tm * (110000000 / bd) * (1/(60*60))

    print('est %lf hrs' % est_hrs)

    print(num_triplets)

