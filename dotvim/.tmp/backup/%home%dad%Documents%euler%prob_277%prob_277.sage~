#!/usr/bin/sage

mod_3_dict = {}
mod_3_dict['D'] = 0
mod_3_dict['U'] = 1
mod_3_dict['d'] = 2

def unwind_mod_3_vals(val, modulus, mod_3_vals, index):

    if index < 0:
        print('done!')
        return val, modulus

    modulus *= 3

    if modulus == 3:

        val = mod_3_vals[index]

        return unwind_mod_3_vals(val, modulus, mod_3_vals, index-1)

    if mod_3_vals[index] == 0:

        val = 3 * val

    elif mod_3_vals[index] == 1:

        val = 3 * val - 2
        val = ( val * inverse_mod(4, modulus) ) % modulus

    else:

        val = 3 * val + 1
        val = ( val * inverse_mod(2, modulus) ) % modulus

    return unwind_mod_3_vals(val, modulus, mod_3_vals, index-1)


if __name__ == "__main__":

    #steps = 'DdDddUUdDD'

    steps = 'UDDDUdddDDUDDddDdDddDDUDDdUUDd'

    bd = 10**15

    mod_3_vals = [mod_3_dict[c] for c in steps]

    val, modulus = unwind_mod_3_vals(0, 1, mod_3_vals, len(mod_3_vals)-1)

    print(val, modulus)

    ans = (val - (bd+1)) % modulus
    ans += bd+1
