#pragma once

#include <flint/fmpq.h>
#include <flint/fmpq_mat.h>
#include <flint/fmpz.h>
#include <flint/fmpz_mat.h>

#include <algorithm>
#include <functional>
#include <iomanip>
#include <iostream>
#include <string>
#include <type_traits>
#include <variant>
#include <vector>

// for some reason you have to use two levels of indirection here?
#define __cat(x,y) x ## y
#define _cat(x,y) __cat(x,y)
#define __fun_paster(x,y) x##_##y
#define _fun_paster(x,y) __fun_paster(x,y)

#define _initfun_paster(x) __fun_paster(x,init)
#define _setfun_paster(x) __fun_paster(x,set)
#define _swapfun_paster(x) __fun_paster(x,swap)
#define _getfun_paster(x) __fun_paster(x,get)
#define _clearfun_paster(x) __fun_paster(x,clear)
#define _raw_t_paster(x) __fun_paster(x,t)
#define _TYPE_PTR_paster(x) __fun_paster(x,ptr)
#define __raw_ptr_paster(x) x*
#define _raw_ptr_paster(x) __raw_ptr_paster(x)
#define _fun_eq_paster(x) __fun_paster(x,eq)

struct ZZ;
struct ZZ_ptr;

#ifndef _isptr
#undef _isptr
#endif

#define _TYPE_NEW ZZ
#define _TYPE_PTR _TYPE_PTR_paster(_TYPE_NEW)

#define _ZZ _TYPE_NEW
#include "ZZ.hpp"
#undef _ZZ

#define _ZZ _TYPE_PTR
#define _isptr
#include "ZZ.hpp"
#undef _isptr
#undef _ZZ
