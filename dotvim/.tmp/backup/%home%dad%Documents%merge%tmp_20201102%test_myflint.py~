#!/usr/bin/python3

from myflint import Fmpz, Fmpq, FmpzMat, FmpqMat, block_matrix, identity_matrix

import unittest

class TestFmpz(unittest.TestCase):

    def test_can_initialize(self):

        a = Fmpz(7)

    def test_arithmetic(self):

        a = Fmpz(2)
        b = Fmpz(3)

        result_plus = Fmpz(2+3)
        result_minus = Fmpz(2-3)
        result_times = Fmpz(2*3)

        self.assertEqual(a+b, result_plus)
        self.assertEqual(a-b, result_minus)
        self.assertEqual(a*b, result_times)
        self.assertEqual(abs(result_minus), -result_minus)

    def test_arithmetic_with_ints(self):

        self.assertEqual(Fmpz(2)+7, Fmpz(9))
        self.assertEqual(Fmpz(2)-7, Fmpz(-5))
        self.assertEqual(Fmpz(2)*7, Fmpz(14))

        self.assertEqual(Fmpz(7), 7)

    def test_fractions(self):

        a = Fmpq(2) / Fmpq(3)

        b = Fmpq(2,3)

        self.assertEqual(a,b)

    def test_powers(self):

        self.assertEqual(Fmpz(2)**2, 4)
        self.assertEqual(Fmpq(2,3)**(-2), Fmpq(9,4))

    def test_inequalities(self):

        self.assertTrue(Fmpz(2) < Fmpz(3))
        self.assertTrue(Fmpz(2) <= Fmpz(3))
        self.assertTrue(Fmpz(3) >= Fmpz(2))
        self.assertTrue(Fmpz(3) > Fmpz(2))

    def test_addmul(self):

        a = Fmpq(2)
        b = Fmpq(3)
        c = Fmpq(5)

        a.addmul(b,c)

        self.assertTrue(a, 2+3*5)

        d = Fmpz(1)

        a.addmul(b,d)

        self.assertTrue(a, 2+3*5+3*1)

        a.addmul(d,d)

        self.assertTrue(a, 2+3*5+3*1+1*1)

    def test_print_mat(self):

        M = FmpzMat([[1,-4],[40,1000]])
        print(M)

    def test_mat_mul(self):

        A = FmpzMat([[1,0],[-4,1]])
        B = FmpzMat([[1,1],[1,-1]])

        C = A * B

        should_C = FmpzMat([[1,1],[-3,-5]])

        self.assertEqual(C,should_C)

        print(A * B)

    def test_block_mat(self):

        A = FmpzMat([[1,0],[-4,1]])
        B = FmpzMat([[1,1],[1,-1]])
        C = FmpzMat([[0,0,0,0]])

        D = block_matrix([[A,B],[C]])

    def test_identity_mat(self):

        A = identity_matrix(3)

        b = Fmpz("123456789123456789")

        B = b*A
        C = 7*A

        print(A)
        print(B)
        print(C)

    def test_mat_index(self):

        A = identity_matrix(3)

        a = A[(0,0)]

        print(A)
        print(a)

    def test_FmpqMat(self):

        A = FmpqMat([["1","0"],["-4/5","1"]])

        B = FmpqMat([[1,0],[5,1]])

        print(f"A = {A}")
        print(f"B = {B}")

        print(A*B)

        C = FmpqMat(identity_matrix(3))

        print(C)

        D = FmpzMat([[1,2],[0,1]])

        E = D*B
        F = B*D

        print(E)
        print(F)


if __name__ == "__main__":

    suite = unittest.TestSuite()
    suite.addTest(TestFmpz("test_can_initialize"))
    suite.addTest(TestFmpz("test_arithmetic"))
    suite.addTest(TestFmpz("test_arithmetic_with_ints"))
    suite.addTest(TestFmpz("test_fractions"))
    suite.addTest(TestFmpz("test_powers"))
    suite.addTest(TestFmpz("test_inequalities"))
    suite.addTest(TestFmpz("test_addmul"))
    suite.addTest(TestFmpz("test_print_mat"))
    suite.addTest(TestFmpz("test_block_mat"))
    suite.addTest(TestFmpz("test_identity_mat"))
    suite.addTest(TestFmpz("test_mat_index"))
    suite.addTest(TestFmpz("test_FmpqMat"))

    unittest.TextTestRunner().run(suite)
