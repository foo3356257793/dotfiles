#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

#include <vector>
//#include <algorithm>

#include <cmath>
#include <iostream>

using std::cout;
using std::endl;

using std::vector;

const int number_of_digits = 10;
const int target_ranking = pow(10, 6);

int factorial(int n) {
  int answer = 1;

  for (int i = 0; i < n; i++) {
    answer *= (i + 1);
  }

  return answer;
}

void prob_24() {
  // find the first digit
  int target_index = target_ranking - 1;

  vector<int> digit_positions = {};

  for (int i = 0; i < number_of_digits - 1; i++) {
    int digit = target_index / factorial(number_of_digits - 1 - i);

    digit_positions.push_back(digit);

    target_index -= digit * factorial(number_of_digits - 1 - i);
  }

  vector<int> permutation = {};

  vector<int> remaining_digits = {};
  for (int i = 0; i < number_of_digits; i++) {
    remaining_digits.push_back(i);
  }

  for (int index = 0; index < digit_positions.size(); index++) {
    int digit = digit_positions[index];

    int actual_digit = remaining_digits[digit];

    permutation.push_back(actual_digit);

    for (int j = digit; j < number_of_digits - 1; j++) {
      remaining_digits[j] = remaining_digits[j + 1];
    }
  }

  permutation.push_back(remaining_digits[0]);

  for (int digit = 0; digit < number_of_digits; digit++) {
    cout << permutation[digit];
  }
  cout << endl;
}

int main(int argc, char *argv[]) { prob_24(); }
