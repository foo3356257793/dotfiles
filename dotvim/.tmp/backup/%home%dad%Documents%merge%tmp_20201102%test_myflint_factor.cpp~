#include "myflint_factor.hpp"

// testing
#include <gtest/gtest.h>

// TODO: put this somewhere...
  template<typename T>
auto repr(const T& thing)
{
  stringstream ss;
  ss << thing;
  return ss.str();
}

auto check_number(const Fmpz& num)
{

  auto factor = Factor(25);
  auto fac = factor(num);

  print("{} = {}\n", num, fac);

  auto check = fac.product();

  EXPECT_EQ(check,num);

  for(const auto& [divisor,exponent] : fac.prime_factors)
  {
    EXPECT_TRUE(is_prime(divisor));
  }
}

// TODO: why can't I just include this in one of the headers?
template <typename T>
Fmpz operator*(const T& lhs, const Fmpz& rhs) { return rhs * lhs; }

TEST(Tests, TestInit) {

  check_number(Fmpz(2*3*5*7));
  check_number(Fmpz("23422561884997507608543774956236195382509542924871"));
  check_number(Fmpz("79557331528177904062615411769"));
  check_number(171 * Fmpz("79557331528177904062615411769"));
  check_number(Fmpz("45234031332987913771554311333471367230395003"));
  check_number(Fmpz("1467530883489608758153197043278960386118514557947"));
}

TEST(Tests, TestPerfectPower) {

  auto A = Fmpz("1393796574908163946405011973076393159295601");

  auto[exponent,root] = root_perfect_power(A);

  //print("{},{}\n", exponent, root);

  EXPECT_EQ(exponent,2);
  EXPECT_EQ(root,Fmpz("1180591620717411303449"));

  A *= A;

  tie(exponent,root) = root_perfect_power(A);

  //print("{},{}\n", exponent, root);

  EXPECT_EQ(exponent,4);
  EXPECT_EQ(root,Fmpz("1180591620717411303449"));

  A *= Fmpz("1180591620717411303449");

  tie(exponent,root) = root_perfect_power(A);

  //print("{},{}\n", exponent, root);

  EXPECT_EQ(exponent,5);
  EXPECT_EQ(root,Fmpz("1180591620717411303449"));

  auto B = Fmpz("5316912067319586648401041578482730049");
  tie(exponent,root) = root_perfect_power(B);

  //print("{},{}\n", exponent, root);

  EXPECT_EQ(exponent,2);
  EXPECT_EQ(root,Fmpz("2305843027467304993"));

}

int main(int argc, char *argv[]){

  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();

}
