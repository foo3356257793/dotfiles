#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <math.h>
#include <omp.h>

uint64_t reverse(uint64_t a)
{

    uint64_t r = 0;
    uint64_t s;

    while(a != 0)
    {
        s = a % 10;
        r = 10*r + s;
        a /= 10;
    }

    return r;

}

uint8_t is_odd_digits(uint64_t a)
{

    while(a != 0)
    {
        if(!(a & 1))
        {
            return 0;
        }

        a /= 10;
    }

    return 1;

}

uint8_t test_val(uint64_t a)
{

    if(!(a % 10))
    {
        return 0;
    }


    uint64_t r = reverse(a);
    r += a;

    return is_odd_digits(r);

}

int main(int argc, char *argv[])
{

    int64_t num_rev = 0;

    # pragma omp parallel for
    for(int i=1; i<1000000000; i++)
    {
        if(test_val(i))
        {
            #pragma omp atomic
            num_rev += 1;
        }
    }

    printf("%d\n", num_rev);

}
