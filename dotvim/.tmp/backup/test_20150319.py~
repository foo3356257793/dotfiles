#!/usr/bin/python3

from random import *

seed()

max_key = (1<<16)-1

def vec_cmp(a,b):
  for j in range(0,16):
    if a[j] > b[j]:
      a[j], b[j] = b[j], a[j]
  return a, b

#  def sort_tile(a):
#    a[(0*16):(1*16)], a[(1*16):(2*16)] = vec_cmp(a[(0*16):(1*16)],
#        a[(1*16):(2*16)])
#    a[(2*16):(3*16)], a[(3*16):(4*16)] = vec_cmp(a[(2*16):(3*16)],
#        a[(3*16):(4*16)])
#    a[(0*16):(1*16)], a[(2*16):(3*16)] = vec_cmp(a[(0*16):(1*16)],
#        a[(2*16):(3*16)])
#    a[(1*16):(2*16)], a[(3*16):(4*16)] = vec_cmp(a[(1*16):(2*16)],
#        a[(3*16):(4*16)])
#    a[(1*16):(2*16)], a[(2*16):(3*16)] = vec_cmp(a[(1*16):(2*16)],
#        a[(2*16):(3*16)])
#    a[(4*16):(5*16)], a[(5*16):(6*16)] = vec_cmp(a[(4*16):(5*16)],
#        a[(5*16):(6*16)])
#    a[(6*16):(7*16)], a[(7*16):(8*16)] = vec_cmp(a[(6*16):(7*16)],
#        a[(7*16):(8*16)])
#    a[(4*16):(5*16)], a[(6*16):(7*16)] = vec_cmp(a[(4*16):(5*16)],
#        a[(6*16):(7*16)])
#    a[(5*16):(6*16)], a[(7*16):(8*16)] = vec_cmp(a[(5*16):(6*16)],
#        a[(7*16):(8*16)])
#    a[(5*16):(6*16)], a[(6*16):(7*16)] = vec_cmp(a[(5*16):(6*16)],
#        a[(6*16):(7*16)])
#    a[(0*16):(1*16)], a[(4*16):(5*16)] = vec_cmp(a[(0*16):(1*16)],
#        a[(4*16):(5*16)])
#    a[(2*16):(3*16)], a[(6*16):(7*16)] = vec_cmp(a[(2*16):(3*16)],
#        a[(6*16):(7*16)])
#    a[(2*16):(3*16)], a[(4*16):(5*16)] = vec_cmp(a[(2*16):(3*16)],
#        a[(4*16):(5*16)])
#    a[(1*16):(2*16)], a[(5*16):(6*16)] = vec_cmp(a[(1*16):(2*16)],
#        a[(5*16):(6*16)])
#    a[(3*16):(4*16)], a[(7*16):(8*16)] = vec_cmp(a[(3*16):(4*16)],
#        a[(7*16):(8*16)])
#    a[(3*16):(4*16)], a[(5*16):(6*16)] = vec_cmp(a[(3*16):(4*16)],
#        a[(5*16):(6*16)])
#    a[(1*16):(2*16)], a[(2*16):(3*16)] = vec_cmp(a[(1*16):(2*16)],
#        a[(2*16):(3*16)])
#    a[(3*16):(4*16)], a[(4*16):(5*16)] = vec_cmp(a[(3*16):(4*16)],
#        a[(4*16):(5*16)])
#    a[(5*16):(6*16)], a[(6*16):(7*16)] = vec_cmp(a[(5*16):(6*16)],
#        a[(6*16):(7*16)])
#    a[(8*16):(9*16)], a[(9*16):(10*16)] = vec_cmp(a[(8*16):(9*16)],
#        a[(9*16):(10*16)])
#    a[(10*16):(11*16)], a[(11*16):(12*16)] = vec_cmp(a[(10*16):(11*16)],
#        a[(11*16):(12*16)])
#    a[(8*16):(9*16)], a[(10*16):(11*16)] = vec_cmp(a[(8*16):(9*16)],
#        a[(10*16):(11*16)])
#    a[(9*16):(10*16)], a[(11*16):(12*16)] = vec_cmp(a[(9*16):(10*16)],
#        a[(11*16):(12*16)])
#    a[(9*16):(10*16)], a[(10*16):(11*16)] = vec_cmp(a[(9*16):(10*16)],
#        a[(10*16):(11*16)])
#    a[(12*16):(13*16)], a[(13*16):(14*16)] = vec_cmp(a[(12*16):(13*16)],
#        a[(13*16):(14*16)])
#    a[(14*16):(15*16)], a[(15*16):(16*16)] = vec_cmp(a[(14*16):(15*16)],
#        a[(15*16):(16*16)])
#    a[(12*16):(13*16)], a[(14*16):(15*16)] = vec_cmp(a[(12*16):(13*16)],
#        a[(14*16):(15*16)])
#    a[(13*16):(14*16)], a[(15*16):(16*16)] = vec_cmp(a[(13*16):(14*16)],
#        a[(15*16):(16*16)])
#    a[(13*16):(14*16)], a[(14*16):(15*16)] = vec_cmp(a[(13*16):(14*16)],
#        a[(14*16):(15*16)])
#    a[(8*16):(9*16)], a[(12*16):(13*16)] = vec_cmp(a[(8*16):(9*16)],
#        a[(12*16):(13*16)])
#    a[(10*16):(11*16)], a[(14*16):(15*16)] = vec_cmp(a[(10*16):(11*16)],
#        a[(14*16):(15*16)])
#    a[(10*16):(11*16)], a[(12*16):(13*16)] = vec_cmp(a[(10*16):(11*16)],
#        a[(12*16):(13*16)])
#    a[(9*16):(10*16)], a[(13*16):(14*16)] = vec_cmp(a[(9*16):(10*16)],
#        a[(13*16):(14*16)])
#    a[(11*16):(12*16)], a[(15*16):(16*16)] = vec_cmp(a[(11*16):(12*16)],
#        a[(15*16):(16*16)])
#    a[(11*16):(12*16)], a[(13*16):(14*16)] = vec_cmp(a[(11*16):(12*16)],
#        a[(13*16):(14*16)])
#    a[(9*16):(10*16)], a[(10*16):(11*16)] = vec_cmp(a[(9*16):(10*16)],
#        a[(10*16):(11*16)])
#    a[(11*16):(12*16)], a[(12*16):(13*16)] = vec_cmp(a[(11*16):(12*16)],
#        a[(12*16):(13*16)])
#    a[(13*16):(14*16)], a[(14*16):(15*16)] = vec_cmp(a[(13*16):(14*16)],
#        a[(14*16):(15*16)])
#    a[(0*16):(1*16)], a[(8*16):(9*16)] = vec_cmp(a[(0*16):(1*16)],
#        a[(8*16):(9*16)])
#    a[(4*16):(5*16)], a[(12*16):(13*16)] = vec_cmp(a[(4*16):(5*16)],
#        a[(12*16):(13*16)])
#    a[(4*16):(5*16)], a[(8*16):(9*16)] = vec_cmp(a[(4*16):(5*16)],
#        a[(8*16):(9*16)])
#    a[(2*16):(3*16)], a[(10*16):(11*16)] = vec_cmp(a[(2*16):(3*16)],
#        a[(10*16):(11*16)])
#    a[(6*16):(7*16)], a[(14*16):(15*16)] = vec_cmp(a[(6*16):(7*16)],
#        a[(14*16):(15*16)])
#    a[(6*16):(7*16)], a[(10*16):(11*16)] = vec_cmp(a[(6*16):(7*16)],
#        a[(10*16):(11*16)])
#    a[(2*16):(3*16)], a[(4*16):(5*16)] = vec_cmp(a[(2*16):(3*16)],
#        a[(4*16):(5*16)])
#    a[(6*16):(7*16)], a[(8*16):(9*16)] = vec_cmp(a[(6*16):(7*16)],
#        a[(8*16):(9*16)])
#    a[(10*16):(11*16)], a[(12*16):(13*16)] = vec_cmp(a[(10*16):(11*16)],
#        a[(12*16):(13*16)])
#    a[(1*16):(2*16)], a[(9*16):(10*16)] = vec_cmp(a[(1*16):(2*16)],
#        a[(9*16):(10*16)])
#    a[(5*16):(6*16)], a[(13*16):(14*16)] = vec_cmp(a[(5*16):(6*16)],
#        a[(13*16):(14*16)])
#    a[(5*16):(6*16)], a[(9*16):(10*16)] = vec_cmp(a[(5*16):(6*16)],
#        a[(9*16):(10*16)])
#    a[(3*16):(4*16)], a[(11*16):(12*16)] = vec_cmp(a[(3*16):(4*16)],
#        a[(11*16):(12*16)])
#    a[(7*16):(8*16)], a[(15*16):(16*16)] = vec_cmp(a[(7*16):(8*16)],
#        a[(15*16):(16*16)])
#    a[(7*16):(8*16)], a[(11*16):(12*16)] = vec_cmp(a[(7*16):(8*16)],
#        a[(11*16):(12*16)])
#    a[(3*16):(4*16)], a[(5*16):(6*16)] = vec_cmp(a[(3*16):(4*16)],
#        a[(5*16):(6*16)])
#    a[(7*16):(8*16)], a[(9*16):(10*16)] = vec_cmp(a[(7*16):(8*16)],
#        a[(9*16):(10*16)])
#    a[(11*16):(12*16)], a[(13*16):(14*16)] = vec_cmp(a[(11*16):(12*16)],
#        a[(13*16):(14*16)])
#    a[(1*16):(2*16)], a[(2*16):(3*16)] = vec_cmp(a[(1*16):(2*16)],
#        a[(2*16):(3*16)])
#    a[(3*16):(4*16)], a[(4*16):(5*16)] = vec_cmp(a[(3*16):(4*16)],
#        a[(4*16):(5*16)])
#    a[(5*16):(6*16)], a[(6*16):(7*16)] = vec_cmp(a[(5*16):(6*16)],
#        a[(6*16):(7*16)])
#    a[(7*16):(8*16)], a[(8*16):(9*16)] = vec_cmp(a[(7*16):(8*16)],
#        a[(8*16):(9*16)])
#    a[(9*16):(10*16)], a[(10*16):(11*16)] = vec_cmp(a[(9*16):(10*16)],
#        a[(10*16):(11*16)])
#    a[(11*16):(12*16)], a[(12*16):(13*16)] = vec_cmp(a[(11*16):(12*16)],
#        a[(12*16):(13*16)])
#    a[(13*16):(14*16)], a[(14*16):(15*16)] = vec_cmp(a[(13*16):(14*16)],
#        a[(14*16):(15*16)])
#    return a

def sort_tile(a, length):
  for lane in range(0,16):
    tmp = a[lane:16*length:16]
    tmp.sort()
    a[lane:16*length:16] = tmp
  return a

def split_vec(a, r, radix_mask, shift):
  result = [0] * 16
  num_valid = 0
  for j in range(0,16):
    if (a[j] >> shift) & radix_mask == r:
      result[j] = a[j]
      num_valid += 1
  return result, num_valid




N = 16*16*16

a = [None] * N

for i in range(0,N):
  a[i] = randint(0,max_key)

a = sort_tile(a,16*16)
for i in range(0,16*16):
  for j in range(0,16):
    print("%4X" % a[16*i+j], end = " ")
  print("")

#print("------------------------------------")
#for i in range(0,16):
#  vec = split_vec(a[16*i:16*(i+1)],i,15,12)
#  for j in range(0,16):
#    print("%4X" % vec[j], end = " ")
#  print("")

print("------------------------------------")

log_buckets = 2
num_buckets = 1<<log_buckets
buckets = [None] * num_buckets
for j in range(0,num_buckets):
  buckets[j] = []
print(buckets)
bucket_lengths = [0] * num_buckets

num_split_vecs = 0
for k in range(0,16*16):
  for i in range(0,num_buckets):
    vec, num_valid = split_vec(a[16*k:16*(k+1)],i,num_buckets-1,16-log_buckets)
    if num_valid > 0:
      buckets[i].extend(vec)
      bucket_lengths[i] += 1
      num_split_vecs += 1
      #for j in range(0,16):
        #print("%4X" % vec[j], end = " ")
      #print("")

print("num_split_vecs = %d (inflation of %f)" % (num_split_vecs,
    num_split_vecs/(16*16)) )

#print(buckets[0])
#sort buckets
for i in range(0,num_buckets):
  sort_tile(buckets[i], bucket_lengths[i])
  #print(buckets[i])
  num_rows = 0
  for j in range(0,bucket_lengths[i]):
    is_zero_row = True
    for k in range(0,16):
      if buckets[i][16*j+k] != 0:
        is_zero_row = False
        break
    if not is_zero_row:
      num_rows += 1
  print("bucket", i, "%d/%d = %f" % (num_rows, (16*16)//num_buckets,
    num_rows/((16*16)//num_buckets)))
