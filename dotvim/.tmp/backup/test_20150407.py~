#!/usr/bin/python3

from random import *
from statistics import median

def print_vecs(arr,height,depth):
  for i in range(height):
    for j in range(depth):
      print("%4X " % (arr[depth*i+j]), end = "")
    print("")

def dynamic_swap_vecs(arr, depth, row_0, row_1, mean_0, mean_1):
  for j in range(depth):
    no_swap = min(abs(arr[row_0*depth+j]-mean_0),abs(arr[row_1*depth+j]-mean_1))
    swap = min(abs(arr[row_1*depth+j]-mean_0),abs(arr[row_0*depth+j]-mean_1))
    if swap < no_swap:
      arr[row_0*depth+j], arr[row_1*depth+j] = arr[row_1*depth+j], arr[row_0*depth+j]

seed()

depth = 16
keysize = 4
max_key = (1<<keysize) - 1
height = (1<<keysize)
n = depth*height

num_iter = 100
num_placed = [0] * num_iter
distance = [0] * num_iter
total_steps = [0] * num_iter
num_cols = 16

for iter in range(num_iter):
  arr = [randint(0,max_key) for r in range(n)]

  num_swaps = 0
  for col in range(num_cols):
    p = 0
    while p < height:
      x = arr[p*depth+col]
      while x != p:
        if arr[x*depth+col] == x:
          x = p
        else:
          dynamic_swap_vecs(arr,depth,p,x,p,x)
          num_swaps += 1
          x = arr[p*depth+col]
      p += 1
  #finish
  counts = [0] * height
  for p in range(height):
    while counts[p] < 16 and arr[p*depth+counts[p]] == p:
      counts[p] += 1
  p = 0
  while p < height:
    while counts[p] < 16:
      x = arr[p*depth+counts[p]]
      if x == p or counts[x] == 16:
        counts[p] += 1
      else:
        arr[p*depth+counts[p]], arr[x*depth+counts[x]] = arr[x*depth+counts[x]], arr[p*depth+counts[p]]
        num_swaps += 1
        while counts[x] < 16 and arr[x*depth+counts[x]] == x:
          counts[x] += 1
    p += 1
  total_steps[iter] = num_swaps

  #cal pct in correct spot
  num_cor = 0
  for i in range(height):
    for j in range(depth):
      if arr[depth*i+j] == i:
        num_cor += 1
  num_placed[iter] = num_cor

  #calc mean distance
  dists = [abs(arr[i] - i//depth) for i in range(n)]
  distance[iter] = sum(dists)/n

  if iter == 0:
    print("")
    print_vecs(arr,height,depth)
    print("num_swaps = %d" % (num_swaps))

    print("%d/%d = %lf correct" % (num_cor, n, num_cor/n))

# print("num_placed:")
# print(num_placed)

# print("pct placed:")
# print([a/n for a in num_placed])

print("ave num_placed:")
print(sum(num_placed)/num_iter)

print("ave pct placed:")
print(sum(num_placed)/(n*num_iter))

# print("distance:")
# print(distance)

print("ave distance (compared to %d):" % (max_key // 2))
print(sum(distance)/num_iter)

# print("num steps:")
# print(total_steps)

place_per_step = [num_placed[iter] / total_steps[iter] for iter in range(num_iter)]
# print("place_per_step:")
# print(place_per_step)
print("ave place per step:")
print(sum(place_per_step)/num_iter)
