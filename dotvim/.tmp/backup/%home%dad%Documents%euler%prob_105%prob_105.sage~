#!/usr/bin/sage

import itertools

def gen_homog_tests(n):

    N = 2*n

    tests = []

    for tup in itertools.combinations(range(1,N), n-1):

        A = [0] + list(tup)
        B = [i for i in range(1,N) if not i in A]

        good = False
        for i in range(1,n):

            if A[i] > B[i]:
                good = True
                break

        if good:
            tests.append([A,B])

    return tests

all_tests = [gen_homog_tests(i) for i in range(2,7)]

def apply_test(A, half_len, test):

    X = test[0]
    Y = test[1]

    lhs = sum([A[x] for x in X])
    rhs = sum([A[y] for y in Y])

    return lhs != rhs

def apply_homog_tests(A, half_len, tests):

    for test in tests:

        if not apply_test(A, half_len, test):

            return False

    return True

def apply_all_tests(A, len_A):

    max_test_index = (len_A // 2) - 1

    for i in range(max_test_index):

        for tup in itertools.combinations(range(len_A), 2*(i+2)):

            subset = [A[i] for i in tup]
            subset.sort()

            if not apply_homog_tests(subset, i+2, all_tests[i]):
                return False

    return True

def check_optimal(A):

    len_A = len(A)

    if len_A <= 2:
        return True

    mid_pt = (len_A+1)//2

    lhs = sum(A[0:mid_pt])
    rhs = sum(A[mid_pt+((len_A+1)&1):len_A])

    if lhs <= rhs:
        return False

    return apply_all_tests(A, len_A)


if __name__ == "__main__":

    fp = open("sets.txt")

    lines = fp.readlines()

    fp.close()

    sets = []

    for line in lines:

        line.strip()

        arr = line.split(',')

        arr = [int(a) for a in arr]

        arr.sort()

        sets.append(arr)

    print(check_optimal(sets[0]))

    """
    ans = 0

    for A in sets:

        if check_optimal(A):

            ans += sum(A)

    print(ans)
    """
