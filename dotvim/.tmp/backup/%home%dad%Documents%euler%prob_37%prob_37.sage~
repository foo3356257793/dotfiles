#!/usr/bin/sage

import itertools

def reverse_num(a):

    a_str = '%d' % a
    a_str = a_str[::-1]

    return int(a_str)

def concat_num(a,b):

    c_str = '%d%d' % (a,b)

    return int(c_str)

def test_r_to_l(p):

    if not is_prime(p):
        return False

    if p < 10:
        return True

    p_str = '%d' % p

    p_trun = int(p_str[:-1])

    return test_r_to_l(p_trun)

if __name__ == "__main__":

    # find all 2-digit truncatable primes

    one_digit_primes = prime_range(10)

    l_to_r = [copy(one_digit_primes)]

    while True:

        lower_digit_results = l_to_r[-1]

        new_results = []

        for pair in itertools.product(range(1,10), lower_digit_results):

            p = pair[0]
            q = pair[1]

            r = concat_num(p,q)

            if is_prime(r):
                new_results.append(r)

        if len(new_results) == 0:
            break

        l_to_r.append(new_results)

    fully_trun = []

    l_to_r = flatten(l_to_r)

    for p in l_to_r:

        if p >= 10 and test_r_to_l(p):

            fully_trun.append(p)

