# Project Euler 25.

A = big((1+√5)/2)
B = big((1-√5)/2)

BOUND = BigInt(10)^(1000-1)

function fib_n(n)
    """
    Return the n-th element of the Fibonacci sequence.
    """

    f_n = (A^n - B^n) / (A-B)
    f_n = BigInt(round(f_n))

    return f_n
end

function binary_search(min_val, max_val, test)
    """
    Binary search for smallest value where 'test' is True.

    Args:
        min_val: minimum value to consider
        max_val: maximum value to consider
        test: input function; assume if test(a) is True, then test(b) is True
            for b>a.

    Returns:
        The smallest value 'a' such that test(a) is True.
    """
    if max_val == min_val
        return min_val
    end

    if max_val == min_val + 1
        if test(min_val)
            return min_val
        end
        return max_val
    end

    mid_val = (max_val+min_val) ÷ 2

    if test(mid_val)
        return binary_search(min_val, mid_val, test)
    end
    return binary_search(mid_val+1, max_val, test)

end

function prob_25()
    index = 100
    while fib_n(index) < BOUND
        index *= 2
    end

    answer = binary_search(index÷2, index, x -> (fib_n(x) >= BOUND))

    return answer
end

prob_25()
