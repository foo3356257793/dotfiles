#!/usr/bin/sage

import time
import itertools

if __name__ == "__main__":

    #p = 10000019
    p = 109

    bd = 10**5

    n_digits = round(log(bd,10))

    dim_lat = (n_digits+1)//2
    palindrome_vals = [10**i + 10**(n_digits-1-i) for i in range(dim_lat)]
    palindrome_vals = [val % p for val in palindrome_vals]

    """
    counts_0 = [0] * p

    start_tm = time.perf_counter()

    ct = 0
    for tup in itertools.product(range(1,10), range(10), range(10), range(10), range(10), range(10), range(10)):

        val = sum([palindrome_vals[i] * tup[i] for i in range(7)])
        val %= p
        counts_0[val] += 1

        ct += 1
        if ct % 10000 == 0:
            print(ct)

    end_tm = time.perf_counter()
    tot_tm = end_tm-start_tm
    print("TIME = %.3lf" % tot_tm)

    counts_1 = [0] * p

    start_tm = time.perf_counter()

    ct = 0
    for tup in itertools.product(range(10), repeat=7):

        val = sum([palindrome_vals[i+7] * tup[i] for i in range(7)])
        val %= p
        counts_1[val] += 1

        ct += 1
        if ct % 10000 == 0:
            print(ct)

    end_tm = time.perf_counter()
    tot_tm = end_tm-start_tm
    print("TIME = %.3lf" % tot_tm)
    """


    """
    exhaust_amt = 10**dim_lat
    sqrt_amt = ceil(sqrt(exhaust_amt))

    counts = [0] * p

    start_tm = time.perf_counter()

    for a in range(sqrt_amt):

        indices = [int(c) for c in str(a)]

        val = sum([indices[i] * palindrome_vals[i] for i in range(len(indices))])

        val %= p

        counts[val] += 1

    end_tm = time.perf_counter()
    tot_tm = end_tm-start_tm
    print("TIME = %.3lf" % tot_tm)
    """
