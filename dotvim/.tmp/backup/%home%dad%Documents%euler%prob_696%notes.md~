A very hard problem.

# Description

$w(10^8 10^8, 30)$

$n=10^8$ is possible tiles
$s=10^8$ is number of suits
$s=30$ is number of triples

# Ideas

Let $T(n,s,t)$ be number of ways to
form $t$ triples w/o an extra pair.

Then
$$
w(n,s,t)
=
\sum_{k} w(n,s-1,k) \times T(n,1,t-k)
$$

## $n$

We might try to make a table of all
$T(n,1,t)$.  This is really pushing it on
storage I think.

Inductively, how can we compute $T(n,1,t)$?

**hard?**.

It doesn't seem as easy as
$T(n-1,1,t)$ plus some other inductive quantities.

_idea_

Look at triples involving $n$ which could be used.
Look at overlapping elements and branch over triples which involve those elements.

# 20200617

Define $T(n,1,t,c,d)$ to be the number of ways on

  * numbers up to $n$
  * $t$ triples
  * $c$ values of $n$ free
  * $d$ values of $n$ free

Always have $1 \leq c \leq 4$ and $c \leq d \leq n$.

## Idea

Consider a block of tiles which cover a continuous region.
Exhaust over the possible sizes of connected components.
This should reduce the problem.

One could look at the integer partitions of $30$ ($5604$)
for this, as an example.

Figure out the number of ways to configure a connected component
of a given size.

We then would need to determine the number of ways to assign values
and suits to these partitions.

### Idea

Enumerate ways to partition into sets $[c,n]$, continuous region
of $c$ values with $n$ tiles.  Compute how many ways each of these regions
have (exhaust?).

For each partition, then figure out the total empty region and how many ways there are to divide up that region.

**Cases**.

We always need the number of tiles to be a multiple of $3$
unless there is a pair in it, in which it is $2 \bmod{3}$.

The continuous region is always bounded by the number of tiles.

### Generate all hands?

Suppose all $30$ tiles lie in a small region.
Can we generate all possible hands?

For example, $30$ tiles in $v$ values.
Ignoring the caps on values, there are
$$
{{30-1}\choose{15-1}}
$$
ways to do this.  This is about $26$ bits.

If we do this naively, this could be about $30$ bits of work.

## Ideas

If $1$ has one tile, it must be part of a triple to be a winning hand.
In the simpler case, if $1$ has only two tiles, it must be part of a triple.

If $1$ has three tiles, we branch.
If $2$ has one tile, then $1$ must be part of a set and $2$ part of a triple
not involving $2$.

**singleton points**.

Here is a thing we might try.
If there is a singleton point, it must be
in a triple.

# 20200618

**worst case**.

$90$ tiles in a connected set

**Induction**.

Look at $1$.  Consider the simplest case.

If number of tiles is $1$ or $2$, it must be a part of triples
starting at $1$.  Branch on these possibilitiies.

If the number of tiles is $3$ or $4$, we have to consider whether it is a part of a set.  If the number of $2$ or $3$ tiles is less, then it must be and we reduce to the cases we already have.

**Ways to rearrange w/o pair**

Consider a hand which can be rearranged.
If we have a set which can be coerced into triples, what happens?

## Afternoon

If we don't have a double, I think the following might be an algorithm
for branching over possibilities.

Start at the edge.
Let $c$ be the number of values,
$T$ the number of tiles.

Enumerate possible number of tiles for $1$.
If $1$ or $2$, then these must start triples.
Set $[-1,-1]$ or $[-2,-2]$ as the head of the next values.

If $3$, then it must be separable, so don't use this case.

If $4$, we may assume we can take out a triple.
Set $[-1,-1]$ as the head.

In the next inductive steps,
do a similar calculation.

We further might hope to do a meet in the middle approach.

**With a double**.

Need ideas to deal with lack of uniqueness.

Start at the edge.
If one, then the double can't be here: it must be the head of a triple.
The $2$ and $3$ values are then locked in: we are not able to rearrange these.
If two, then the double is here only when we can decompose.  Ignore this case.
We then need to figure out how to make it so that we couldn't rearrange things to make this decomposable.


t t t
t t t  only 3 long (and no double)

  t t t  only 4 long (and no double)
t t t
t t t

  t t t
t t t t
t t t

**Idea**

do an exhaust on numbers of tiles per value.
figure out all ways to decompose into the various kinds of sets.
classify the possibilities by:

  * number of tiles
  * number of values
  * whether a double is contained
  * number of leftover

pair together possibilities

## Evening

**Toy**.

  * Code to evaluate a hand for being a winning hand.
  * Verify the $(4,1,1)$ case.
  * Start to work on a split counting strategy.

# 20190619

## Toy

I wrote code to check if a hand is a winning hand.
It looks like it works as it matches the smaller numbers given.

## Next toy

I have the $w(9,1,4)$ via brute force.

Try to get the $w(9,3,4)$.

# 20200621

## faster function for number of possible hands

Before I did a brute force on the number of hands with a given number of
triples, with or without a pair.  Now I want to improve this.

