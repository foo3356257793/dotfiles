#!/usr/bin/sage

import itertools

def are_disjoint(d0,d1):

    d0_str = str(d0)
    d1_str = str(d1)

    for c in d0_str:

        if c in d1_str:
            return False

    return True


def _find_sets(curr_set, len_set, pairs_by_p):

    print('trying %s' % curr_set)

    avail_primes = copy(pairs_by_p[curr_set[0]])

    for q in curr_set[1:]:

        avail_primes = [p for p in avail_primes if p in pairs_by_p[q] and p > q]

        if len(avail_primes) == 0:
            return []

    ret = []

    for p in avail_primes:

        new_set = curr_set + [p]
        len_p = len(str(p))
        len_new_set = len_set + len_p

        if len_new_set == 9:

            ret += [new_set]

        # is it worth trying harder
        elif len_new_set + len_p <= 9:

                ret += _find_sets(new_set, len_new_set, pairs_by_p)


    return ret


def find_sets(pairs_by_p):

    ret = []

    for p in pairs_by_p.keys():

        pr_set = [p]
        len_set = len(str(p))

        for q in pairs_by_p[p]:

            if q < p:
                continue

            new_set = pr_set + [q]
            len_q = len(str(q))
            len_new_set = len_q + len_set

            if len_new_set == 9:

                ret.append(new_set)

            elif len_new_set + len_q <= 9:

                ret += _find_sets(new_set, len_new_set, pairs_by_p)

    return ret


if __name__ == "__main__":

    primes_by_n_digits = []

    for n_digits in range(1,9):

        print(n_digits)

        primes = []

        for tup in itertools.permutations(range(1,10), r=int(n_digits)):

            d_str = ''
            for t in tup:
                d_str += str(t)

            d = int(d_str)

            if is_prime(d):
                primes.append(d)

        primes_by_n_digits.append(primes)

    primes = flatten(primes_by_n_digits)

    # look for pairs
    pairs_by_p = {}

    for p in primes:
        pairs_by_p[p] = []

    for i in range(len(primes)-1):

        p = primes[i]

        #len_p = floor(log(p,10))
        len_p = len(str(p))

        for j in range(i+1, len(primes)):

            q = primes[j]

            #len_q = floor(log(q,10))
            len_q = len(str(q))

            if len_p + len_q >= 10:
                break

            if are_disjoint(p,q):

                pairs_by_p[p].append(q)
                pairs_by_p[q].append(p)

    sets = []
