#!/usr/bin/sage

def binary_search(min_val, max_val, test):

    if max_val == min_val:

        return min_val

    if max_val == min_val + 1:

        if test(min_val):
            return min_val
        else:
            return max_val

    mid_val = (max_val+min_val) // 2

    if test(mid_val):

        return binary_search(min_val, mid_val, test)

    else:

        return binary_search(mid_val+1, max_val, test)


def num_sols(M):

    ct = 0

    for a in range(1,M+1):
        for B in range(2,2*a+1):

            sq_len = a^2 + B^2

            if is_square(sq_len):

                for c in range(1,(B//2)+1):

                    b = B-c

                    if b <= a:

                        ct += 1

    return ct

if __name__ == "__main__":

    # derive number of solutions up to 100
    M = 100

    target = 10**6

    M_min = 100
    M_max = 2*M_min

    while num_sols(M_max) <= target:

        print(M_max)
        M_max *= 2

    M = binary_search(M_max//2, M_max, lambda x: num_sols(x) > target)

    print(M)

