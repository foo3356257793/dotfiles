#!/usr/bin/sage

#
# TODO: redo this more nicely
#

# mapping of letters to numbers
char_to_val = {}

for i in range(2,10):
    char_to_val[str(i)] = i

char_to_val['T'] = 10
char_to_val['J'] = 11
char_to_val['Q'] = 12
char_to_val['K'] = 13
char_to_val['A'] = 14

def is_flush(info):
    """
    are all these suits the same?
    """

    suits = info['suits']

    for i in range(1,5):

        if suits[i] != suits[0]:
            info['flush'] = False
            return info

    info['flush'] = True
    return info

def is_straight(info):
    """
    are these values a straight?
    """

    info['vals'].sort()
    vals = copy(info['vals'])

    # A can mean 1
    if vals[0] == 2 and vals[4] == 14:
        vals[4] = 1
        vals.sort()

    for i in range(1,5):
        if vals[i] - vals[i-1] != 1:
            info['straight'] = False
            return info

    info['straight'] = True
    return info

def partition_in_sets(info):

    info['vals'].sort()
    vals = info['vals']

    v = vals[0]
    set_size = 1

    partition = []

    for i in range(1,5):

        if vals[i] == v:
            set_size += 1
        else:
            partition.append([set_size,v])
            v = vals[i]
            set_size = 1

    partition.append([set_size,v])

    # replace vals by the partition
    new_vals = []
    for tup in partition:
        new_vals += [tup[1]] * tup[0]

    info['partition'] = partition
    info['vals'] = new_vals

    return info

def eval_partition(partition, info):

    partition.sort(reverse=True)

    # four of a kind?
    if partition[0][0] == 4:
        info['set'] = 'four of a kind'
    elif partition[0][0] == 3:
        if partition[1][0] == 2:
            info['set'] = 'full house'
        else:
            info['set'] = 'three of a kind'
    elif partition[0][0] == 2:
        if partition[1][0] == 2:
            info['set'] = 'two pairs'
        else:
            info['set'] = 'one pair'
    else:
        info['set'] = 'high card'

    return info

scores_by_label = {}
labels_in_order = [ 'high card', 'one pair', 'two pairs', 'three of a kind', 'straight', 'flush', 'full house', 'four of a kind', 'straight flush']

for i in range(len(labels_in_order)):
    scores_by_label[labels_in_order[i]] = i

def classify_hand(info):

    info['hand'] = info['set']

    if info['flush']:
        if info['straight']:
            info['hand'] = 'straight flush'
        else:
            info['hand'] = 'flush'
    elif info['straight']:
        info['hand'] = 'straight'

    return info

base_digits = [15**i for i in range(6)]

def score_hand(info):

    if not 'hand' in info:
        info = classify_hand(info)

    hand_score = scores_by_label[info['hand']]

    score_tup = []

    info['partition'].sort()
    partition = info['partition']

    for tup in partition:

        size = tup[0]
        val = tup[1]

        score_tup += [val] * size

    score_tup.append(hand_score)

    score = sum([score_tup[i] * base_digits[i] for i in range(6)])

    info['score'] = score
    return info

def process_hand(hand):

    info = {}

    # parse the hand
    info['suits'] = [c[1] for c in hand]
    info['vals'] = [char_to_val[c[0]] for c in hand]

    # check for flush and straight
    info = is_flush(info)
    info = is_straight(info)

    info = partition_in_sets(info)
    info = eval_partition(info['partition'], info)

    info = classify_hand(info)

    info = score_hand(info)

    return info


if __name__ == "__main__":

    fp = open('poker.txt', 'r')

    lines = fp.readlines()

    fp.close()

    hands = [line.split() for line in lines]

    a_win = 0

    """
    for hand in hands:

        a = hand[0:5]
        b = hand[5:10]

        aa = process_hand(a)
        bb = process_hand(b)

        if aa['score'] > bb['score']:
            a_win += 1

    print(a_win)
    """

    """
    # check some hands manually

    for i in range(5):

        hand = hands[i]

        a = hand[0:5]
        b = hand[5:10]

        aa = process_hand(a)
        bb = process_hand(b)

        print("-----")
        print(a)
        print(aa['hand'])
        print(aa['score'])

        print(b)
        print(bb['hand'])
        print(bb['score'])
    """
