#include <stdio.h>
#include <upc.h>

#define NperTHREAD 100
#define SIZE (NperTHREAD * THREADS)
#define BLOCK NperTHREAD

shared float dot_cyc, dot_blk;
shared float x_cyc[SIZE], y_cyc[SIZE];
shared [*] float x_blk[SIZE], y_blk[SIZE];

upc_lock_t *dotlock;

main()
{
    int i;
    float mydot;

    // what is a upc_lock_t ?
    dotlock = upc_all_lock_alloc();
    //upc_lock_init( dotlock );

    if(MYTHREAD == 0)
        dot_blk = dot_cyc = 0.0;
    upc_barrier(0);

    // "affinity" is an int so it is (i mod THREADS)
    upc_forall( i=0; i < SIZE; i++; i ){
        x_cyc[i] = (float) i;
        y_cyc[i] = x_cyc[i];

        x_blk[i] = (float) i;
        y_blk[i] = x_blk[i];
    }

    upc_barrier(1);

    mydot = 0.0;
    // "affinity" is found from affinity of x_cyc[i]
    upc_forall( i=0; i < SIZE; i++; &x_cyc[i] )
        mydot += x_cyc[i] * y_cyc[i];

    printf ("Process %2d holds %g (cyclic)\n", MYTHREAD, mydot);

    upc_lock(dotlock);
        dot_cyc = dot_cyc + mydot;
    upc_unlock(dotlock);

    upc_barrier(2);

    if( MYTHREAD == 0 )
        printf("Total (cyclic) is %g\n", dot_cyc);

    upc_barrier(3);

    mydot = 0.0;
    // "affinity" is found from affinity of x[i]
    upc_forall( i = 0; i < SIZE; i++; &x_blk[i] )
        mydot += x_blk[i] * y_blk[i];

    printf("Process %2d holds %g (blocked)\n", MYTHREAD, mydot);

    upc_lock(dotlock);
        dot_blk = dot_blk + mydot;
    upc_unlock(dotlock);

    upc_barrier(2);

    if( MYTHREAD == 0 )
        printf("Total (blocked) is %g\n", dot_blk);

}

