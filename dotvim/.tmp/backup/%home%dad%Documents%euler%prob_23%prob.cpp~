#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>

#include <vector>
//#include <algorithm>

#include <iostream>

using std::cout;
using std::endl;

using std::vector;

void prob_23()
{

  // how to find these: can bound down to <= 28123
  const int bound = 28123;

  int sum_of_divisors[bound+1];
  sum_of_divisors[0] = 0;
  sum_of_divisors[1] = 0;
  for(int i=2; i<bound+1; i++)
    sum_of_divisors[i] = 1;

  for(int divisor=2; divisor<((bound+1)/2); divisor++)
  {
    int multiple = 2*divisor;

    while(multiple <= bound)
    {
      sum_of_divisors[multiple] += divisor;
      multiple += divisor;
    }
  }

  vector<int> abundant_numbers = {};

  for(int i=0; i<bound+1; i++)
  {
    if(sum_of_divisors[i] > i)
    {
      abundant_numbers.push_back(i);
    }
  }

  int number_abundant = abundant_numbers.size();

  bool is_sum[bound+1];
  for(int i=0; i<bound+1; i++)
  {
    is_sum[i] = false;
  }

  for(int i=0; i<number_abundant; i++)
  {
    for(int j=i; j<number_abundant; j++)
    {
      int sum_abundant = abundant_numbers[i] + abundant_numbers[j];

      if(sum_abundant > bound)
      {
        break;
      }

      is_sum[sum_abundant] = true;
    }
  }

  int answer = 0;

  for(int i=0; i<bound+1; i++)
  {
    if(not is_sum[i])
    {
      answer += i;
    }

  }

  cout << answer << endl;


}

int main(int argc, char *argv[])
{

  prob_23();

}

