#!/usr/bin/sage

# If the numbers 1 to 5 are written out in words: one, two, three, four, five,
# then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.

# If all the numbers from 1 to 1000 (one thousand) inclusive were written out in
# words, how many letters would be used?

# NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and
# forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20
# letters. The use of "and" when writing out numbers is in compliance with
# British usage.

first_number_words = ['one', 'two', 'three', 'four', 'five', 'six', 'seven',
        'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen',
        'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen']

tens_words = ['twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy',
        'eighty', 'ninety']

def num_to_words(a):

    if a == 1000:
        return 'one thousand'

    if a >= 100:

        top_digit = a // 100

        ret = '%s hundred' % first_number_words[top_digit-1]

        rest = a - 100 * top_digit

        if rest > 0:

            ret += ' and ' + num_to_words(rest)

        return ret


    if a < 20:
        return first_number_words[a-1]

    top_digit = a // 10

    ret = tens_words[top_digit-2]

    rest = a - 10 * top_digit

    if rest > 0:

        ret += '-%s' % first_number_words[rest-1]

    return ret

if __name__ == "__main__":


    count = 0

    for a in range(1, 1000+1):

        word = num_to_words(a)

        for c in word:

            if c != ' ' and c != '-':
                count += 1

