#include <stdio.h>
#include <stdlib.h>

#include <time.h>

#define LENGTH 16

typedef struct{
    int index;
    int value;
} indexed_pair;

int cmppairs(indexed_pair *a, indexed_pair *b){
    return a->value - b->value;
}

int main(int argc, char *argv[])
{

    int array[LENGTH];
    indexed_pair array_w_indices[LENGTH];
    int i;

    for(i = 0; i < LENGTH; i++){
        array[i] = rand();
        array_w_indices[i].index = i;
        array_w_indices[i].value = array[i];
        printf("%u: %d\n", i, array[i]);
    }

    printf("\n==================================================================\n\n");

    qsort(array_w_indices, LENGTH, sizeof(indexed_pair), (int (*)(const void *, const void *)) cmppairs);

    for(i = 0; i < LENGTH; i++){
        printf("%u: %d\n", array_w_indices[i].index, array_w_indices[i].value);
    }

    printf("\n==================================================================\n\n");

    // randomly perturb
    for(i = 0; i < LENGTH; i++){
       array[i] += (rand() / (1 << 8));
    }

    // apply sort mapping
    for(i = 0; i < LENGTH; i++){
        array_w_indices[i].value = array[array_w_indices[i].index];
    }

    qsort(array_w_indices, LENGTH, sizeof(indexed_pair), (int (*)(const void *, const void *)) cmppairs);

    for(i = 0; i < LENGTH; i++){
        printf("%u: %d\n", array_w_indices[i].index, array_w_indices[i].value);
    }

    exit(0);
}

