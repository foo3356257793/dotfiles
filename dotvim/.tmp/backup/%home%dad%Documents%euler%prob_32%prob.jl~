function gen_candidates(n,digits)

    if n == 1
        return [[d] for d in digits]
    end

    ret = []

    for i in 1:length(digits)

        d = digits[i]

        sub_array = digits[1:i-1]
        sub_array = vcat(sub_array, digits[i+1:length(digits)]) # Boo!

        sub_ret = gen_candidates(n-1,sub_array)

        ret = vcat(ret, [vcat([d], tup) for tup in sub_ret])
    end

    return ret
end


function prob_32()

    all_digits = 1:9
    candidates = gen_candidates(5, all_digits)

    S = 0

    products = []

    for tup in candidates

        a = tup[1] * 10 + tup[2]
        b = tup[3] * 100 + tup[4] * 10 + tup[5]

        c = a * b

        full_tup = copy(tup)

        works = true

        while c > 0

            d = c % 10

            if d in full_tup || d==0

                works = false
                break
            end

            push!(full_tup,d)

            c = c รท 10
        end

        if length(full_tup) != 9
            works = false
        end

        if works
            #println("$a $b $(a*b)")

            if !(a*b in products)
                push!(products,a*b)
            end
        end
    end

    for tup in candidates

        a = tup[1]
        b = tup[2] * 1000 + tup[3] * 100 + tup[4] * 10 + tup[5]

        c = a * b

        full_tup = copy(tup)

        works = true

        while c > 0

            d = c % 10

            if (d in full_tup) || (d==0)

                works = false
                break

            end
            push!(full_tup,d)

            c = c รท 10

        end
        if length(full_tup) != 9
            works = false
        end

        if works
            #println("$a $b $(a*b)")

            if !(a*b in products)
                push!(products,a*b)
            end
        end
    end

    answer = sum(products)

    return answer
end

@time prob_32()
