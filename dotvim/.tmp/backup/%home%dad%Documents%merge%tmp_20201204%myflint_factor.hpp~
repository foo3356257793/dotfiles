#pragma once

#include "myflint_ZZ.hpp"
#include "formal_sum.hpp"

// flint
#include <flint/flint.h>
#include <flint/fmpz_factor.h>

struct FactorParams
{
  slong bits;
};

struct FactorParamsNew
{
  slong min_bits;
  slong max_bits;

  FactorParamsNew() : min_bits(0), max_bits(15) {}
  FactorParamsNew(slong in_max) : min_bits(0), max_bits(in_max) {}
  FactorParamsNew(slong in_min, slong in_max) : min_bits(in_min), max_bits(in_max) {}
};

struct FactorData
{
  fmpz_factor_t data;
  FactorParams params;
  FactorParamsNew params_new;
  int success;

  FactorData(const ZZ& in, const FactorParams in_params);
  FactorData(const FactorParams in_params, const ZZ &in) : FactorData(in,in_params) {}

  FactorData(const ZZ& in) : FactorData(in,(FactorParams) {.bits=15}) {}

  FactorData(const ZZ& in, const FactorParamsNew in_params);

  // I don't want to mess with copying
  FactorData(const FactorData &other) = delete;
  FactorData& operator=(const FactorData &other) = delete;

  Factorization<ZZ> extract() const;
  Factorization<ZZ> copy() const;

  ~FactorData();

};

Factorization<ZZ> factor(const ZZ& in, const FactorParams params);
Factorization<ZZ> factor(const FactorParams params, const ZZ& in);
Factorization<ZZ> factor(const ZZ& in);

Factorization<ZZ> factor(const ZZ& in, const FactorParamsNew params);

ostream& operator<<(ostream& os, const FactorParams& f);
ostream& operator<<(ostream& os, const FactorData& f);
ostream& operator<<(ostream& os, const shared_ptr<FactorData>& f);

Factorization<ZZ> factor_ecm(const ZZ& in, int64_t max_bits);
