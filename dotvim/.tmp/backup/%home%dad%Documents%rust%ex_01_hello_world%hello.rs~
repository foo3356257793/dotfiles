use std::fmt;

fn main() {

    println!("Hello world!");

    println!("{} days", 31);

    println!("{0}, this is {1}. {1}, this is {0}", "Alice", "Bob");

    println!("{subject} {verb} {object}",
             object="the lazy dog",
             subject="the quick brown fox",
             verb="jumps over");

    println!("{} of {:b} people know binary, the other half doesn't", 1, 2);

    println!("My name is {0}, {1}, {0}", "Bond", "James");

    /*
    #[derive(Debug)]
    struct Structure(i32);

    #[derive(Debug)]
    struct Deep(Structure);


    println!("This struct `{:?}` will now print...", Structure(3));

    println!("This struct `{:?}` will now print...", Deep(Structure(7)));
    */

    struct Structure(i32);

    impl fmt::Display for Structure {
        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
            write!(f, "{}", self.0)
        }
    }

    println!("This struct `{}` will now print...", Structure(3));

    println!("Pi is roughly {pi:.3}", pi=3.141592);

    #[derive(Debug)]
    struct Person<'a> {
        name: &'a str,
        age: u8
    }

    let name = "Peter";
    let age = 27;
    let peter = Person { name, age };

    println!("{:#?}", peter);

    /*
    #[allow(dead_code)]
    struct UnPrintable(i32);

    #[derive(Debug)]
    struct DebugPrintable(i32);
    */

}
