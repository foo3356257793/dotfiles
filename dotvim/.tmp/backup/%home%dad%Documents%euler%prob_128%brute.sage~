#!/usr/bin/sage

class Tile:

    def __init__(self, label):
        self.label = label
        self.neighbors = []

    def __repr__(self):
        rv = f'Tile {self.label}\n'
        rv += f'  neighbors = {self.neighbors}'

        return rv

def fill_in_outer_ring(tiles, side_len, inner_ring_start, outer_ring_start):

    outer_ring = outer_ring_start
    inner_ring = inner_ring_start

    #print('***START CONNECTIONS***')

    for side in range(6):

        new_tile = Tile(outer_ring)
        new_tile.neighbors.append(inner_ring)
        tiles.append(new_tile)
        tiles[inner_ring].neighbors.append(outer_ring)

        #print(f'corner: {inner_ring}<->{outer_ring}')

        outer_ring += 1

        for i in range(1,side_len):

            new_tile = Tile(outer_ring)

            new_tile.neighbors.append(inner_ring)
            tiles[inner_ring].neighbors.append(outer_ring)

            #print(f'side: {inner_ring}<->{outer_ring}')

            inner_ring += 1
            if inner_ring == outer_ring_start:
                inner_ring = inner_ring_start

            new_tile.neighbors.append(inner_ring)
            tiles[inner_ring].neighbors.append(outer_ring)

            #print(f'side: {inner_ring}<->{outer_ring}')

            tiles.append(new_tile)

            outer_ring += 1

    tiles[outer_ring_start+6*side_len-1].neighbors.append(outer_ring_start)
    tiles[outer_ring_start].neighbors.append(outer_ring_start+6*side_len-1)

    for outer_ring in range(outer_ring_start, outer_ring_start+6*side_len-1):

        tiles[outer_ring].neighbors.append(outer_ring+1)
        tiles[outer_ring+1].neighbors.append(outer_ring)

        #print(f'conn: {outer_ring}<->{outer_ring+1}')

    #print('***STOP  CONNECTIONS***')

def fill_in_outer_ring_prime_diff(tiles, side_len, inner_ring_start, outer_ring_start):

    if side_len % 100 == 0:
        print(f'filling for side_len = {side_len}')

    outer_ring = outer_ring_start
    inner_ring = inner_ring_start

    #print('***START CONNECTIONS***')

    for side in range(6):

        new_tile = Tile(outer_ring)
        d = outer_ring-inner_ring
        if is_prime(d):
            new_tile.neighbors.append(d)
            tiles[inner_ring].neighbors.append(d)
        tiles.append(new_tile)

        outer_ring += 1

        for i in range(1,side_len):

            new_tile = Tile(outer_ring)

            d = outer_ring-inner_ring

            if is_prime(d):

                new_tile.neighbors.append(d)
                tiles[inner_ring].neighbors.append(d)

            inner_ring += 1
            if inner_ring == outer_ring_start:
                inner_ring = inner_ring_start

            d = outer_ring-inner_ring

            if is_prime(d):
                new_tile.neighbors.append(d)
                tiles[inner_ring].neighbors.append(d)

            #print(f'side: {inner_ring}<->{outer_ring}')

            tiles.append(new_tile)

            outer_ring += 1

    d = 6*side_len-1
    if is_prime(d):
        tiles[outer_ring_start+6*side_len-1].neighbors.append(6*side_len-1)
        tiles[outer_ring_start].neighbors.append(6*side_len-1)


def fill_in_rings_prime_diff(num_rings):

    tiles = [Tile(0), Tile(1)]

    inner_ring = 1
    outer_ring = 2
    side_len = 1

    for i in range(num_rings):

        fill_in_outer_ring_prime_diff(tiles, side_len, inner_ring, outer_ring)

        inner_ring = outer_ring
        outer_ring += 6*side_len
        side_len += 1

    return tiles, inner_ring

def fill_in_rings(num_rings):

    tiles = [Tile(0), Tile(1)]

    inner_ring = 1
    outer_ring = 2
    side_len = 1

    for i in range(num_rings):

        fill_in_outer_ring(tiles, side_len, inner_ring, outer_ring)

        inner_ring = outer_ring
        outer_ring += 6*side_len
        side_len += 1

    return tiles, inner_ring

def PD(tile):

    ret = 0

    for neighbor in tile.neighbors:

        d = abs(neighbor - tile.label)

        if is_prime(d):

            ret += 1

    return ret


if __name__ == "__main__":


    tiles, inner_ring = fill_in_rings_prime_diff(30)

    # for i in range(1,len(tiles)):

    #     print(tiles[i])


    ret = [tile for tile in range(1,inner_ring) if len(tiles[tile].neighbors) == 3]

    print(len(ret), ret)
