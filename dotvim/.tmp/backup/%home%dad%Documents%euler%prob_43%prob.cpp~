#include <algorithm>
#include <iostream>
#include <memory>
#include <numeric>
#include <tuple>
#include <vector>
#include <array>

using namespace std;

const array<int64_t,7> small_primes = {2,3,5,7,11,13,17};

int64_t branch_pandigital(int64_t value, vector<int64_t> digits)
{
  int64_t num_digits = digits.size();

  if(num_digits == 0)
  {
    return value;
  }

  int64_t answer = 0;

  for(int i=0; i<num_digits; i++)
  {
    int64_t new_val = 10*value + digits[i];

    int64_t prime_test = 7-num_digits;

    if(prime_test >= 0)
    {
      int64_t test_val = new_val % 1000;

      if((test_val % small_primes[prime_test]) != 0)
      {
        continue;
      }
    }

    vector<int64_t> rest_digits = {};

    //copy(rest_digits.end(), digits.begin(), digits.begin()+i);
    //copy(rest_digits.end(), digits.begin()+i+1, digits.end());

    for(int j=0; j<num_digits; j++)
    {
      if(j==i)
      {
        continue;
      }

      rest_digits.push_back(digits[j]);
    }

    answer += branch_pandigital(new_val, rest_digits);
  }

  return answer;
}

int64_t prob_43()
{
  auto digits = vector<int64_t>(10);
  iota(digits.begin(), digits.end(), 0);

  return branch_pandigital(0, digits);
}

int main() {

  auto answer = prob_43();

  cout << answer << endl;
}

