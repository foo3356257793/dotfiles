#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>

#include <ctype.h>

#include <vector>

#include <iostream>
#include <fstream>

#include <algorithm>

#include <ranges>

#include <numeric>

#include <execution>

const int NUM_ADJACENT = 13;

using std::cout;
using std::endl;
using std::ifstream;
using std::vector;
using std::ranges::iota_view;

using std::execution::par;

int main(int argc, char *argv[])
{

    // read the file and store digits in a vector
  ifstream fp("number.txt", ifstream::in);

  if(!fp.is_open())
  {
    cout << "Could not open file!" << endl;
    exit(EXIT_FAILURE);
  }

  vector<int64_t> digits = {};

  char ch = fp.get();

  while(fp.good())
  {
    if(!isspace(ch))
    {
      digits.push_back(ch - '0');
    }
    ch = fp.get();
  }

  fp.close();

    int64_t max_prod = 0;

    #pragma omp parallel for shared(max_prod)
    for(int i=0; i<=digits.size()-NUM_ADJACENT; i++)
    {
      //auto prod = prod_fun(i);
      auto prod = std::accumulate(&digits[i], &digits[i+NUM_ADJACENT], 1L, std::multiplies<int64_t>());

        if(prod > max_prod)
        {
            #pragma omp atomic
            max_prod = prod;
        }
    }

    cout << max_prod << endl;

}

