#include <iostream>
using std::cout;
using std::endl;

#include <math.h>

#include <omp.h>

int sum_fifth_powers_of_digits(int a) {
  int sum = 0;

  while (a > 0) {
    sum += pow((a % 10), 5);

    a = a / 10;
  }

  return sum;
}

void prob_30() {
  // figure out a bound

  // 9^5
  int pow_9 = pow(9, 5);

  // 10^n
  int n = 4;
  int pow_10 = pow(10, n);

  while (n * pow_9 > (pow_10 - 1)) {
    n += 1;
    pow_10 *= 10;
  }

  int bound = pow_10 - 1;

  // exhaust possibilities

  int total = 0;

  #pragma omp parallel for
  for (int a = 10; a < bound; a++) {
    int sum = sum_fifth_powers_of_digits(a);

    if (sum == a) {
      #pragma omp atomic
      total += a;
    }
  }

  cout << total << endl;
}

int main(int argc, char *argv[]) { prob_30(); }
