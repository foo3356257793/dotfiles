#include "myflint.hpp"

// pybind11
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/complex.h>

#include <pybind11/functional.h>
#include <pybind11/chrono.h>
#include <pybind11/operators.h>

namespace py = pybind11;

PYBIND11_MODULE(myflint, m) {
  m.doc() = "do flint stuff in python"; // docstring

  py::class_<Fmpz>(m, "Fmpz")
    .def(py::init<>())
    .def(py::init<string>())
    .def(py::init<int64_t>())
    .def("__add__", [](Fmpz &a, Fmpz b) {
        return a+b;
        }, py::is_operator())
    .def("__add__", [](Fmpz &a, int64_t b) {
        return a+b;
        }, py::is_operator())
    .def("__add__", [](Fmpz &a, Fmpq b) {
        return a+b;
        }, py::is_operator())
    .def("__sub__", [](Fmpz &a, Fmpz b) {
        return a-b;
        }, py::is_operator())
    .def("__sub__", [](Fmpz &a, int64_t b) {
        return a-b;
        }, py::is_operator())
    .def("__sub__", [](Fmpz &a, Fmpq b) {
        return a-b;
        }, py::is_operator())
    .def("__mul__", [](Fmpz &a, Fmpz b) {
        return a*b;
        }, py::is_operator())
    .def("__mul__", [](Fmpz &a, int64_t b) {
        return a*b;
        }, py::is_operator())
    .def("__mul__", [](Fmpz &a, Fmpq b) {
        return a*b;
        }, py::is_operator())
    .def("__mod__", [](Fmpz &a, Fmpz b) {
        return a%b;
        }, py::is_operator())
    .def("__mod__", [](Fmpz &a, uint64_t b) {
        return a%b;
        }, py::is_operator())
    .def("__truediv__", [](Fmpz a, Fmpq b) {
        return a/b;
        }, py::is_operator())
    .def("__truediv__", [](Fmpz a, Fmpz b) {
        return a/b;
        }, py::is_operator())
    .def("__truediv__", [](Fmpz a, int64_t b) {
        return a/b;
        }, py::is_operator())
    .def("__rtruediv__", [](Fmpz &b, int64_t a) {
        return a/b;
        }, py::is_operator())
    .def("__eq__", [](Fmpz &a, Fmpz b) {
        return a==b;
        }, py::is_operator())
    .def("__eq__", [](Fmpz &a, int64_t b) {
        return a==b;
        }, py::is_operator())
    .def("__ne__", [](Fmpz &a, Fmpz b) {
        return a!=b;
        }, py::is_operator())
    .def("__ne__", [](Fmpz &a, int64_t b) {
        return a!=b;
        }, py::is_operator())
    .def("__le__", [](Fmpz &a, Fmpz b) {
        return a<=b;
        }, py::is_operator())
    .def("__le__", [](Fmpz &a, int64_t b) {
        return a<=b;
        }, py::is_operator())
    .def("__lt__", [](Fmpz &a, Fmpz b) {
        return a<b;
        }, py::is_operator())
    .def("__lt__", [](Fmpz &a, int64_t b) {
        return a<b;
        }, py::is_operator())
    .def("__gt__", [](Fmpz &a, Fmpz b) {
        return a>b;
        }, py::is_operator())
    .def("__gt__", [](Fmpz &a, int64_t b) {
        return a>b;
        }, py::is_operator())
    .def("__ge__", [](Fmpz &a, Fmpz b) {
        return a>=b;
        }, py::is_operator())
    .def("__ge__", [](Fmpz &a, int64_t b) {
        return a>=b;
        }, py::is_operator())
    .def("__abs__", [](Fmpz &a) {
        return a.abs();
        }, py::is_operator())
    .def("__neg__", [](Fmpz &a) {
        return -a;
        }, py::is_operator())
    .def("__repr__", [](Fmpz &a) {
        return repr(a);
        })
    .def("__pow__", [](Fmpz &a, uint64_t b) {
        return pow(a,b);
        }, py::is_operator())
    .def("addmul", [](Fmpz &a, Fmpz b, Fmpz c) {
        a.addmul(b,c);
        })
    .def("addmul", [](Fmpz &a, Fmpz b, int64_t c) {
        a.addmul(b,c);
        })
    .def("addmul", [](Fmpz &a, int64_t b, Fmpz c) {
        a.addmul(b,c);
        })
    .def("addmul", [](Fmpz &a, int64_t b, int64_t c) {
        a.addmul(b,c);
        })
    .def("submul", [](Fmpz &a, Fmpz b, Fmpz c) {
        a.submul(b,c);
        })
    .def("submul", [](Fmpz &a, Fmpz b, int64_t c) {
        a.submul(b,c);
        })
    .def("submul", [](Fmpz &a, int64_t b, Fmpz c) {
        a.submul(b,c);
        })
    .def("submul", [](Fmpz &a, int64_t b, int64_t c) {
        a.submul(b,c);
        })
  ;

    py::class_<Fmpq>(m, "Fmpq")
      .def(py::init<>())
      .def(py::init<string>())
      .def(py::init<int64_t>())
      .def(py::init<int64_t,int64_t>())
      .def(py::init<Fmpz>())
      .def(py::init<Fmpz,Fmpz>())
      .def(py::init<int64_t,Fmpz>())
      .def(py::init<Fmpz,int64_t>())
      .def("__add__", [](Fmpq &a, Fmpq b) {
          return a+b;
          }, py::is_operator())
      .def("__add__", [](Fmpq &a, int64_t b) {
          return a+b;
          }, py::is_operator())
      .def("__add__", [](Fmpq &a, Fmpz b) {
          return a+b;
          }, py::is_operator())
      .def("__sub__", [](Fmpq &a, Fmpq b) {
          return a-b;
          }, py::is_operator())
      .def("__sub__", [](Fmpq &a, int64_t b) {
          return a-b;
          }, py::is_operator())
      .def("__sub__", [](Fmpq &a, Fmpz b) {
          return a-b;
          }, py::is_operator())
      .def("__mul__", [](Fmpq &a, Fmpq b) {
          return a*b;
          }, py::is_operator())
      .def("__mul__", [](Fmpq &a, int64_t b) {
          return a*b;
          }, py::is_operator())
      .def("__mul__", [](Fmpq &a, Fmpz b) {
          return a*b;
          }, py::is_operator())
      .def("__truediv__", [](Fmpq &a, Fmpq b) {
          return a/b;
          }, py::is_operator())
      .def("__truediv__", [](Fmpq &a, int64_t b) {
          return a/b;
          }, py::is_operator())
      .def("__truediv__", [](Fmpq &a, Fmpz b) {
          return a/b;
          }, py::is_operator())
      .def("__rtruediv__", [](Fmpq &b, int64_t a) {
          return a/b;
          }, py::is_operator())
      .def("__eq__", [](Fmpq &a, Fmpq b) {
          return a==b;
          }, py::is_operator())
      .def("__eq__", [](Fmpq &a, int64_t b) {
          return a==b;
          }, py::is_operator())
      .def("__eq__", [](Fmpq& a, Fmpz& b) {
          return a==b;
          }, py::is_operator())
      .def("__ne__", [](Fmpq& a, Fmpq& b) {
          return a!=b;
          }, py::is_operator())
      .def("__ne__", [](Fmpq& a, int64_t& b) {
          return a!=b;
          }, py::is_operator())
      .def("__ne__", [](Fmpq &a, Fmpz b) {
          return a!=b;
          }, py::is_operator())
      .def("__le__", [](Fmpq &a, Fmpq b) {
          return a<=b;
          }, py::is_operator())
      .def("__le__", [](Fmpq &a, Fmpz b) {
          return a<=b;
          }, py::is_operator())
      .def("__le__", [](Fmpq &a, int64_t b) {
          return a<=b;
          }, py::is_operator())
      .def("__lt__", [](Fmpq &a, Fmpq b) {
          return a<b;
          }, py::is_operator())
      .def("__lt__", [](Fmpq &a, Fmpz b) {
          return a<b;
          }, py::is_operator())
      .def("__lt__", [](Fmpq &a, int64_t b) {
          return a<b;
          }, py::is_operator())
      .def("__gt__", [](Fmpq &a, Fmpq b) {
          return a>b;
          }, py::is_operator())
      .def("__gt__", [](Fmpq &a, Fmpz b) {
          return a>b;
          }, py::is_operator())
      .def("__gt__", [](Fmpq &a, int64_t b) {
          return a>b;
          }, py::is_operator())
      .def("__ge__", [](Fmpq &a, Fmpq b) {
          return a>=b;
          }, py::is_operator())
      .def("__ge__", [](Fmpq &a, Fmpz b) {
          return a>=b;
          }, py::is_operator())
      .def("__ge__", [](Fmpq &a, int64_t b) {
          return a>=b;
          }, py::is_operator())
      .def("__abs__", [](Fmpq &a) {
          return a.abs();
          }, py::is_operator())
      .def("__neg__", [](Fmpq &a) {
          return -a;
          }, py::is_operator())
      .def("__repr__", [](Fmpq &a) {
          return repr(a);
          })
      .def("__pow__", [](Fmpq &a, int64_t b) {
          return pow(a,b);
          }, py::is_operator())
      .def("numerator", &Fmpq::numerator)
      .def("denominator", &Fmpq::denominator)
      .def("fraction", &Fmpq::fraction)
      .def("addmul", [](Fmpq &a, Fmpq b, Fmpq c) {
          a.addmul(b,c);
          })
      .def("addmul", [](Fmpq &a, Fmpq b, Fmpz c) {
          a.addmul(b,c);
          })
      .def("addmul", [](Fmpq &a, Fmpz b, Fmpq c) {
          a.addmul(b,c);
          })
      .def("addmul", [](Fmpq &a, Fmpz b, Fmpz c) {
          a.addmul(b,c);
          })
      .def("addmul", [](Fmpq &a, Fmpq b, int64_t c) {
          a.addmul(b,c);
          })
      .def("addmul", [](Fmpq &a, int64_t b, Fmpq c) {
          a.addmul(b,c);
          })
      .def("addmul", [](Fmpq &a, int64_t b, int64_t c) {
          a.addmul(b,c);
          })
      .def("addmul", [](Fmpq &a, Fmpz b, int64_t c) {
          a.addmul(b,c);
          })
      .def("addmul", [](Fmpq &a, int64_t b, Fmpz c) {
          a.addmul(b,c);
          })
      .def("submul", [](Fmpq &a, Fmpq b, Fmpq c) {
          a.submul(b,c);
          })
      .def("submul", [](Fmpq &a, Fmpq b, Fmpz c) {
          a.submul(b,c);
          })
      .def("submul", [](Fmpq &a, Fmpz b, Fmpq c) {
          a.submul(b,c);
          })
      .def("submul", [](Fmpq &a, Fmpz b, Fmpz c) {
          a.submul(b,c);
          })
      .def("submul", [](Fmpq &a, Fmpq b, int64_t c) {
          a.submul(b,c);
          })
      .def("submul", [](Fmpq &a, int64_t b, Fmpq c) {
          a.submul(b,c);
          })
      .def("submul", [](Fmpq &a, int64_t b, int64_t c) {
          a.submul(b,c);
          })
      .def("submul", [](Fmpq &a, Fmpz b, int64_t c) {
          a.submul(b,c);
          })
      .def("submul", [](Fmpq &a, int64_t b, Fmpz c) {
          a.submul(b,c);
          })
      ;

      py::class_<FmpzMat>(m, "FmpzMat")
        .def(py::init<int,int>())
        .def(py::init<vector<vector<Fmpz>>>())
        .def(py::init<vector<vector<int64_t>>>())
        .def(py::init<vector<vector<string>>>())
        .def("__add__", [](FmpzMat &a, FmpzMat b) {
            return a+b;
            }, py::is_operator())
        .def("__sub__", [](FmpzMat &a, FmpzMat b) {
            return a-b;
            }, py::is_operator())
        .def("__mul__", [](FmpzMat &a, FmpzMat b) {
            return a*b;
            }, py::is_operator())
        .def("__mul__", [](FmpzMat &a, Fmpz b) {
            return a*b;
            }, py::is_operator())
        .def("__mul__", [](FmpzMat &a, int64_t b) {
            return a*b;
            }, py::is_operator())
        .def("__rmul__", [](FmpzMat &a, Fmpz b) {
            return a*b;
            }, py::is_operator())
        .def("__rmul__", [](FmpzMat &a, int64_t b) {
            return a*b;
            }, py::is_operator())
        .def("__truediv__", [](FmpzMat &a, Fmpz b) {
            return a/b;
            }, py::is_operator())
        .def("__truediv__", [](FmpzMat &a, int64_t b) {
            return a/b;
            }, py::is_operator())
        .def("__neg__", [](FmpzMat &a) {
            return -a;
            }, py::is_operator())
        .def("__eq__", [](FmpzMat& a, FmpzMat& b) {
            return a==b;
            }, py::is_operator())
        .def("__eq__", [](FmpzMat& a, Fmpz& b) {
            return a==b;
            }, py::is_operator())
        .def("__eq__", [](FmpzMat& a, int64_t& b) {
            return a==b;
            }, py::is_operator())
        .def("__getitem__", [](FmpzMat& a, tuple<int,int> b) {
            return a[b];
            }, py::is_operator())
        .def("nrows", &FmpzMat::nrows)
        .def("ncols", &FmpzMat::ncols)
        .def("__repr__", [](FmpzMat &a) {
            return repr(a);
            })
        .def("addmul", [](FmpzMat &a, int64_t b, FmpzMat c) {
            a.addmul(b,c);
            })
        .def("addmul", [](FmpzMat &a, Fmpz b, FmpzMat c) {
            a.addmul(b,c);
            })
        .def("addmul", [](FmpzMat &a, FmpzMat b, int64_t c) {
            a.addmul(b,c);
            })
        .def("addmul", [](FmpzMat &a, FmpzMat b, Fmpz c) {
            a.addmul(b,c);
            })
        .def("transpose", &FmpzMat::det)
        .def("transpose", &FmpzMat::transpose)
        .def("transpose_inplace", &FmpzMat::transpose_inplace)
        .def("strong_echelon_form", [](FmpzMat &a, Fmpz b) {
            return a.strong_echelon_form(b);
            })
        .def("strong_echelon_form", [](FmpzMat &a, int64_t b) {
            return a.strong_echelon_form(b);
            })
        .def("strong_echelon_form_inplace", [](FmpzMat &a, Fmpz b) {
            a.strong_echelon_form_inplace(b);
            })
        .def("strong_echelon_form_inplace", [](FmpzMat &a, int64_t b) {
            a.strong_echelon_form_inplace(b);
            })
        .def("swap_rows", [](FmpzMat& a, int& i, int& j) {
            a.swap_rows(i,j);
            })
        .def("add_a_times_row_b_to_row_c", [](FmpzMat& self, Fmpz& a, int& b, int& c){
            self.add_a_times_row_b_to_row_c(a,b,c);
            })
        ;

        py::class_<FmpqMat>(m, "FmpqMat")
          .def(py::init<int,int>())
          .def(py::init<FmpzMat>())
          .def(py::init<vector<vector<Fmpq>>>())
          .def(py::init<vector<vector<Fmpz>>>())
          .def(py::init<vector<vector<int64_t>>>())
          .def(py::init<vector<vector<string>>>())
          .def("__add__", [](FmpqMat &a, FmpqMat b) {
              return a+b;
              }, py::is_operator())
        .def("__add__", [](FmpqMat &a, FmpzMat b) {
            return a+b;
            }, py::is_operator())
        .def("__sub__", [](FmpqMat &a, FmpqMat b) {
            return a-b;
            }, py::is_operator())
        .def("__sub__", [](FmpqMat &a, FmpzMat b) {
            return a-b;
            }, py::is_operator())
        .def("__mul__", [](FmpqMat &a, FmpqMat b) {
            return a*b;
            }, py::is_operator())
        .def("__mul__", [](FmpqMat &a, FmpzMat b) {
            return a*b;
            }, py::is_operator())
        .def("__mul__", [](FmpqMat &a, Fmpq b) {
            return a*b;
            }, py::is_operator())
        .def("__mul__", [](FmpqMat &a, Fmpz b) {
            return a*b;
            }, py::is_operator())
        .def("__mul__", [](FmpqMat &a, int64_t b) {
            return a*b;
            }, py::is_operator())
        .def("__rmul__", [](FmpqMat &a, FmpzMat b) {
            return b*a;
            }, py::is_operator())
        .def("__rmul__", [](FmpqMat &a, Fmpq b) {
            return a*b;
            }, py::is_operator())
        .def("__rmul__", [](FmpqMat &a, Fmpz b) {
            return a*b;
            }, py::is_operator())
        .def("__rmul__", [](FmpqMat &a, int64_t b) {
            return a*b;
            }, py::is_operator())
        .def("__truediv__", [](FmpqMat &a, Fmpq b) {
            return a/b;
            }, py::is_operator())
        .def("__truediv__", [](FmpqMat &a, Fmpz b) {
            return a/b;
            }, py::is_operator())
        .def("__truediv__", [](FmpqMat &a, int64_t b) {
            return a/b;
            }, py::is_operator())
        .def("__neg__", [](FmpqMat &a) {
            return -a;
            }, py::is_operator())
        .def("__eq__", [](FmpqMat& a, FmpqMat& b) {
            return a==b;
            }, py::is_operator())
        .def("__eq__", [](FmpqMat& a, Fmpq& b) {
            return a==b;
            }, py::is_operator())
        .def("__eq__", [](FmpqMat& a, int64_t& b) {
            return a==b;
            }, py::is_operator())
        .def("__getitem__", [](FmpqMat& a, tuple<int,int> b) {
            return a[b];
            }, py::is_operator())
        .def("nrows", &FmpqMat::nrows)
          .def("ncols", &FmpqMat::ncols)
          .def("__repr__", [](FmpqMat &a) {
              return repr(a);
              })
        .def("transpose", &FmpqMat::det)
          .def("transpose", &FmpqMat::transpose)
          .def("transpose_inplace", &FmpqMat::transpose_inplace)
        .def("swap_rows", [](FmpqMat& a, int& i, int& j) {
            a.swap_rows(i,j);
            })
        .def("add_a_times_row_b_to_row_c", [](FmpqMat& self, Fmpq& a, int& b, int& c){
            self.add_a_times_row_b_to_row_c(a,b,c);
            })
        ;

    m.def("block_matrix", &block_matrix, "create FmpzMat block matrix");
    m.def("zero_matrix", &zero_matrix, "zero matrix");
    m.def("identity_matrix", &identity_matrix, "n-dim identity matrix");
}
