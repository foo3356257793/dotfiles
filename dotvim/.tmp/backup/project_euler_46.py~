#!/usr/bin/python

# What is the smallest odd composite that cannot be written as the sum of a
# prime and twice a square

# strategy: sieve to find primes
# for each prime, sieve out 2*sq

prime_lim = 10000

is_prime_2k_plus_1 = [1] * (prime_lim >> 1)
is_prime_2k_plus_1[0] = 0
primes = []

is_decomp_2k_plus_1 = [0] * (prime_lim >> 1)
is_decomp_2k_plus_1[0] = 1

(((

# find odd primes
for p in range(3, prime_lim, 2):
# check if p is a prime
  if is_prime_2k_plus_1[(p) >> 1]:
    primes.append(p)
    mult_red = (3*p >> 1)
    while mult_red < (prime_lim >> 1):
      is_prime_2k_plus_1[mult_red] = 0
      mult_red = mult_red + p
    j = 0
    decomp = p + 2*(j * j)
    while decomp < prime_lim:
      is_decomp_2k_plus_1[(decomp) >> 1] = 1
      j = j + 1
      decomp = p + 2*(j * j)
# if not prime, check if not decomposable
  elif is_decomp_2k_plus_1[(p)>>1] == 0:
# if not decomposable, we are done
    print(p)
    break

#print(primes)
