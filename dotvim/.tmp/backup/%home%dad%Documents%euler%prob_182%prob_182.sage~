#!/usr/bin/sage

import itertools

if __name__ == "__main__":

    #
    # Unconcealed: m^e mod n = m
    # e log(m) = log(m) mod \phi
    #
    # We are minimal when e = 1 mod (p-1)
    #                     e = 1 mod (q-1)
    #                  => e = 1 mod lcm(p-1,q-1)

    p = 1009
    q = 3643

    #M = lcm(p-1,q-1)

    phi = (p-1)*(q-1)

    """
    S = 0

    for e in range(2,phi):

        # if e % 1000 == 0:
        #     print(e)

        if gcd(e, phi) == 1 and gcd(e-1,phi) == 2:
            S += e

    print(S)
    """

    poss_vals = []
    primes = []

    for tup in factor(phi):

        p = tup[0]

        if p <= 1:
            continue

        if p == 2:

            poss_vals.append([3])
            primes.append(4)

        else:

            poss_vals.append([i for i in range(2,p)])
            primes.append(p)

    crt_vals = poss_vals[0]
    P = primes[0]

    for i in range(1,len(primes)):

        new_crt_vals = []

        p = primes[i]

        for a, b in itertools.product(crt_vals, poss_vals[i]):

            new_crt_vals.append(crt([a,b],[P,p]))

        crt_vals = new_crt_vals

        P *= p

    sum_crt_vals = sum(crt_vals)

    num_multiples = phi / P

    ret = num_multiples * sum_crt_vals + P * len(crt_vals) * (1/2) * num_multiples * (num_multiples-1)

    print(ret)

    """

    dbg = 0

    for e in range(2,phi):

        if e % 10000 == 0:
            print("...%d" % e)

        if (e % P) in crt_vals:

            dbg += e

    print(dbg)
    """
