#!/usr/bin/sage

def s(n):

    r = n
    digit_str = ''
    while r >= 10:
        digit_str = '9' + digit_str
        r -= 9
    digit_str = '%d' % r + digit_str

    return int(digit_str)

M = 1000000007

def _s(n):

    f = n // 9
    r = n % 9

    return (power_mod(10,f,M) * (1+r) - 1) % M


def S(n):

    ret = 0
    while n % 9 != 0:
        ret += _s(n)
        n -= 1

    # if n % 9 != 0:
    #     return 0

    f = n//9

    #ret += 54 * ((10^f - 1)//9) - 9 * f

    ret += 54 * (power_mod(10,f,M) - 1) * inverse_mod(9,M) - 9 * f
    ret %= M

    return ret

if __name__ == "__main__":

    #print(sum([s(i) for i in range(1,21)]))

    l = 0
    for i in range(20):
        l += s(i)
        #if i % 9 == 0:
        print(s(i), _s(i), S(i), l, S(i) == l)

    """
    ans = 0
    for i in range(2,91):
        print(i)
        ans += S(fibonacci(i))
        ans %= M

    print(ans)
    """
