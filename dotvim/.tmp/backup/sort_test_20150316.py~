#!/usr/bin/python3

from random import *
from math import sqrt, log

seed()

N = 1 << 8

list = [None] * N

N = (1 << 5)
window = 4
bits = 16
# need buckets to divide N
buckets = 16
stripes = 16
a = [None] * (N)
b = [None] * (buckets*N*stripes)
c = [None] * (N+window)

for tile in range(0,buckets):
  for i in range(0,stripes):
    for j in range(0,N):
      a[j] = randint(0,(1<<bits)-1)
    a.sort()
    for j in range(0,N):
      new_tile = j // (N//buckets)
      row_offset = tile + (j % (N//buckets))*buckets
      b[new_tile*N*stripes + stripes*row_offset + i] = a[j]

# for tile in range(0,16):
#   for strip in range(0,16):
#     for j in range(0,N):
#       a[j] = b[tile*N + 16*j + strip]
#     a.sort()
#     for j in range(0,N):
#       b[tile*N + 16*j + strip] = a[j]

# use a windowed approach with half tiles
for subtile in range(0,4*buckets-3):
    buckets*N))
  for i in range(0,stripes):
    for j in range(0,N):
      a[j] = b[subtile*(N//4)*stripes + stripes*j + i]
    a.sort()
    for j in range(0,N):
      b[subtile*(N//4)*stripes + stripes*j + i] = a[j]

# for offset in range(0,N*16*16-(N*8),N*8):
#   for strip in range(0,16):
#     for j in range(0,N):
#       a[j] = b[offset + 16*j + strip]
#     a.sort()
#     for j in range(0,N):
#       print("%4X" % a[j], end=" ")
#     print("")
#     for j in range(0,N):
#       b[offset + 16*j + strip] = a[j]
# 
# for i in range(0,N*16):
#   for j in range(0,16):
#     print("%4X" % b[16*i+j], end=" ")
#   print("")
#   if((i+1) % N == 0):
#     print("")

for i in range(0,N*16):
  for j in range(0,16):
    print("%4X" % b[16*i+j], end=" ")
  print("")
  if((i+1) % N == 0):
    print("")

