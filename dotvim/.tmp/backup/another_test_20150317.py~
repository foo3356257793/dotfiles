#!/usr/bin/python3

from random import *

seed()

key_size = 16
max_key = (1<<key_size)-1

def sort_tile(a, length):
  for lane in range(0,16):
    tmp = a[lane:16*length:16]
    tmp.sort()
    a[lane:16*length:16] = tmp
  return a

def split_vec(a, r, radix_mask, shift):
  result = [0] * 16
  num_valid = 0
  for j in range(0,16):
    if ((a[j] >> shift) & radix_mask) == r:
      result[j] = a[j]
      num_valid += 1
  return result, num_valid

def print_tile(a,length):
  if length <= 0:
    return
  for i in range(0,length):
    for j in range(0,16):
      print("%4X" % a[16*i+j], end=" ")
    print("")

def is_zero_row(a):
  for j in range(0,16):
    if a[j] != 0:
      return False
  return True

def pop_row(a):
  for j in range(0,16):
    a.pop(0)

num_vecs = 16
N = 16*num_vecs

a = [None] * N

for i in range(0,N):
  a[i] = randint(0,max_key)

#a = sort_tile(a,num_vecs)
print_tile(a,num_vecs)
print("")

log_buckets = 1
num_buckets = 1<<log_buckets

buckets = [None] * num_buckets
for j in range(0,num_buckets):
  buckets[j] = []
bucket_lengths = [0] * num_buckets

num_split_vecs = 0
for i in range(0, num_vecs):
  for j in range(0,num_buckets):
    vec, num_valid = split_vec(a[16*i:16*(i+1)],j,num_buckets-1,key_size-log_buckets)
    if num_valid > 0:
      buckets[j].extend(vec)
      bucket_lengths[j] += 1
      num_split_vecs += 1

print("num_split_vecs = %d (inflation of %f)" % (num_split_vecs,
    num_split_vecs/num_vecs) )

for i in range(0,num_buckets):
  sort_tile(buckets[i], bucket_lengths[i])
  zero_row = True
  while zero_row and bucket_lengths[i] > 0:
    zero_row = is_zero_row(buckets[i])
    if zero_row:
      pop_row(buckets[i])
      bucket_lengths[i] -= 1

print_tile(buckets[0],bucket_lengths[0])
print("")
print_tile(buckets[1],bucket_lengths[1])

num_split_vecs = bucket_lengths[0] + bucket_lengths[1]
print("num_split_vecs = %d (inflation of %f)" % (num_split_vecs,
  num_split_vecs/num_vecs))

# next round
