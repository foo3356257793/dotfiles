// from github SugarPP

#pragma once

#include <tuple>

template<typename Iterator, typename CounterType = size_t>
class EnumerateIterator
{
    Iterator iter;
    CounterType index;
public:
    EnumerateIterator(Iterator iter, CounterType index) :iter(std::move(iter)), index(index) {}
    EnumerateIterator& operator++()
    {
        ++iter;
        ++index;
        return *this;
    }
    auto operator*()
    {
        return std::forward_as_tuple(index, *iter);
    }
    bool operator!=(EnumerateIterator const& rhs) const
    {
        return iter != rhs.iter;
    }
};

template<typename Iterable, typename CounterType = size_t>
class Enumerate
{
    Iterable& iterable;
    CounterType index;
public:
    Enumerate(Iterable& iterable, CounterType start = 0) :iterable(iterable), index(start) {}
    auto begin() { return EnumerateIterator{ std::begin(iterable), index }; }

    auto end() { return EnumerateIterator{ std::end(iterable), index }; }
};
