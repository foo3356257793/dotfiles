#pragma once

#include <algorithm>
#include <iostream>
#include <memory>
#include <numeric>
#include <tuple>
#include <vector>
#include <iomanip>

using namespace std;

#include <fmt/core.h>
#include <fmt/ostream.h>

using fmt::print;

// flint
#include <flint/flint.h>
#include <flint/fmpz.h>

#include <functional>

// TODO: what are the correct C++ keywords to put on each kind of input?
//
// factoring
// factorization class

class ZZ
{
  public:
    fmpz_t number;

    ZZ();
    ZZ(const int64_t& in_number);
    ZZ(const fmpz_t& in_number);
    ZZ(const string in_string);

    ZZ(const ZZ &other); // copy constructor
    ZZ(ZZ&& other) noexcept; // move constructor
    ZZ& operator=(const ZZ &other); // copy assignment
    ZZ& operator=(ZZ &&other) noexcept; // move assignment
    ~ZZ(); // destructor

    ZZ& apply_fmpz_fun_eq( const ZZ& rhs,
      function<void(fmpz_t,fmpz_t,const fmpz_t)> fun);

    ZZ apply_fmpz_fun(const ZZ& rhs,
        function<void(fmpz_t,const fmpz_t,const fmpz_t)> fun) const;

    ZZ apply_fmpz_fun(function<void(fmpz_t,const fmpz_t)> fun) const;

    // addition
    ZZ& operator+=(const ZZ& rhs);
    ZZ operator+(const ZZ &rhs) const;

    // subtraction
    ZZ& operator-=(const ZZ &rhs);
    ZZ operator-(const ZZ &rhs) const;
    ZZ operator-() const;

    // multiplication
    ZZ& operator*=(const ZZ &rhs);
    ZZ operator*(const ZZ &rhs) const;

    void addmul(const ZZ &in0, const ZZ &in1);
    void submul(const ZZ &in0, const ZZ &in1);

    // division
    ZZ& operator%=(const ZZ &rhs);
    ZZ operator%(const ZZ &rhs) const;

    ZZ& operator/=(const ZZ &rhs);
    ZZ operator/(const ZZ &rhs) const;

    bool is_divisible_by(const ZZ& poss_factor) const;

    bool operator==(const ZZ &rhs) const;
    bool operator!=(const ZZ &rhs) const;
    bool operator>(const ZZ &rhs) const;
    bool operator>=(const ZZ &rhs) const;
    bool operator<(const ZZ &rhs) const;
    bool operator<=(const ZZ &rhs) const;
};

ostream& operator<<(ostream& os, const ZZ& f);

ZZ pow(ZZ base, int64_t exponent);
ZZ abs(const ZZ& in);
bool is_prime(const ZZ& in);
