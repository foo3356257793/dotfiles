int nrows() const { return data->r; }
int ncols() const { return data->c; }

bool is_square() const;

_QQ_mat &translate(const std::function<void(fmpq_mat_t)> &fun);

_QQ_mat &translate(const std::function<void(fmpq_mat_t,fmpq_mat_t)> &fun);

_QQ_mat &operator-();

_QQ_mat &inverse_eq();

_QQ_mat &resize(int rows, int cols);

QQ_vec_ptr operator[](const slong col);
const QQ_vec_ptr operator[](const slong col) const;

template <typename T>
_QQ_mat &operator=(const std::vector<std::vector<T>> &in) {
  size_t rows = in.size();
  size_t cols;
  if (rows == 0) {
    cols = 0;
  } else {
    cols = in[0].size();
  }
  for (size_t row = 0; row < rows; row++) {
    if (in[row].size() != cols) {
      throw std::invalid_argument("list of vectors not a matrix!");
    }
    for (size_t col = 0; col < cols; col++) {
      (*this)[row][col] = in[row][col];
    }
  }
  return *this;
}

template <typename T>
explicit operator std::vector<std::vector<T>>() const {
  auto out = std::vector<std::vector<T>>();

  for(int row=0; row<nrows(); row++){
    auto rowvec = std::vector<T>();
    for(int col=0; col<ncols(); col++){
      rowvec.push_back(static_cast<T>((*this)[row][col]));
    }
    out.push_back(rowvec);
  }
  return out;
}

#include "QQ_mat_struct_QQ_mat.hpp"
#include "QQ_mat_struct_QQ.hpp"
#include "QQ_mat_struct_UI.hpp"
#include "QQ_mat_struct_SI.hpp"

