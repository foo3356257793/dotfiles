#!/usr/bin/sage

A = RR((1+sqrt(5))/2)
B = RR((1-sqrt(5))/2)

BOUND = 10**(1000-1)

def fib_n(n): # pylint: disable=invalid-name
    """
    Return the n-th element of the Fibonacci sequence.
    """

    f_n = (A^n - B^n) / (A-B)

    f_n = ZZ(round(f_n))

    return f_n

def binary_search(min_val, max_val, test):
    """
    Binary search for smallest value where 'test' is True.

    Args:
        min_val: minimum value to consider
        max_val: maximum value to consider
        test: input function; assume if test(a) is True, then test(b) is True
            for b>a.

    Returns:
        The smallest value 'a' such that test(a) is True.
    """

    if max_val == min_val:

        return min_val

    if max_val == min_val + 1:

        if test(min_val):
            return min_val
        return max_val

    mid_val = (max_val+min_val) // 2

    if test(mid_val):
        return binary_search(min_val, mid_val, test)
    return binary_search(mid_val+1, max_val, test)


if __name__ == "__main__":

    index = 100

    while fib_n(index) < BOUND:

        index *= 2

    index_opt = binary_search(index//2, index, lambda x: fib_n(x) >= BOUND)

    print("solution is %d" % index_opt)
