#!/usr/bin/sage

import itertools

import time

def _count_polys_with_roots(rts, lb_k):

    num_rts = len(rts)

    table_dicts = []
    col_dict = {}
    for i in range(10):

        vals = [i] * num_rts

        good = True
        for j in range(num_rts):
            if vals[j] % rts[j] != 0:
                good = False
                break
            else:
                vals[j] //= rts[j]

        if good:
            col_dict[str(vals)] = 1

    table_dicts.append(col_dict)

    for i in range(1,lb_k):

        last_dict = table_dicts[-1]
        col_dict = {}

        for key in last_dict.keys():

            vals = key[1:-1].split(',')
            vals = [int(v) for v in vals]

            for j in range(10):

                new_vals = []

                for k in range(num_rts):

                    new_val = vals[k] + ((-1)**i) * j

                    if new_val % rts[k] != 0:
                        break

                    new_val //= rts[k]
                    new_vals.append(new_val)

                if len(new_vals) == num_rts:

                    new_key = str(new_vals)

                    if not new_key in col_dict:

                        col_dict[new_key] = last_dict[key]

                    else:

                        col_dict[new_key] += last_dict[key]

        table_dicts.append(col_dict)

    zero_str = str([0] * num_rts)

    ans = table_dicts[-1][zero_str]

    return ans

def count_polys_with_roots(rts, lb_k):

    if len(rts) == 0:
        # all polys (don't count all zero)
        return 10**lb_k - 1

    if 0 in rts:
        recursive_rts = [r for r in rts if r != 0]

        # factor out x and look for other roots on degree-1 polys
        return count_polys_with_roots(recursive_rts, lb_k-1)

    ret =  _count_polys_with_roots(rts, lb_k)

    # don't count all zero
    return ret-1

if __name__ == "__main__":

    #lb_k = 2 # 32
    #lb_k = 3 # 171
    #lb_k = 4 # 1753
    #lb_k = 5 # 14695

    lb_k = 16

    num_polys = 0

    for i in range(1, min(lb_k, 10)+1):

        for tup in itertools.combinations(range(0,10), i):

            ret = count_polys_with_roots(tup, lb_k)

            num_polys += ((-1) ** (i+1)) * ret

    num_polys += 1 # count 10**lb_k, which has a root

    print('result: %d' % num_polys)
