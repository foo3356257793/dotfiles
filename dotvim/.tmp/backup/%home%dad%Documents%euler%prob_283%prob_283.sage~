#!/usr/bin/sage

def binary_search(min_val, max_val, test):

    if max_val == min_val:

        return min_val

    if max_val == min_val + 1:

        if test(min_val):
            return min_val
        else:
            return max_val

    mid_val = (max_val+min_val) // 2

    if test(mid_val):

        return binary_search(min_val, mid_val, test)

    else:

        return binary_search(mid_val+1, max_val, test)

def area_sq_triangle_times_16(a,b,c):

    return (a+b+c)*(a+b-c)*(a-b+c)*(-a+b+c)

def find_triangles_for_ratio(m):

    div_m = divisors(2*m)

    solutions = []

    for u in div_m:

        v_bd = floor(sqrt(3) * u)

        for v in range(1,v_bd+1):

            if gcd(u,v) > 1:
                continue

            big_val = 4*m^2 * (u^2 + v^2)

            #print([u,v])
            #print("  big_val = %d" % big_val)

            div_big_val = divisors(big_val)

            delta_1_u_bd = floor(2*m*sqrt(u^2+v^2))

            delta_1_l_bd = 1
            if u < v:
                delta_1_l_bd = ((2*m)//u) * (v*v - u*u)


            for delta_1 in div_big_val:

                if delta_1 < delta_1_l_bd:
                    continue

                if delta_1 > delta_1_u_bd:
                    break

                a_num = (delta_1 + 2*m*u)

                if a_num % v != 0:
                    continue

                a_num //= v

                delta_2 = big_val // delta_1

                b_num = delta_2 + 2*m*u

                if b_num % v != 0:
                    continue

                b_num //= v

                a = a_num + (v)*((2*m)//u)
                b = b_num + (v)*((2*m)//u)
                c = a_num + b_num

                sol = [a,b,c]

                sol.sort()

                # print('    ', [delta_1,delta_2])
                # print('      ', sol)

                if not sol in solutions:
                    solutions.append([a,b,c])

    return solutions

if __name__ == "__main__":

    # example: m=2, as in the paper

    # example: ratio 1 (equable triangles)

    triangles = find_triangles_for_ratio(1)

    print(triangles)

    S = 0

    m_bd = 100

    for m in range(1,m_bd+1):

        print(m)

        triangles = find_triangles_for_ratio(m)

        for tup in triangles:

            # perimeter
            S += sum(tup)

    print(S)
