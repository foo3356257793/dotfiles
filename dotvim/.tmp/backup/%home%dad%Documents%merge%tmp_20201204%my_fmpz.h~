# 1 "my_fmpz_pre.h"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "my_fmpz_pre.h"
# 9 "my_fmpz_pre.h"
# 1 "/usr/include/flint/fmpz.h" 1 3 4
# 23 "/usr/include/flint/fmpz.h" 3 4
# 1 "/usr/include/stdlib.h" 1 3 4
# 25 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 33 "/usr/include/bits/libc-header-start.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 465 "/usr/include/features.h" 3 4
# 1 "/usr/include/sys/cdefs.h" 1 3 4
# 449 "/usr/include/sys/cdefs.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 450 "/usr/include/sys/cdefs.h" 2 3 4
# 1 "/usr/include/bits/long-double.h" 1 3 4
# 451 "/usr/include/sys/cdefs.h" 2 3 4
# 466 "/usr/include/features.h" 2 3 4
# 489 "/usr/include/features.h" 3 4
# 1 "/usr/include/gnu/stubs.h" 1 3 4
# 10 "/usr/include/gnu/stubs.h" 3 4
# 1 "/usr/include/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/gnu/stubs.h" 2 3 4
# 490 "/usr/include/features.h" 2 3 4
# 34 "/usr/include/bits/libc-header-start.h" 2 3 4
# 26 "/usr/include/stdlib.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-redhat-linux/10/include/stddef.h" 1 3 4
# 209 "/usr/lib/gcc/x86_64-redhat-linux/10/include/stddef.h" 3 4

# 209 "/usr/lib/gcc/x86_64-redhat-linux/10/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 321 "/usr/lib/gcc/x86_64-redhat-linux/10/include/stddef.h" 3 4
typedef int wchar_t;
# 32 "/usr/include/stdlib.h" 2 3 4


# 55 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/bits/floatn.h" 1 3 4
# 119 "/usr/include/bits/floatn.h" 3 4
# 1 "/usr/include/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/bits/floatn-common.h" 3 4
# 1 "/usr/include/bits/long-double.h" 1 3 4
# 25 "/usr/include/bits/floatn-common.h" 2 3 4
# 120 "/usr/include/bits/floatn.h" 2 3 4
# 56 "/usr/include/stdlib.h" 2 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





 typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 97 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) ;



extern double atof (const char *__nptr)
     ;

extern int atoi (const char *__nptr)
     ;

extern long int atol (const char *__nptr)
     ;



 extern long long int atoll (const char *__nptr)
     ;



extern double strtod (const char * __nptr,
        char ** __endptr)
     ;



extern float strtof (const char * __nptr,
       char ** __endptr) ;

extern long double strtold (const char * __nptr,
       char ** __endptr)
     ;
# 176 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char * __nptr,
   char ** __endptr, int __base)
     ;

extern unsigned long int strtoul (const char * __nptr,
      char ** __endptr, int __base)
     ;
# 199 "/usr/include/stdlib.h" 3 4

extern long long int strtoll (const char * __nptr,
         char ** __endptr, int __base)
     ;


extern unsigned long long int strtoull (const char * __nptr,
     char ** __endptr, int __base)
     ;
# 453 "/usr/include/stdlib.h" 3 4
extern int rand (void) ;

extern void srand (unsigned int __seed) ;
# 539 "/usr/include/stdlib.h" 3 4
extern void *malloc (size_t __size)
     ;

extern void *calloc (size_t __nmemb, size_t __size)
     ;






extern void *realloc (void *__ptr, size_t __size)
     ;
# 565 "/usr/include/stdlib.h" 3 4
extern void free (void *__ptr) ;
# 591 "/usr/include/stdlib.h" 3 4
extern void abort (void) ;



extern int atexit (void (*__func) (void)) ;
# 617 "/usr/include/stdlib.h" 3 4
extern void exit (int __status) ;
# 629 "/usr/include/stdlib.h" 3 4
extern void _Exit (int __status) ;




extern char *getenv (const char *__name) ;
# 784 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;
# 808 "/usr/include/stdlib.h" 3 4
typedef int (*__compar_fn_t) (const void *, const void *);
# 820 "/usr/include/stdlib.h" 3 4
extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) ;
# 840 "/usr/include/stdlib.h" 3 4
extern int abs (int __x) ;
extern long int labs (long int __x) ;


 extern long long int llabs (long long int __x)
     ;






extern div_t div (int __numer, int __denom)
     ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     ;


 extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     ;
# 922 "/usr/include/stdlib.h" 3 4
extern int mblen (const char *__s, size_t __n) ;


extern int mbtowc (wchar_t * __pwc,
     const char * __s, size_t __n) ;


extern int wctomb (char *__s, wchar_t __wchar) ;



extern size_t mbstowcs (wchar_t * __pwcs,
   const char * __s, size_t __n)
    ;

extern size_t wcstombs (char * __s,
   const wchar_t * __pwcs, size_t __n)
    
  ;
# 1014 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/bits/stdlib-float.h" 1 3 4
# 1015 "/usr/include/stdlib.h" 2 3 4
# 1026 "/usr/include/stdlib.h" 3 4

# 24 "/usr/include/flint/fmpz.h" 2 3 4
# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/stdio.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-redhat-linux/10/include/stddef.h" 1 3 4
# 34 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/lib/gcc/x86_64-redhat-linux/10/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-redhat-linux/10/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 37 "/usr/include/stdio.h" 2 3 4

# 1 "/usr/include/bits/types.h" 1 3 4
# 27 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 28 "/usr/include/bits/types.h" 2 3 4
# 1 "/usr/include/bits/timesize.h" 1 3 4
# 29 "/usr/include/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 141 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/typesizes.h" 1 3 4
# 142 "/usr/include/bits/types.h" 2 3 4
# 1 "/usr/include/bits/time64.h" 1 3 4
# 143 "/usr/include/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;
typedef long int __suseconds64_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 39 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/bits/types/__fpos_t.h" 1 3 4




# 1 "/usr/include/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 6 "/usr/include/bits/types/__fpos_t.h" 2 3 4




typedef struct _G_fpos_t
{
  __off_t __pos;
  __mbstate_t __state;
} __fpos_t;
# 40 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/bits/types/__fpos64_t.h" 1 3 4
# 10 "/usr/include/bits/types/__fpos64_t.h" 3 4
typedef struct _G_fpos64_t
{
  __off64_t __pos;
  __mbstate_t __state;
} __fpos64_t;
# 41 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 42 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 43 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/bits/types/struct_FILE.h" 1 3 4
# 35 "/usr/include/bits/types/struct_FILE.h" 3 4
struct _IO_FILE;
struct _IO_marker;
struct _IO_codecvt;
struct _IO_wide_data;




typedef void _IO_lock_t;





struct _IO_FILE
{
  int _flags;


  char *_IO_read_ptr;
  char *_IO_read_end;
  char *_IO_read_base;
  char *_IO_write_base;
  char *_IO_write_ptr;
  char *_IO_write_end;
  char *_IO_buf_base;
  char *_IO_buf_end;


  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;
  int _flags2;
  __off_t _old_offset;


  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];

  _IO_lock_t *_lock;







  __off64_t _offset;

  struct _IO_codecvt *_codecvt;
  struct _IO_wide_data *_wide_data;
  struct _IO_FILE *_freeres_list;
  void *_freeres_buf;
  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];
};
# 44 "/usr/include/stdio.h" 2 3 4
# 84 "/usr/include/stdio.h" 3 4
typedef __fpos_t fpos_t;
# 133 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/bits/stdio_lim.h" 1 3 4
# 134 "/usr/include/stdio.h" 2 3 4



extern FILE *stdin;
extern FILE *stdout;
extern FILE *stderr;






extern int remove (const char *__filename) ;

extern int rename (const char *__old, const char *__new) ;
# 173 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile (void) ;
# 187 "/usr/include/stdio.h" 3 4
extern char *tmpnam (char *__s) ;
# 213 "/usr/include/stdio.h" 3 4
extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);
# 246 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char * __filename,
      const char * __modes) ;




extern FILE *freopen (const char * __filename,
        const char * __modes,
        FILE * __stream) ;
# 304 "/usr/include/stdio.h" 3 4
extern void setbuf (FILE * __stream, char * __buf) ;



extern int setvbuf (FILE * __stream, char * __buf,
      int __modes, size_t __n) ;
# 326 "/usr/include/stdio.h" 3 4
extern int fprintf (FILE * __stream,
      const char * __format, ...);




extern int printf (const char * __format, ...);

extern int sprintf (char * __s,
      const char * __format, ...) ;





extern int vfprintf (FILE * __s, const char * __format,
       __gnuc_va_list __arg);




extern int vprintf (const char * __format, __gnuc_va_list __arg);

extern int vsprintf (char * __s, const char * __format,
       __gnuc_va_list __arg) ;



extern int snprintf (char * __s, size_t __maxlen,
       const char * __format, ...)
     ;

extern int vsnprintf (char * __s, size_t __maxlen,
        const char * __format, __gnuc_va_list __arg)
     ;
# 391 "/usr/include/stdio.h" 3 4
extern int fscanf (FILE * __stream,
     const char * __format, ...) ;




extern int scanf (const char * __format, ...) ;

extern int sscanf (const char * __s,
     const char * __format, ...) ;
# 410 "/usr/include/stdio.h" 3 4
extern int fscanf (FILE * __stream, const char * __format, ...) __asm__ ("" "__isoc99_fscanf")

                               ;
extern int scanf (const char * __format, ...) __asm__ ("" "__isoc99_scanf")
                              ;
extern int sscanf (const char * __s, const char * __format, ...) __asm__ ("" "__isoc99_sscanf")

                      ;
# 435 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE * __s, const char * __format,
      __gnuc_va_list __arg)
     ;





extern int vscanf (const char * __format, __gnuc_va_list __arg)
     ;


extern int vsscanf (const char * __s,
      const char * __format, __gnuc_va_list __arg)
     ;





extern int vfscanf (FILE * __s, const char * __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     ;
extern int vscanf (const char * __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     ;
extern int vsscanf (const char * __s, const char * __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vsscanf")



     ;
# 489 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);
# 525 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 568 "/usr/include/stdio.h" 3 4
extern char *fgets (char * __s, int __n, FILE * __stream)
     ;
# 581 "/usr/include/stdio.h" 3 4
extern char *gets (char *__s) ;
# 631 "/usr/include/stdio.h" 3 4
extern int fputs (const char * __s, FILE * __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void * __ptr, size_t __size,
       size_t __n, FILE * __stream) ;




extern size_t fwrite (const void * __ptr, size_t __size,
        size_t __n, FILE * __s);
# 689 "/usr/include/stdio.h" 3 4
extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);
# 736 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE * __stream, fpos_t * __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 762 "/usr/include/stdio.h" 3 4
extern void clearerr (FILE *__stream) ;

extern int feof (FILE *__stream) ;

extern int ferror (FILE *__stream) ;
# 780 "/usr/include/stdio.h" 3 4
extern void perror (const char *__s);
# 857 "/usr/include/stdio.h" 3 4
extern int __uflow (FILE *);
extern int __overflow (FILE *, int);
# 874 "/usr/include/stdio.h" 3 4

# 25 "/usr/include/flint/fmpz.h" 2 3 4


# 1 "/usr/include/gmp.h" 1 3 4
# 59 "/usr/include/gmp.h" 3 4
# 1 "/usr/include/gmp-x86_64.h" 1 3 4
# 55 "/usr/include/gmp-x86_64.h" 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/10/include/stddef.h" 1 3 4
# 143 "/usr/lib/gcc/x86_64-redhat-linux/10/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 56 "/usr/include/gmp-x86_64.h" 2 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/10/include/limits.h" 1 3 4
# 34 "/usr/lib/gcc/x86_64-redhat-linux/10/include/limits.h" 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/10/include/syslimits.h" 1 3 4






# 1 "/usr/lib/gcc/x86_64-redhat-linux/10/include/limits.h" 1 3 4
# 195 "/usr/lib/gcc/x86_64-redhat-linux/10/include/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 26 "/usr/include/limits.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/limits.h" 2 3 4
# 196 "/usr/lib/gcc/x86_64-redhat-linux/10/include/limits.h" 2 3 4
# 8 "/usr/lib/gcc/x86_64-redhat-linux/10/include/syslimits.h" 2 3 4
# 35 "/usr/lib/gcc/x86_64-redhat-linux/10/include/limits.h" 2 3 4
# 57 "/usr/include/gmp-x86_64.h" 2 3 4
# 141 "/usr/include/gmp-x86_64.h" 3 4
typedef unsigned long int mp_limb_t;
typedef long int mp_limb_signed_t;


typedef unsigned long int mp_bitcnt_t;




typedef struct
{
  int _mp_alloc;

  int _mp_size;


  mp_limb_t *_mp_d;
} __mpz_struct;




typedef __mpz_struct MP_INT;
typedef __mpz_struct mpz_t[1];

typedef mp_limb_t * mp_ptr;
typedef const mp_limb_t * mp_srcptr;







typedef long int mp_size_t;
typedef long int mp_exp_t;


typedef struct
{
  __mpz_struct _mp_num;
  __mpz_struct _mp_den;
} __mpq_struct;

typedef __mpq_struct MP_RAT;
typedef __mpq_struct mpq_t[1];

typedef struct
{
  int _mp_prec;



  int _mp_size;


  mp_exp_t _mp_exp;
  mp_limb_t *_mp_d;
} __mpf_struct;


typedef __mpf_struct mpf_t[1];


typedef enum
{
  GMP_RAND_ALG_DEFAULT = 0,
  GMP_RAND_ALG_LC = GMP_RAND_ALG_DEFAULT
} gmp_randalg_t;


typedef struct
{
  mpz_t _mp_seed;
  gmp_randalg_t _mp_alg;
  union {
    void *_mp_lc;
  } _mp_algdata;
} __gmp_randstate_struct;
typedef __gmp_randstate_struct gmp_randstate_t[1];



typedef const __mpz_struct *mpz_srcptr;
typedef __mpz_struct *mpz_ptr;
typedef const __mpf_struct *mpf_srcptr;
typedef __mpf_struct *mpf_ptr;
typedef const __mpq_struct *mpq_srcptr;
typedef __mpq_struct *mpq_ptr;
# 477 "/usr/include/gmp-x86_64.h" 3 4
 void __gmp_set_memory_functions (void *(*) (size_t),
          void *(*) (void *, size_t, size_t),
          void (*) (void *, size_t)) ;


 void __gmp_get_memory_functions (void *(**) (size_t),
          void *(**) (void *, size_t, size_t),
          void (**) (void *, size_t)) ;


 extern const int __gmp_bits_per_limb;


 extern int __gmp_errno;


 extern const char * const __gmp_version;






 void __gmp_randinit (gmp_randstate_t, gmp_randalg_t, ...);


 void __gmp_randinit_default (gmp_randstate_t);


 void __gmp_randinit_lc_2exp (gmp_randstate_t, mpz_srcptr, unsigned long int, mp_bitcnt_t);


 int __gmp_randinit_lc_2exp_size (gmp_randstate_t, mp_bitcnt_t);


 void __gmp_randinit_mt (gmp_randstate_t);


 void __gmp_randinit_set (gmp_randstate_t, const __gmp_randstate_struct *);


 void __gmp_randseed (gmp_randstate_t, mpz_srcptr);


 void __gmp_randseed_ui (gmp_randstate_t, unsigned long int);


 void __gmp_randclear (gmp_randstate_t);


 unsigned long __gmp_urandomb_ui (gmp_randstate_t, unsigned long);


 unsigned long __gmp_urandomm_ui (gmp_randstate_t, unsigned long);





 int __gmp_asprintf (char **, const char *, ...);



 int __gmp_fprintf (FILE *, const char *, ...);
# 554 "/usr/include/gmp-x86_64.h" 3 4
 int __gmp_printf (const char *, ...);


 int __gmp_snprintf (char *, size_t, const char *, ...);


 int __gmp_sprintf (char *, const char *, ...);
# 592 "/usr/include/gmp-x86_64.h" 3 4
 int __gmp_fscanf (FILE *, const char *, ...);



 int __gmp_scanf (const char *, ...);


 int __gmp_sscanf (const char *, const char *, ...);
# 621 "/usr/include/gmp-x86_64.h" 3 4
 void *__gmpz_realloc (mpz_ptr, mp_size_t);



 void __gmpz_abs (mpz_ptr, mpz_srcptr);



 void __gmpz_add (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_add_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_addmul (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_addmul_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_and (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_array_init (mpz_ptr, mp_size_t, mp_size_t);


 void __gmpz_bin_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_bin_uiui (mpz_ptr, unsigned long int, unsigned long int);


 void __gmpz_cdiv_q (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_cdiv_q_2exp (mpz_ptr, mpz_srcptr, mp_bitcnt_t);


 unsigned long int __gmpz_cdiv_q_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_cdiv_qr (mpz_ptr, mpz_ptr, mpz_srcptr, mpz_srcptr);


 unsigned long int __gmpz_cdiv_qr_ui (mpz_ptr, mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_cdiv_r (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_cdiv_r_2exp (mpz_ptr, mpz_srcptr, mp_bitcnt_t);


 unsigned long int __gmpz_cdiv_r_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 unsigned long int __gmpz_cdiv_ui (mpz_srcptr, unsigned long int) ;


 void __gmpz_clear (mpz_ptr);


 void __gmpz_clears (mpz_ptr, ...);


 void __gmpz_clrbit (mpz_ptr, mp_bitcnt_t);


 int __gmpz_cmp (mpz_srcptr, mpz_srcptr) ;


 int __gmpz_cmp_d (mpz_srcptr, double) ;


 int __gmpz_cmp_si (mpz_srcptr, signed long int) ;


 int __gmpz_cmp_ui (mpz_srcptr, unsigned long int) ;


 int __gmpz_cmpabs (mpz_srcptr, mpz_srcptr) ;


 int __gmpz_cmpabs_d (mpz_srcptr, double) ;


 int __gmpz_cmpabs_ui (mpz_srcptr, unsigned long int) ;


 void __gmpz_com (mpz_ptr, mpz_srcptr);


 void __gmpz_combit (mpz_ptr, mp_bitcnt_t);


 int __gmpz_congruent_p (mpz_srcptr, mpz_srcptr, mpz_srcptr) ;


 int __gmpz_congruent_2exp_p (mpz_srcptr, mpz_srcptr, mp_bitcnt_t) ;


 int __gmpz_congruent_ui_p (mpz_srcptr, unsigned long, unsigned long) ;


 void __gmpz_divexact (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_divexact_ui (mpz_ptr, mpz_srcptr, unsigned long);


 int __gmpz_divisible_p (mpz_srcptr, mpz_srcptr) ;


 int __gmpz_divisible_ui_p (mpz_srcptr, unsigned long) ;


 int __gmpz_divisible_2exp_p (mpz_srcptr, mp_bitcnt_t) ;


 void __gmpz_dump (mpz_srcptr);


 void *__gmpz_export (void *, size_t *, int, size_t, int, size_t, mpz_srcptr);


 void __gmpz_fac_ui (mpz_ptr, unsigned long int);


 void __gmpz_2fac_ui (mpz_ptr, unsigned long int);


 void __gmpz_mfac_uiui (mpz_ptr, unsigned long int, unsigned long int);


 void __gmpz_primorial_ui (mpz_ptr, unsigned long int);


 void __gmpz_fdiv_q (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_fdiv_q_2exp (mpz_ptr, mpz_srcptr, mp_bitcnt_t);


 unsigned long int __gmpz_fdiv_q_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_fdiv_qr (mpz_ptr, mpz_ptr, mpz_srcptr, mpz_srcptr);


 unsigned long int __gmpz_fdiv_qr_ui (mpz_ptr, mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_fdiv_r (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_fdiv_r_2exp (mpz_ptr, mpz_srcptr, mp_bitcnt_t);


 unsigned long int __gmpz_fdiv_r_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 unsigned long int __gmpz_fdiv_ui (mpz_srcptr, unsigned long int) ;


 void __gmpz_fib_ui (mpz_ptr, unsigned long int);


 void __gmpz_fib2_ui (mpz_ptr, mpz_ptr, unsigned long int);


 int __gmpz_fits_sint_p (mpz_srcptr) ;


 int __gmpz_fits_slong_p (mpz_srcptr) ;


 int __gmpz_fits_sshort_p (mpz_srcptr) ;



 int __gmpz_fits_uint_p (mpz_srcptr) ;




 int __gmpz_fits_ulong_p (mpz_srcptr) ;




 int __gmpz_fits_ushort_p (mpz_srcptr) ;



 void __gmpz_gcd (mpz_ptr, mpz_srcptr, mpz_srcptr);


 unsigned long int __gmpz_gcd_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_gcdext (mpz_ptr, mpz_ptr, mpz_ptr, mpz_srcptr, mpz_srcptr);


 double __gmpz_get_d (mpz_srcptr) ;


 double __gmpz_get_d_2exp (signed long int *, mpz_srcptr);


 long int __gmpz_get_si (mpz_srcptr) ;


 char *__gmpz_get_str (char *, int, mpz_srcptr);



 unsigned long int __gmpz_get_ui (mpz_srcptr) ;




 mp_limb_t __gmpz_getlimbn (mpz_srcptr, mp_size_t) ;



 mp_bitcnt_t __gmpz_hamdist (mpz_srcptr, mpz_srcptr) ;


 void __gmpz_import (mpz_ptr, size_t, int, size_t, int, size_t, const void *);


 void __gmpz_init (mpz_ptr) ;


 void __gmpz_init2 (mpz_ptr, mp_bitcnt_t);


 void __gmpz_inits (mpz_ptr, ...) ;


 void __gmpz_init_set (mpz_ptr, mpz_srcptr);


 void __gmpz_init_set_d (mpz_ptr, double);


 void __gmpz_init_set_si (mpz_ptr, signed long int);


 int __gmpz_init_set_str (mpz_ptr, const char *, int);


 void __gmpz_init_set_ui (mpz_ptr, unsigned long int);



 size_t __gmpz_inp_raw (mpz_ptr, FILE *);




 size_t __gmpz_inp_str (mpz_ptr, FILE *, int);



 int __gmpz_invert (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_ior (mpz_ptr, mpz_srcptr, mpz_srcptr);


 int __gmpz_jacobi (mpz_srcptr, mpz_srcptr) ;




 int __gmpz_kronecker_si (mpz_srcptr, long) ;


 int __gmpz_kronecker_ui (mpz_srcptr, unsigned long) ;


 int __gmpz_si_kronecker (long, mpz_srcptr) ;


 int __gmpz_ui_kronecker (unsigned long, mpz_srcptr) ;


 void __gmpz_lcm (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_lcm_ui (mpz_ptr, mpz_srcptr, unsigned long);




 void __gmpz_lucnum_ui (mpz_ptr, unsigned long int);


 void __gmpz_lucnum2_ui (mpz_ptr, mpz_ptr, unsigned long int);


 int __gmpz_millerrabin (mpz_srcptr, int) ;


 void __gmpz_mod (mpz_ptr, mpz_srcptr, mpz_srcptr);




 void __gmpz_mul (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_mul_2exp (mpz_ptr, mpz_srcptr, mp_bitcnt_t);


 void __gmpz_mul_si (mpz_ptr, mpz_srcptr, long int);


 void __gmpz_mul_ui (mpz_ptr, mpz_srcptr, unsigned long int);



 void __gmpz_neg (mpz_ptr, mpz_srcptr);



 void __gmpz_nextprime (mpz_ptr, mpz_srcptr);



 size_t __gmpz_out_raw (FILE *, mpz_srcptr);




 size_t __gmpz_out_str (FILE *, int, mpz_srcptr);



 int __gmpz_perfect_power_p (mpz_srcptr) ;



 int __gmpz_perfect_square_p (mpz_srcptr) ;




 mp_bitcnt_t __gmpz_popcount (mpz_srcptr) ;



 void __gmpz_pow_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_powm (mpz_ptr, mpz_srcptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_powm_sec (mpz_ptr, mpz_srcptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_powm_ui (mpz_ptr, mpz_srcptr, unsigned long int, mpz_srcptr);


 int __gmpz_probab_prime_p (mpz_srcptr, int) ;


 void __gmpz_random (mpz_ptr, mp_size_t);


 void __gmpz_random2 (mpz_ptr, mp_size_t);


 void __gmpz_realloc2 (mpz_ptr, mp_bitcnt_t);


 mp_bitcnt_t __gmpz_remove (mpz_ptr, mpz_srcptr, mpz_srcptr);


 int __gmpz_root (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_rootrem (mpz_ptr, mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_rrandomb (mpz_ptr, gmp_randstate_t, mp_bitcnt_t);


 mp_bitcnt_t __gmpz_scan0 (mpz_srcptr, mp_bitcnt_t) ;


 mp_bitcnt_t __gmpz_scan1 (mpz_srcptr, mp_bitcnt_t) ;


 void __gmpz_set (mpz_ptr, mpz_srcptr);


 void __gmpz_set_d (mpz_ptr, double);


 void __gmpz_set_f (mpz_ptr, mpf_srcptr);



 void __gmpz_set_q (mpz_ptr, mpq_srcptr);



 void __gmpz_set_si (mpz_ptr, signed long int);


 int __gmpz_set_str (mpz_ptr, const char *, int);


 void __gmpz_set_ui (mpz_ptr, unsigned long int);


 void __gmpz_setbit (mpz_ptr, mp_bitcnt_t);



 size_t __gmpz_size (mpz_srcptr) ;



 size_t __gmpz_sizeinbase (mpz_srcptr, int) ;


 void __gmpz_sqrt (mpz_ptr, mpz_srcptr);


 void __gmpz_sqrtrem (mpz_ptr, mpz_ptr, mpz_srcptr);


 void __gmpz_sub (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_sub_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_ui_sub (mpz_ptr, unsigned long int, mpz_srcptr);


 void __gmpz_submul (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_submul_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_swap (mpz_ptr, mpz_ptr) ;


 unsigned long int __gmpz_tdiv_ui (mpz_srcptr, unsigned long int) ;


 void __gmpz_tdiv_q (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_tdiv_q_2exp (mpz_ptr, mpz_srcptr, mp_bitcnt_t);


 unsigned long int __gmpz_tdiv_q_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_tdiv_qr (mpz_ptr, mpz_ptr, mpz_srcptr, mpz_srcptr);


 unsigned long int __gmpz_tdiv_qr_ui (mpz_ptr, mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_tdiv_r (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_tdiv_r_2exp (mpz_ptr, mpz_srcptr, mp_bitcnt_t);


 unsigned long int __gmpz_tdiv_r_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 int __gmpz_tstbit (mpz_srcptr, mp_bitcnt_t) ;


 void __gmpz_ui_pow_ui (mpz_ptr, unsigned long int, unsigned long int);


 void __gmpz_urandomb (mpz_ptr, gmp_randstate_t, mp_bitcnt_t);


 void __gmpz_urandomm (mpz_ptr, gmp_randstate_t, mpz_srcptr);



 void __gmpz_xor (mpz_ptr, mpz_srcptr, mpz_srcptr);


 mp_srcptr __gmpz_limbs_read (mpz_srcptr);


 mp_ptr __gmpz_limbs_write (mpz_ptr, mp_size_t);


 mp_ptr __gmpz_limbs_modify (mpz_ptr, mp_size_t);


 void __gmpz_limbs_finish (mpz_ptr, mp_size_t);


 mpz_srcptr __gmpz_roinit_n (mpz_ptr, mp_srcptr, mp_size_t);







 void __gmpq_abs (mpq_ptr, mpq_srcptr);



 void __gmpq_add (mpq_ptr, mpq_srcptr, mpq_srcptr);


 void __gmpq_canonicalize (mpq_ptr);


 void __gmpq_clear (mpq_ptr);


 void __gmpq_clears (mpq_ptr, ...);


 int __gmpq_cmp (mpq_srcptr, mpq_srcptr) ;


 int __gmpq_cmp_si (mpq_srcptr, long, unsigned long) ;


 int __gmpq_cmp_ui (mpq_srcptr, unsigned long int, unsigned long int) ;


 int __gmpq_cmp_z (mpq_srcptr, mpz_srcptr) ;


 void __gmpq_div (mpq_ptr, mpq_srcptr, mpq_srcptr);


 void __gmpq_div_2exp (mpq_ptr, mpq_srcptr, mp_bitcnt_t);


 int __gmpq_equal (mpq_srcptr, mpq_srcptr) ;


 void __gmpq_get_num (mpz_ptr, mpq_srcptr);


 void __gmpq_get_den (mpz_ptr, mpq_srcptr);


 double __gmpq_get_d (mpq_srcptr) ;


 char *__gmpq_get_str (char *, int, mpq_srcptr);


 void __gmpq_init (mpq_ptr);


 void __gmpq_inits (mpq_ptr, ...);



 size_t __gmpq_inp_str (mpq_ptr, FILE *, int);



 void __gmpq_inv (mpq_ptr, mpq_srcptr);


 void __gmpq_mul (mpq_ptr, mpq_srcptr, mpq_srcptr);


 void __gmpq_mul_2exp (mpq_ptr, mpq_srcptr, mp_bitcnt_t);



 void __gmpq_neg (mpq_ptr, mpq_srcptr);




 size_t __gmpq_out_str (FILE *, int, mpq_srcptr);



 void __gmpq_set (mpq_ptr, mpq_srcptr);


 void __gmpq_set_d (mpq_ptr, double);


 void __gmpq_set_den (mpq_ptr, mpz_srcptr);


 void __gmpq_set_f (mpq_ptr, mpf_srcptr);


 void __gmpq_set_num (mpq_ptr, mpz_srcptr);


 void __gmpq_set_si (mpq_ptr, signed long int, unsigned long int);


 int __gmpq_set_str (mpq_ptr, const char *, int);


 void __gmpq_set_ui (mpq_ptr, unsigned long int, unsigned long int);


 void __gmpq_set_z (mpq_ptr, mpz_srcptr);


 void __gmpq_sub (mpq_ptr, mpq_srcptr, mpq_srcptr);


 void __gmpq_swap (mpq_ptr, mpq_ptr) ;





 void __gmpf_abs (mpf_ptr, mpf_srcptr);


 void __gmpf_add (mpf_ptr, mpf_srcptr, mpf_srcptr);


 void __gmpf_add_ui (mpf_ptr, mpf_srcptr, unsigned long int);

 void __gmpf_ceil (mpf_ptr, mpf_srcptr);


 void __gmpf_clear (mpf_ptr);


 void __gmpf_clears (mpf_ptr, ...);


 int __gmpf_cmp (mpf_srcptr, mpf_srcptr) ;


 int __gmpf_cmp_z (mpf_srcptr, mpz_srcptr) ;


 int __gmpf_cmp_d (mpf_srcptr, double) ;


 int __gmpf_cmp_si (mpf_srcptr, signed long int) ;


 int __gmpf_cmp_ui (mpf_srcptr, unsigned long int) ;


 void __gmpf_div (mpf_ptr, mpf_srcptr, mpf_srcptr);


 void __gmpf_div_2exp (mpf_ptr, mpf_srcptr, mp_bitcnt_t);


 void __gmpf_div_ui (mpf_ptr, mpf_srcptr, unsigned long int);


 void __gmpf_dump (mpf_srcptr);


 int __gmpf_eq (mpf_srcptr, mpf_srcptr, mp_bitcnt_t) ;


 int __gmpf_fits_sint_p (mpf_srcptr) ;


 int __gmpf_fits_slong_p (mpf_srcptr) ;


 int __gmpf_fits_sshort_p (mpf_srcptr) ;


 int __gmpf_fits_uint_p (mpf_srcptr) ;


 int __gmpf_fits_ulong_p (mpf_srcptr) ;


 int __gmpf_fits_ushort_p (mpf_srcptr) ;


 void __gmpf_floor (mpf_ptr, mpf_srcptr);


 double __gmpf_get_d (mpf_srcptr) ;


 double __gmpf_get_d_2exp (signed long int *, mpf_srcptr);


 mp_bitcnt_t __gmpf_get_default_prec (void) ;


 mp_bitcnt_t __gmpf_get_prec (mpf_srcptr) ;


 long __gmpf_get_si (mpf_srcptr) ;


 char *__gmpf_get_str (char *, mp_exp_t *, int, size_t, mpf_srcptr);


 unsigned long __gmpf_get_ui (mpf_srcptr) ;


 void __gmpf_init (mpf_ptr);


 void __gmpf_init2 (mpf_ptr, mp_bitcnt_t);


 void __gmpf_inits (mpf_ptr, ...);


 void __gmpf_init_set (mpf_ptr, mpf_srcptr);


 void __gmpf_init_set_d (mpf_ptr, double);


 void __gmpf_init_set_si (mpf_ptr, signed long int);


 int __gmpf_init_set_str (mpf_ptr, const char *, int);


 void __gmpf_init_set_ui (mpf_ptr, unsigned long int);



 size_t __gmpf_inp_str (mpf_ptr, FILE *, int);



 int __gmpf_integer_p (mpf_srcptr) ;


 void __gmpf_mul (mpf_ptr, mpf_srcptr, mpf_srcptr);


 void __gmpf_mul_2exp (mpf_ptr, mpf_srcptr, mp_bitcnt_t);


 void __gmpf_mul_ui (mpf_ptr, mpf_srcptr, unsigned long int);


 void __gmpf_neg (mpf_ptr, mpf_srcptr);



 size_t __gmpf_out_str (FILE *, int, size_t, mpf_srcptr);



 void __gmpf_pow_ui (mpf_ptr, mpf_srcptr, unsigned long int);


 void __gmpf_random2 (mpf_ptr, mp_size_t, mp_exp_t);


 void __gmpf_reldiff (mpf_ptr, mpf_srcptr, mpf_srcptr);


 void __gmpf_set (mpf_ptr, mpf_srcptr);


 void __gmpf_set_d (mpf_ptr, double);


 void __gmpf_set_default_prec (mp_bitcnt_t) ;


 void __gmpf_set_prec (mpf_ptr, mp_bitcnt_t);


 void __gmpf_set_prec_raw (mpf_ptr, mp_bitcnt_t) ;


 void __gmpf_set_q (mpf_ptr, mpq_srcptr);


 void __gmpf_set_si (mpf_ptr, signed long int);


 int __gmpf_set_str (mpf_ptr, const char *, int);


 void __gmpf_set_ui (mpf_ptr, unsigned long int);


 void __gmpf_set_z (mpf_ptr, mpz_srcptr);


 size_t __gmpf_size (mpf_srcptr) ;


 void __gmpf_sqrt (mpf_ptr, mpf_srcptr);


 void __gmpf_sqrt_ui (mpf_ptr, unsigned long int);


 void __gmpf_sub (mpf_ptr, mpf_srcptr, mpf_srcptr);


 void __gmpf_sub_ui (mpf_ptr, mpf_srcptr, unsigned long int);


 void __gmpf_swap (mpf_ptr, mpf_ptr) ;


 void __gmpf_trunc (mpf_ptr, mpf_srcptr);


 void __gmpf_ui_div (mpf_ptr, unsigned long int, mpf_srcptr);


 void __gmpf_ui_sub (mpf_ptr, unsigned long int, mpf_srcptr);


 void __gmpf_urandomb (mpf_t, gmp_randstate_t, mp_bitcnt_t);
# 1465 "/usr/include/gmp-x86_64.h" 3 4
 mp_limb_t __gmpn_add (mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t);




 mp_limb_t __gmpn_add_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t) ;



 mp_limb_t __gmpn_add_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);


 mp_limb_t __gmpn_addmul_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);



 int __gmpn_cmp (mp_srcptr, mp_srcptr, mp_size_t) ;




 int __gmpn_zero_p (mp_srcptr, mp_size_t) ;



 void __gmpn_divexact_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);





 mp_limb_t __gmpn_divexact_by3c (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);





 mp_limb_t __gmpn_divrem (mp_ptr, mp_size_t, mp_ptr, mp_size_t, mp_srcptr, mp_size_t);


 mp_limb_t __gmpn_divrem_1 (mp_ptr, mp_size_t, mp_srcptr, mp_size_t, mp_limb_t);


 mp_limb_t __gmpn_divrem_2 (mp_ptr, mp_size_t, mp_ptr, mp_size_t, mp_srcptr);


 mp_limb_t __gmpn_div_qr_1 (mp_ptr, mp_limb_t *, mp_srcptr, mp_size_t, mp_limb_t);


 mp_limb_t __gmpn_div_qr_2 (mp_ptr, mp_ptr, mp_srcptr, mp_size_t, mp_srcptr);


 mp_size_t __gmpn_gcd (mp_ptr, mp_ptr, mp_size_t, mp_ptr, mp_size_t);


 mp_limb_t __gmpn_gcd_11 (mp_limb_t, mp_limb_t) ;


 mp_limb_t __gmpn_gcd_1 (mp_srcptr, mp_size_t, mp_limb_t) ;


 mp_limb_t __gmpn_gcdext_1 (mp_limb_signed_t *, mp_limb_signed_t *, mp_limb_t, mp_limb_t);


 mp_size_t __gmpn_gcdext (mp_ptr, mp_ptr, mp_size_t *, mp_ptr, mp_size_t, mp_ptr, mp_size_t);


 size_t __gmpn_get_str (unsigned char *, int, mp_ptr, mp_size_t);


 mp_bitcnt_t __gmpn_hamdist (mp_srcptr, mp_srcptr, mp_size_t) ;


 mp_limb_t __gmpn_lshift (mp_ptr, mp_srcptr, mp_size_t, unsigned int);


 mp_limb_t __gmpn_mod_1 (mp_srcptr, mp_size_t, mp_limb_t) ;


 mp_limb_t __gmpn_mul (mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t);


 mp_limb_t __gmpn_mul_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);


 void __gmpn_mul_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);


 void __gmpn_sqr (mp_ptr, mp_srcptr, mp_size_t);



 mp_limb_t __gmpn_neg (mp_ptr, mp_srcptr, mp_size_t);



 void __gmpn_com (mp_ptr, mp_srcptr, mp_size_t);


 int __gmpn_perfect_square_p (mp_srcptr, mp_size_t) ;


 int __gmpn_perfect_power_p (mp_srcptr, mp_size_t) ;


 mp_bitcnt_t __gmpn_popcount (mp_srcptr, mp_size_t) ;


 mp_size_t __gmpn_pow_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t, mp_ptr);



 mp_limb_t __gmpn_preinv_mod_1 (mp_srcptr, mp_size_t, mp_limb_t, mp_limb_t) ;


 void __gmpn_random (mp_ptr, mp_size_t);


 void __gmpn_random2 (mp_ptr, mp_size_t);


 mp_limb_t __gmpn_rshift (mp_ptr, mp_srcptr, mp_size_t, unsigned int);


 mp_bitcnt_t __gmpn_scan0 (mp_srcptr, mp_bitcnt_t) ;


 mp_bitcnt_t __gmpn_scan1 (mp_srcptr, mp_bitcnt_t) ;


 mp_size_t __gmpn_set_str (mp_ptr, const unsigned char *, size_t, int);


 size_t __gmpn_sizeinbase (mp_srcptr, mp_size_t, int);


 mp_size_t __gmpn_sqrtrem (mp_ptr, mp_ptr, mp_srcptr, mp_size_t);



 mp_limb_t __gmpn_sub (mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t);




 mp_limb_t __gmpn_sub_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t) ;



 mp_limb_t __gmpn_sub_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);


 mp_limb_t __gmpn_submul_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);


 void __gmpn_tdiv_qr (mp_ptr, mp_ptr, mp_size_t, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t);


 void __gmpn_and_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

 void __gmpn_andn_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

 void __gmpn_nand_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

 void __gmpn_ior_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

 void __gmpn_iorn_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

 void __gmpn_nior_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

 void __gmpn_xor_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

 void __gmpn_xnor_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);


 void __gmpn_copyi (mp_ptr, mp_srcptr, mp_size_t);

 void __gmpn_copyd (mp_ptr, mp_srcptr, mp_size_t);

 void __gmpn_zero (mp_ptr, mp_size_t);


 mp_limb_t __gmpn_cnd_add_n (mp_limb_t, mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

 mp_limb_t __gmpn_cnd_sub_n (mp_limb_t, mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);


 mp_limb_t __gmpn_sec_add_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t, mp_ptr);

 mp_size_t __gmpn_sec_add_1_itch (mp_size_t) ;


 mp_limb_t __gmpn_sec_sub_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t, mp_ptr);

 mp_size_t __gmpn_sec_sub_1_itch (mp_size_t) ;


 void __gmpn_cnd_swap (mp_limb_t, volatile mp_limb_t *, volatile mp_limb_t *, mp_size_t);


 void __gmpn_sec_mul (mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t, mp_ptr);

 mp_size_t __gmpn_sec_mul_itch (mp_size_t, mp_size_t) ;


 void __gmpn_sec_sqr (mp_ptr, mp_srcptr, mp_size_t, mp_ptr);

 mp_size_t __gmpn_sec_sqr_itch (mp_size_t) ;


 void __gmpn_sec_powm (mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_bitcnt_t, mp_srcptr, mp_size_t, mp_ptr);

 mp_size_t __gmpn_sec_powm_itch (mp_size_t, mp_bitcnt_t, mp_size_t) ;


 void __gmpn_sec_tabselect (volatile mp_limb_t *, volatile const mp_limb_t *, mp_size_t, mp_size_t, mp_size_t);


 mp_limb_t __gmpn_sec_div_qr (mp_ptr, mp_ptr, mp_size_t, mp_srcptr, mp_size_t, mp_ptr);

 mp_size_t __gmpn_sec_div_qr_itch (mp_size_t, mp_size_t) ;

 void __gmpn_sec_div_r (mp_ptr, mp_size_t, mp_srcptr, mp_size_t, mp_ptr);

 mp_size_t __gmpn_sec_div_r_itch (mp_size_t, mp_size_t) ;


 int __gmpn_sec_invert (mp_ptr, mp_ptr, mp_srcptr, mp_size_t, mp_bitcnt_t, mp_ptr);

 mp_size_t __gmpn_sec_invert_itch (mp_size_t) ;
# 1714 "/usr/include/gmp-x86_64.h" 3 4
extern __inline__ void
__gmpz_abs (mpz_ptr __gmp_w, mpz_srcptr __gmp_u)
{
  if (__gmp_w != __gmp_u)
    __gmpz_set (__gmp_w, __gmp_u);
  __gmp_w->_mp_size = ((__gmp_w->_mp_size) >= 0 ? (__gmp_w->_mp_size) : -(__gmp_w->_mp_size));
}
# 1738 "/usr/include/gmp-x86_64.h" 3 4
extern __inline__

int
__gmpz_fits_uint_p (mpz_srcptr __gmp_z)
{
  mp_size_t __gmp_n = __gmp_z->_mp_size; mp_ptr __gmp_p = __gmp_z->_mp_d; return (__gmp_n == 0 || (__gmp_n == 1 && __gmp_p[0] <= (0x7fffffff * 2U + 1U)));;
}




extern __inline__

int
__gmpz_fits_ulong_p (mpz_srcptr __gmp_z)
{
  mp_size_t __gmp_n = __gmp_z->_mp_size; mp_ptr __gmp_p = __gmp_z->_mp_d; return (__gmp_n == 0 || (__gmp_n == 1 && __gmp_p[0] <= (0x7fffffffffffffffL * 2UL + 1UL)));;
}




extern __inline__

int
__gmpz_fits_ushort_p (mpz_srcptr __gmp_z)
{
  mp_size_t __gmp_n = __gmp_z->_mp_size; mp_ptr __gmp_p = __gmp_z->_mp_d; return (__gmp_n == 0 || (__gmp_n == 1 && __gmp_p[0] <= (0x7fff * 2 + 1)));;
}




extern __inline__

unsigned long
__gmpz_get_ui (mpz_srcptr __gmp_z)
{
  mp_ptr __gmp_p = __gmp_z->_mp_d;
  mp_size_t __gmp_n = __gmp_z->_mp_size;
  mp_limb_t __gmp_l = __gmp_p[0];






  return (__gmp_n != 0 ? __gmp_l : 0);
# 1794 "/usr/include/gmp-x86_64.h" 3 4
}




extern __inline__

mp_limb_t
__gmpz_getlimbn (mpz_srcptr __gmp_z, mp_size_t __gmp_n)
{
  mp_limb_t __gmp_result = 0;
  if (__builtin_expect ((__gmp_n >= 0 && __gmp_n < ((__gmp_z->_mp_size) >= 0 ? (__gmp_z->_mp_size) : -(__gmp_z->_mp_size))) != 0, 1))
    __gmp_result = __gmp_z->_mp_d[__gmp_n];
  return __gmp_result;
}



extern __inline__ void
__gmpz_neg (mpz_ptr __gmp_w, mpz_srcptr __gmp_u)
{
  if (__gmp_w != __gmp_u)
    __gmpz_set (__gmp_w, __gmp_u);
  __gmp_w->_mp_size = - __gmp_w->_mp_size;
}




extern __inline__

int
__gmpz_perfect_square_p (mpz_srcptr __gmp_a)
{
  mp_size_t __gmp_asize;
  int __gmp_result;

  __gmp_asize = __gmp_a->_mp_size;
  __gmp_result = (__gmp_asize >= 0);
  if (__builtin_expect ((__gmp_asize > 0) != 0, 1))
    __gmp_result = __gmpn_perfect_square_p (__gmp_a->_mp_d, __gmp_asize);
  return __gmp_result;
}




extern __inline__

mp_bitcnt_t
__gmpz_popcount (mpz_srcptr __gmp_u)
{
  mp_size_t __gmp_usize;
  mp_bitcnt_t __gmp_result;

  __gmp_usize = __gmp_u->_mp_size;
  __gmp_result = (__gmp_usize < 0 ? ~ ((mp_bitcnt_t) (0)) : ((mp_bitcnt_t) (0)));
  if (__builtin_expect ((__gmp_usize > 0) != 0, 1))
    __gmp_result = __gmpn_popcount (__gmp_u->_mp_d, __gmp_usize);
  return __gmp_result;
}




extern __inline__

void
__gmpz_set_q (mpz_ptr __gmp_w, mpq_srcptr __gmp_u)
{
  __gmpz_tdiv_q (__gmp_w, (&((__gmp_u)->_mp_num)), (&((__gmp_u)->_mp_den)));
}




extern __inline__

size_t
__gmpz_size (mpz_srcptr __gmp_z)
{
  return ((__gmp_z->_mp_size) >= 0 ? (__gmp_z->_mp_size) : -(__gmp_z->_mp_size));
}






extern __inline__ void
__gmpq_abs (mpq_ptr __gmp_w, mpq_srcptr __gmp_u)
{
  if (__gmp_w != __gmp_u)
    __gmpq_set (__gmp_w, __gmp_u);
  __gmp_w->_mp_num._mp_size = ((__gmp_w->_mp_num._mp_size) >= 0 ? (__gmp_w->_mp_num._mp_size) : -(__gmp_w->_mp_num._mp_size));
}



extern __inline__ void
__gmpq_neg (mpq_ptr __gmp_w, mpq_srcptr __gmp_u)
{
  if (__gmp_w != __gmp_u)
    __gmpq_set (__gmp_w, __gmp_u);
  __gmp_w->_mp_num._mp_size = - __gmp_w->_mp_num._mp_size;
}
# 2136 "/usr/include/gmp-x86_64.h" 3 4
extern __inline__

mp_limb_t
__gmpn_add (mp_ptr __gmp_wp, mp_srcptr __gmp_xp, mp_size_t __gmp_xsize, mp_srcptr __gmp_yp, mp_size_t __gmp_ysize)
{
  mp_limb_t __gmp_c;
  do { mp_size_t __gmp_i; mp_limb_t __gmp_x; __gmp_i = (__gmp_ysize); if (__gmp_i != 0) { if (__gmpn_add_n (__gmp_wp, __gmp_xp, __gmp_yp, __gmp_i)) { do { if (__gmp_i >= (__gmp_xsize)) { (__gmp_c) = 1; goto __gmp_done; } __gmp_x = (__gmp_xp)[__gmp_i]; } while ((((__gmp_wp)[__gmp_i++] = (__gmp_x + 1) & ((~ ((mp_limb_t) (0))) >> 0)) == 0)); } } if ((__gmp_wp) != (__gmp_xp)) do { mp_size_t __gmp_j; ; for (__gmp_j = (__gmp_i); __gmp_j < (__gmp_xsize); __gmp_j++) (__gmp_wp)[__gmp_j] = (__gmp_xp)[__gmp_j]; } while (0); (__gmp_c) = 0; __gmp_done: ; } while (0);
  return __gmp_c;
}




extern __inline__

mp_limb_t
__gmpn_add_1 (mp_ptr __gmp_dst, mp_srcptr __gmp_src, mp_size_t __gmp_size, mp_limb_t __gmp_n)
{
  mp_limb_t __gmp_c;
  do { mp_size_t __gmp_i; mp_limb_t __gmp_x, __gmp_r; __gmp_x = (__gmp_src)[0]; __gmp_r = __gmp_x + (__gmp_n); (__gmp_dst)[0] = __gmp_r; if (((__gmp_r) < ((__gmp_n)))) { (__gmp_c) = 1; for (__gmp_i = 1; __gmp_i < (__gmp_size);) { __gmp_x = (__gmp_src)[__gmp_i]; __gmp_r = __gmp_x + 1; (__gmp_dst)[__gmp_i] = __gmp_r; ++__gmp_i; if (!((__gmp_r) < (1))) { if ((__gmp_src) != (__gmp_dst)) do { mp_size_t __gmp_j; ; for (__gmp_j = (__gmp_i); __gmp_j < (__gmp_size); __gmp_j++) (__gmp_dst)[__gmp_j] = (__gmp_src)[__gmp_j]; } while (0); (__gmp_c) = 0; break; } } } else { if ((__gmp_src) != (__gmp_dst)) do { mp_size_t __gmp_j; ; for (__gmp_j = (1); __gmp_j < (__gmp_size); __gmp_j++) (__gmp_dst)[__gmp_j] = (__gmp_src)[__gmp_j]; } while (0); (__gmp_c) = 0; } } while (0);
  return __gmp_c;
}




extern __inline__

int
__gmpn_cmp (mp_srcptr __gmp_xp, mp_srcptr __gmp_yp, mp_size_t __gmp_size)
{
  int __gmp_result;
  do { mp_size_t __gmp_i; mp_limb_t __gmp_x, __gmp_y; (__gmp_result) = 0; __gmp_i = (__gmp_size); while (--__gmp_i >= 0) { __gmp_x = (__gmp_xp)[__gmp_i]; __gmp_y = (__gmp_yp)[__gmp_i]; if (__gmp_x != __gmp_y) { (__gmp_result) = (__gmp_x > __gmp_y ? 1 : -1); break; } } } while (0);
  return __gmp_result;
}




extern __inline__

int
__gmpn_zero_p (mp_srcptr __gmp_p, mp_size_t __gmp_n)
{

    do {
      if (__gmp_p[--__gmp_n] != 0)
 return 0;
    } while (__gmp_n != 0);
  return 1;
}




extern __inline__

mp_limb_t
__gmpn_sub (mp_ptr __gmp_wp, mp_srcptr __gmp_xp, mp_size_t __gmp_xsize, mp_srcptr __gmp_yp, mp_size_t __gmp_ysize)
{
  mp_limb_t __gmp_c;
  do { mp_size_t __gmp_i; mp_limb_t __gmp_x; __gmp_i = (__gmp_ysize); if (__gmp_i != 0) { if (__gmpn_sub_n (__gmp_wp, __gmp_xp, __gmp_yp, __gmp_i)) { do { if (__gmp_i >= (__gmp_xsize)) { (__gmp_c) = 1; goto __gmp_done; } __gmp_x = (__gmp_xp)[__gmp_i]; } while ((((__gmp_wp)[__gmp_i++] = (__gmp_x - 1) & ((~ ((mp_limb_t) (0))) >> 0)), __gmp_x == 0)); } } if ((__gmp_wp) != (__gmp_xp)) do { mp_size_t __gmp_j; ; for (__gmp_j = (__gmp_i); __gmp_j < (__gmp_xsize); __gmp_j++) (__gmp_wp)[__gmp_j] = (__gmp_xp)[__gmp_j]; } while (0); (__gmp_c) = 0; __gmp_done: ; } while (0);
  return __gmp_c;
}




extern __inline__

mp_limb_t
__gmpn_sub_1 (mp_ptr __gmp_dst, mp_srcptr __gmp_src, mp_size_t __gmp_size, mp_limb_t __gmp_n)
{
  mp_limb_t __gmp_c;
  do { mp_size_t __gmp_i; mp_limb_t __gmp_x, __gmp_r; __gmp_x = (__gmp_src)[0]; __gmp_r = __gmp_x - (__gmp_n); (__gmp_dst)[0] = __gmp_r; if (((__gmp_x) < ((__gmp_n)))) { (__gmp_c) = 1; for (__gmp_i = 1; __gmp_i < (__gmp_size);) { __gmp_x = (__gmp_src)[__gmp_i]; __gmp_r = __gmp_x - 1; (__gmp_dst)[__gmp_i] = __gmp_r; ++__gmp_i; if (!((__gmp_x) < (1))) { if ((__gmp_src) != (__gmp_dst)) do { mp_size_t __gmp_j; ; for (__gmp_j = (__gmp_i); __gmp_j < (__gmp_size); __gmp_j++) (__gmp_dst)[__gmp_j] = (__gmp_src)[__gmp_j]; } while (0); (__gmp_c) = 0; break; } } } else { if ((__gmp_src) != (__gmp_dst)) do { mp_size_t __gmp_j; ; for (__gmp_j = (1); __gmp_j < (__gmp_size); __gmp_j++) (__gmp_dst)[__gmp_j] = (__gmp_src)[__gmp_j]; } while (0); (__gmp_c) = 0; } } while (0);
  return __gmp_c;
}




extern __inline__

mp_limb_t
__gmpn_neg (mp_ptr __gmp_rp, mp_srcptr __gmp_up, mp_size_t __gmp_n)
{
  while (*__gmp_up == 0)
    {
      *__gmp_rp = 0;
      if (!--__gmp_n)
 return 0;
      ++__gmp_up; ++__gmp_rp;
    }

  *__gmp_rp = (- *__gmp_up) & ((~ ((mp_limb_t) (0))) >> 0);

  if (--__gmp_n)
    __gmpn_com (++__gmp_rp, ++__gmp_up, __gmp_n);

  return 1;
}
# 2316 "/usr/include/gmp-x86_64.h" 3 4
enum
{
  GMP_ERROR_NONE = 0,
  GMP_ERROR_UNSUPPORTED_ARGUMENT = 1,
  GMP_ERROR_DIVISION_BY_ZERO = 2,
  GMP_ERROR_SQRT_OF_NEGATIVE = 4,
  GMP_ERROR_INVALID_ARGUMENT = 8
};
# 60 "/usr/include/gmp.h" 2 3 4
# 28 "/usr/include/flint/fmpz.h" 2 3 4


# 1 "/usr/include/flint/flint.h" 1 3 4
# 18 "/usr/include/flint/flint.h" 3 4
# 1 "/usr/include/sys/param.h" 1 3 4
# 23 "/usr/include/sys/param.h" 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/10/include/stddef.h" 1 3 4
# 24 "/usr/include/sys/param.h" 2 3 4

# 1 "/usr/include/sys/types.h" 1 3 4
# 27 "/usr/include/sys/types.h" 3 4

# 47 "/usr/include/sys/types.h" 3 4
typedef __ino_t ino_t;
# 59 "/usr/include/sys/types.h" 3 4
typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;





typedef __off_t off_t;
# 97 "/usr/include/sys/types.h" 3 4
typedef __pid_t pid_t;
# 108 "/usr/include/sys/types.h" 3 4
typedef __ssize_t ssize_t;
# 128 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 129 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/bits/types/time_t.h" 1 3 4






typedef __time_t time_t;
# 130 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 131 "/usr/include/sys/types.h" 2 3 4
# 144 "/usr/include/sys/types.h" 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/10/include/stddef.h" 1 3 4
# 145 "/usr/include/sys/types.h" 2 3 4
# 155 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 156 "/usr/include/sys/types.h" 2 3 4


typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;


typedef int register_t ;
# 192 "/usr/include/sys/types.h" 3 4
typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 230 "/usr/include/sys/types.h" 3 4

# 26 "/usr/include/sys/param.h" 2 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/10/include/limits.h" 1 3 4
# 27 "/usr/include/sys/param.h" 2 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 24 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/endian.h" 1 3 4
# 35 "/usr/include/bits/endian.h" 3 4
# 1 "/usr/include/bits/endianness.h" 1 3 4
# 36 "/usr/include/bits/endian.h" 2 3 4
# 25 "/usr/include/endian.h" 2 3 4
# 28 "/usr/include/sys/param.h" 2 3 4
# 1 "/usr/include/signal.h" 1 3 4
# 27 "/usr/include/signal.h" 3 4



# 1 "/usr/include/bits/signum-generic.h" 1 3 4
# 76 "/usr/include/bits/signum-generic.h" 3 4
# 1 "/usr/include/bits/signum-arch.h" 1 3 4
# 77 "/usr/include/bits/signum-generic.h" 2 3 4
# 31 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/bits/types/sig_atomic_t.h" 1 3 4







typedef __sig_atomic_t sig_atomic_t;
# 33 "/usr/include/signal.h" 2 3 4
# 72 "/usr/include/signal.h" 3 4
typedef void (*__sighandler_t) (int);




extern __sighandler_t __sysv_signal (int __sig, __sighandler_t __handler)
     ;
# 93 "/usr/include/signal.h" 3 4
extern __sighandler_t signal (int __sig, __sighandler_t __handler) __asm__ ("" "__sysv_signal")

                        ;
# 123 "/usr/include/signal.h" 3 4
extern int raise (int __sig) ;
# 369 "/usr/include/signal.h" 3 4
extern int __libc_current_sigrtmin (void) ;

extern int __libc_current_sigrtmax (void) ;





# 1 "/usr/include/bits/signal_ext.h" 1 3 4
# 378 "/usr/include/signal.h" 2 3 4


# 29 "/usr/include/sys/param.h" 2 3 4


# 1 "/usr/include/bits/param.h" 1 3 4
# 27 "/usr/include/bits/param.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 28 "/usr/include/bits/param.h" 2 3 4
# 1 "/usr/include/linux/param.h" 1 3 4




# 1 "/usr/include/asm/param.h" 1 3 4
# 1 "/usr/include/asm-generic/param.h" 1 3 4
# 2 "/usr/include/asm/param.h" 2 3 4
# 6 "/usr/include/linux/param.h" 2 3 4
# 29 "/usr/include/bits/param.h" 2 3 4
# 32 "/usr/include/sys/param.h" 2 3 4
# 19 "/usr/include/flint/flint.h" 2 3 4

# 1 "/usr/include/gmp.h" 1 3 4
# 21 "/usr/include/flint/flint.h" 2 3 4
# 1 "/usr/include/mpfr.h" 1 3 4
# 53 "/usr/include/mpfr.h" 3 4
# 1 "/usr/include/gmp.h" 1 3 4
# 54 "/usr/include/mpfr.h" 2 3 4







typedef void mpfr_void;
typedef int mpfr_int;
typedef unsigned int mpfr_uint;
typedef long mpfr_long;
typedef unsigned long mpfr_ulong;
typedef size_t mpfr_size_t;







typedef unsigned int mpfr_flags_t;
# 102 "/usr/include/mpfr.h" 3 4
typedef enum {
  MPFR_RNDN=0,
  MPFR_RNDZ,
  MPFR_RNDU,
  MPFR_RNDD,
  MPFR_RNDA,
  MPFR_RNDF,
  MPFR_RNDNA=-1
} mpfr_rnd_t;
# 168 "/usr/include/mpfr.h" 3 4
typedef long mpfr_prec_t;
typedef unsigned long mpfr_uprec_t;
# 184 "/usr/include/mpfr.h" 3 4
typedef int mpfr_sign_t;
# 195 "/usr/include/mpfr.h" 3 4
typedef long mpfr_exp_t;
typedef unsigned long mpfr_uexp_t;
# 224 "/usr/include/mpfr.h" 3 4
typedef struct {
  mpfr_prec_t _mpfr_prec;
  mpfr_sign_t _mpfr_sign;
  mpfr_exp_t _mpfr_exp;
  mp_limb_t *_mpfr_d;
} __mpfr_struct;
# 250 "/usr/include/mpfr.h" 3 4
typedef __mpfr_struct mpfr_t[1];
typedef __mpfr_struct *mpfr_ptr;
typedef const __mpfr_struct *mpfr_srcptr;
# 263 "/usr/include/mpfr.h" 3 4
typedef enum {
  MPFR_NAN_KIND = 0,
  MPFR_INF_KIND = 1,
  MPFR_ZERO_KIND = 2,
  MPFR_REGULAR_KIND = 3
} mpfr_kind_t;


typedef enum {
  MPFR_FREE_LOCAL_CACHE = 1,
  MPFR_FREE_GLOBAL_CACHE = 2
} mpfr_free_cache_t;
# 378 "/usr/include/mpfr.h" 3 4
 const char * mpfr_get_version (void);
 const char * mpfr_get_patches (void);

 int mpfr_buildopt_tls_p (void);
 int mpfr_buildopt_float128_p (void);
 int mpfr_buildopt_decimal_p (void);
 int mpfr_buildopt_gmpinternals_p (void);
 int mpfr_buildopt_sharedcache_p (void);
 const char *
  mpfr_buildopt_tune_case (void);

 mpfr_exp_t mpfr_get_emin (void);
 int mpfr_set_emin (mpfr_exp_t);
 mpfr_exp_t mpfr_get_emin_min (void);
 mpfr_exp_t mpfr_get_emin_max (void);
 mpfr_exp_t mpfr_get_emax (void);
 int mpfr_set_emax (mpfr_exp_t);
 mpfr_exp_t mpfr_get_emax_min (void);
 mpfr_exp_t mpfr_get_emax_max (void);

 void mpfr_set_default_rounding_mode (mpfr_rnd_t);
 mpfr_rnd_t mpfr_get_default_rounding_mode (void);
 const char * mpfr_print_rnd_mode (mpfr_rnd_t);

 void mpfr_clear_flags (void);
 void mpfr_clear_underflow (void);
 void mpfr_clear_overflow (void);
 void mpfr_clear_divby0 (void);
 void mpfr_clear_nanflag (void);
 void mpfr_clear_inexflag (void);
 void mpfr_clear_erangeflag (void);

 void mpfr_set_underflow (void);
 void mpfr_set_overflow (void);
 void mpfr_set_divby0 (void);
 void mpfr_set_nanflag (void);
 void mpfr_set_inexflag (void);
 void mpfr_set_erangeflag (void);

 int mpfr_underflow_p (void);
 int mpfr_overflow_p (void);
 int mpfr_divby0_p (void);
 int mpfr_nanflag_p (void);
 int mpfr_inexflag_p (void);
 int mpfr_erangeflag_p (void);

 void mpfr_flags_clear (mpfr_flags_t);
 void mpfr_flags_set (mpfr_flags_t);
 mpfr_flags_t mpfr_flags_test (mpfr_flags_t);
 mpfr_flags_t mpfr_flags_save (void);
 void mpfr_flags_restore (mpfr_flags_t,
                                         mpfr_flags_t);

 int mpfr_check_range (mpfr_ptr, int, mpfr_rnd_t);

 void mpfr_init2 (mpfr_ptr, mpfr_prec_t);
 void mpfr_init (mpfr_ptr);
 void mpfr_clear (mpfr_ptr);

 void
  mpfr_inits2 (mpfr_prec_t, mpfr_ptr, ...) ;
 void
  mpfr_inits (mpfr_ptr, ...) ;
 void
  mpfr_clears (mpfr_ptr, ...) ;

 int mpfr_prec_round (mpfr_ptr, mpfr_prec_t, mpfr_rnd_t);
 int mpfr_can_round (mpfr_srcptr, mpfr_exp_t, mpfr_rnd_t,
                                    mpfr_rnd_t, mpfr_prec_t);
 mpfr_prec_t mpfr_min_prec (mpfr_srcptr);

 mpfr_exp_t mpfr_get_exp (mpfr_srcptr);
 int mpfr_set_exp (mpfr_ptr, mpfr_exp_t);
 mpfr_prec_t mpfr_get_prec (mpfr_srcptr);
 void mpfr_set_prec (mpfr_ptr, mpfr_prec_t);
 void mpfr_set_prec_raw (mpfr_ptr, mpfr_prec_t);
 void mpfr_set_default_prec (mpfr_prec_t);
 mpfr_prec_t mpfr_get_default_prec (void);

 int mpfr_set_d (mpfr_ptr, double, mpfr_rnd_t);
 int mpfr_set_flt (mpfr_ptr, float, mpfr_rnd_t);






 int mpfr_set_ld (mpfr_ptr, long double, mpfr_rnd_t);




 int mpfr_set_z (mpfr_ptr, mpz_srcptr, mpfr_rnd_t);
 int mpfr_set_z_2exp (mpfr_ptr, mpz_srcptr, mpfr_exp_t,
                                     mpfr_rnd_t);
 void mpfr_set_nan (mpfr_ptr);
 void mpfr_set_inf (mpfr_ptr, int);
 void mpfr_set_zero (mpfr_ptr, int);



 int mpfr_set_f (mpfr_ptr, mpf_srcptr, mpfr_rnd_t);
 int mpfr_cmp_f (mpfr_srcptr, mpf_srcptr);
 int mpfr_get_f (mpf_ptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_set_si (mpfr_ptr, long, mpfr_rnd_t);
 int mpfr_set_ui (mpfr_ptr, unsigned long, mpfr_rnd_t);
 int mpfr_set_si_2exp (mpfr_ptr, long, mpfr_exp_t, mpfr_rnd_t);
 int mpfr_set_ui_2exp (mpfr_ptr, unsigned long, mpfr_exp_t,
                                      mpfr_rnd_t);


 int mpfr_set_q (mpfr_ptr, mpq_srcptr, mpfr_rnd_t);
 int mpfr_mul_q (mpfr_ptr, mpfr_srcptr, mpq_srcptr, mpfr_rnd_t);
 int mpfr_div_q (mpfr_ptr, mpfr_srcptr, mpq_srcptr, mpfr_rnd_t);
 int mpfr_add_q (mpfr_ptr, mpfr_srcptr, mpq_srcptr, mpfr_rnd_t);
 int mpfr_sub_q (mpfr_ptr, mpfr_srcptr, mpq_srcptr, mpfr_rnd_t);
 int mpfr_cmp_q (mpfr_srcptr, mpq_srcptr);
 void mpfr_get_q (mpq_ptr q, mpfr_srcptr f);

 int mpfr_set_str (mpfr_ptr, const char *, int, mpfr_rnd_t);
 int mpfr_init_set_str (mpfr_ptr, const char *, int,
                                       mpfr_rnd_t);
 int mpfr_set4 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t, int);
 int mpfr_abs (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_set (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_neg (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_signbit (mpfr_srcptr);
 int mpfr_setsign (mpfr_ptr, mpfr_srcptr, int, mpfr_rnd_t);
 int mpfr_copysign (mpfr_ptr, mpfr_srcptr, mpfr_srcptr,
                                   mpfr_rnd_t);

 mpfr_exp_t mpfr_get_z_2exp (mpz_ptr, mpfr_srcptr);
 float mpfr_get_flt (mpfr_srcptr, mpfr_rnd_t);
 double mpfr_get_d (mpfr_srcptr, mpfr_rnd_t);




 long double mpfr_get_ld (mpfr_srcptr, mpfr_rnd_t);
 double mpfr_get_d1 (mpfr_srcptr);
 double mpfr_get_d_2exp (long*, mpfr_srcptr, mpfr_rnd_t);
 long double mpfr_get_ld_2exp (long*, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_frexp (mpfr_exp_t*, mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 long mpfr_get_si (mpfr_srcptr, mpfr_rnd_t);
 unsigned long mpfr_get_ui (mpfr_srcptr, mpfr_rnd_t);
 size_t mpfr_get_str_ndigits (int, mpfr_prec_t);
 char * mpfr_get_str (char*, mpfr_exp_t*, int, size_t,
                                     mpfr_srcptr, mpfr_rnd_t);
 int mpfr_get_z (mpz_ptr z, mpfr_srcptr f, mpfr_rnd_t);

 void mpfr_free_str (char *);

 int mpfr_urandom (mpfr_ptr, gmp_randstate_t, mpfr_rnd_t);



 int mpfr_grandom (mpfr_ptr, mpfr_ptr, gmp_randstate_t,
                                  mpfr_rnd_t);
 int mpfr_nrandom (mpfr_ptr, gmp_randstate_t, mpfr_rnd_t);
 int mpfr_erandom (mpfr_ptr, gmp_randstate_t, mpfr_rnd_t);
 int mpfr_urandomb (mpfr_ptr, gmp_randstate_t);

 void mpfr_nextabove (mpfr_ptr);
 void mpfr_nextbelow (mpfr_ptr);
 void mpfr_nexttoward (mpfr_ptr, mpfr_srcptr);


 int mpfr_printf (const char*, ...);
 int mpfr_asprintf (char**, const char*, ...);
 int mpfr_sprintf (char*, const char*, ...);
 int mpfr_snprintf (char*, size_t, const char*, ...);


 int mpfr_pow (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_pow_si (mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t);
 int mpfr_pow_ui (mpfr_ptr, mpfr_srcptr, unsigned long,
                                 mpfr_rnd_t);
 int mpfr_ui_pow_ui (mpfr_ptr, unsigned long, unsigned long,
                                    mpfr_rnd_t);
 int mpfr_ui_pow (mpfr_ptr, unsigned long, mpfr_srcptr,
                                 mpfr_rnd_t);
 int mpfr_pow_z (mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t);

 int mpfr_sqrt (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_sqrt_ui (mpfr_ptr, unsigned long, mpfr_rnd_t);
 int mpfr_rec_sqrt (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_add (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_sub (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_mul (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_div (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_add_ui (mpfr_ptr, mpfr_srcptr, unsigned long,
                                 mpfr_rnd_t);
 int mpfr_sub_ui (mpfr_ptr, mpfr_srcptr, unsigned long,
                                 mpfr_rnd_t);
 int mpfr_ui_sub (mpfr_ptr, unsigned long, mpfr_srcptr,
                                 mpfr_rnd_t);
 int mpfr_mul_ui (mpfr_ptr, mpfr_srcptr, unsigned long,
                                 mpfr_rnd_t);
 int mpfr_div_ui (mpfr_ptr, mpfr_srcptr, unsigned long,
                                 mpfr_rnd_t);
 int mpfr_ui_div (mpfr_ptr, unsigned long, mpfr_srcptr,
                                 mpfr_rnd_t);

 int mpfr_add_si (mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t);
 int mpfr_sub_si (mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t);
 int mpfr_si_sub (mpfr_ptr, long, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_mul_si (mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t);
 int mpfr_div_si (mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t);
 int mpfr_si_div (mpfr_ptr, long, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_add_d (mpfr_ptr, mpfr_srcptr, double, mpfr_rnd_t);
 int mpfr_sub_d (mpfr_ptr, mpfr_srcptr, double, mpfr_rnd_t);
 int mpfr_d_sub (mpfr_ptr, double, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_mul_d (mpfr_ptr, mpfr_srcptr, double, mpfr_rnd_t);
 int mpfr_div_d (mpfr_ptr, mpfr_srcptr, double, mpfr_rnd_t);
 int mpfr_d_div (mpfr_ptr, double, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_sqr (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_const_pi (mpfr_ptr, mpfr_rnd_t);
 int mpfr_const_log2 (mpfr_ptr, mpfr_rnd_t);
 int mpfr_const_euler (mpfr_ptr, mpfr_rnd_t);
 int mpfr_const_catalan (mpfr_ptr, mpfr_rnd_t);

 int mpfr_agm (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_log (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_log2 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_log10 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_log1p (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_log_ui (mpfr_ptr, unsigned long, mpfr_rnd_t);

 int mpfr_exp (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_exp2 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_exp10 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_expm1 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_eint (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_li2 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_cmp (mpfr_srcptr, mpfr_srcptr);
 int mpfr_cmp3 (mpfr_srcptr, mpfr_srcptr, int);
 int mpfr_cmp_d (mpfr_srcptr, double);
 int mpfr_cmp_ld (mpfr_srcptr, long double);
 int mpfr_cmp_ui (mpfr_srcptr, unsigned long);
 int mpfr_cmp_si (mpfr_srcptr, long);
 int mpfr_cmp_ui_2exp (mpfr_srcptr, unsigned long, mpfr_exp_t);
 int mpfr_cmp_si_2exp (mpfr_srcptr, long, mpfr_exp_t);
 int mpfr_cmpabs (mpfr_srcptr, mpfr_srcptr);
 int mpfr_cmpabs_ui (mpfr_srcptr, unsigned long);
 void mpfr_reldiff (mpfr_ptr, mpfr_srcptr, mpfr_srcptr,
                                   mpfr_rnd_t);
 int mpfr_eq (mpfr_srcptr, mpfr_srcptr, unsigned long);
 int mpfr_sgn (mpfr_srcptr);

 int mpfr_mul_2exp (mpfr_ptr, mpfr_srcptr, unsigned long,
                                   mpfr_rnd_t);
 int mpfr_div_2exp (mpfr_ptr, mpfr_srcptr, unsigned long,
                                   mpfr_rnd_t);
 int mpfr_mul_2ui (mpfr_ptr, mpfr_srcptr, unsigned long,
                                  mpfr_rnd_t);
 int mpfr_div_2ui (mpfr_ptr, mpfr_srcptr, unsigned long,
                                  mpfr_rnd_t);
 int mpfr_mul_2si (mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t);
 int mpfr_div_2si (mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t);

 int mpfr_rint (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_roundeven (mpfr_ptr, mpfr_srcptr);
 int mpfr_round (mpfr_ptr, mpfr_srcptr);
 int mpfr_trunc (mpfr_ptr, mpfr_srcptr);
 int mpfr_ceil (mpfr_ptr, mpfr_srcptr);
 int mpfr_floor (mpfr_ptr, mpfr_srcptr);
 int mpfr_rint_roundeven (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_rint_round (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_rint_trunc (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_rint_ceil (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_rint_floor (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_frac (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_modf (mpfr_ptr, mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_remquo (mpfr_ptr, long*, mpfr_srcptr, mpfr_srcptr,
                                 mpfr_rnd_t);
 int mpfr_remainder (mpfr_ptr, mpfr_srcptr, mpfr_srcptr,
                                    mpfr_rnd_t);
 int mpfr_fmod (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_fmodquo (mpfr_ptr, long*, mpfr_srcptr, mpfr_srcptr,
                                  mpfr_rnd_t);

 int mpfr_fits_ulong_p (mpfr_srcptr, mpfr_rnd_t);
 int mpfr_fits_slong_p (mpfr_srcptr, mpfr_rnd_t);
 int mpfr_fits_uint_p (mpfr_srcptr, mpfr_rnd_t);
 int mpfr_fits_sint_p (mpfr_srcptr, mpfr_rnd_t);
 int mpfr_fits_ushort_p (mpfr_srcptr, mpfr_rnd_t);
 int mpfr_fits_sshort_p (mpfr_srcptr, mpfr_rnd_t);
 int mpfr_fits_uintmax_p (mpfr_srcptr, mpfr_rnd_t);
 int mpfr_fits_intmax_p (mpfr_srcptr, mpfr_rnd_t);

 void mpfr_extract (mpz_ptr, mpfr_srcptr, unsigned int);
 void mpfr_swap (mpfr_ptr, mpfr_ptr);
 void mpfr_dump (mpfr_srcptr);

 int mpfr_nan_p (mpfr_srcptr);
 int mpfr_inf_p (mpfr_srcptr);
 int mpfr_number_p (mpfr_srcptr);
 int mpfr_integer_p (mpfr_srcptr);
 int mpfr_zero_p (mpfr_srcptr);
 int mpfr_regular_p (mpfr_srcptr);

 int mpfr_greater_p (mpfr_srcptr, mpfr_srcptr);
 int mpfr_greaterequal_p (mpfr_srcptr, mpfr_srcptr);
 int mpfr_less_p (mpfr_srcptr, mpfr_srcptr);
 int mpfr_lessequal_p (mpfr_srcptr, mpfr_srcptr);
 int mpfr_lessgreater_p (mpfr_srcptr, mpfr_srcptr);
 int mpfr_equal_p (mpfr_srcptr, mpfr_srcptr);
 int mpfr_unordered_p (mpfr_srcptr, mpfr_srcptr);

 int mpfr_atanh (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_acosh (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_asinh (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_cosh (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_sinh (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_tanh (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_sinh_cosh (mpfr_ptr, mpfr_ptr, mpfr_srcptr,
                                    mpfr_rnd_t);

 int mpfr_sech (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_csch (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_coth (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_acos (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_asin (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_atan (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_sin (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_sin_cos (mpfr_ptr, mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_cos (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_tan (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_atan2 (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_sec (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_csc (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_cot (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_hypot (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_erf (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_erfc (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_cbrt (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);



 int mpfr_root (mpfr_ptr, mpfr_srcptr, unsigned long,
                               mpfr_rnd_t);
 int mpfr_rootn_ui (mpfr_ptr, mpfr_srcptr, unsigned long,
                                   mpfr_rnd_t);
 int mpfr_gamma (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_gamma_inc (mpfr_ptr, mpfr_srcptr, mpfr_srcptr,
                                    mpfr_rnd_t);
 int mpfr_beta (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_lngamma (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_lgamma (mpfr_ptr, int *, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_digamma (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_zeta (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_zeta_ui (mpfr_ptr, unsigned long, mpfr_rnd_t);
 int mpfr_fac_ui (mpfr_ptr, unsigned long, mpfr_rnd_t);
 int mpfr_j0 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_j1 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_jn (mpfr_ptr, long, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_y0 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_y1 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_yn (mpfr_ptr, long, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_ai (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_min (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_max (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_dim (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_mul_z (mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t);
 int mpfr_div_z (mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t);
 int mpfr_add_z (mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t);
 int mpfr_sub_z (mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t);
 int mpfr_z_sub (mpfr_ptr, mpz_srcptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_cmp_z (mpfr_srcptr, mpz_srcptr);

 int mpfr_fma (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr,
                              mpfr_rnd_t);
 int mpfr_fms (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr,
                              mpfr_rnd_t);
 int mpfr_fmma (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr,
                               mpfr_srcptr, mpfr_rnd_t);
 int mpfr_fmms (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr,
                               mpfr_srcptr, mpfr_rnd_t);
 int mpfr_sum (mpfr_ptr, const mpfr_ptr *, unsigned long,
                              mpfr_rnd_t);
 int mpfr_dot (mpfr_ptr, const mpfr_ptr *, const mpfr_ptr *,
                              unsigned long, mpfr_rnd_t);

 void mpfr_free_cache (void);
 void mpfr_free_cache2 (mpfr_free_cache_t);
 void mpfr_free_pool (void);
 int mpfr_mp_memory_cleanup (void);

 int mpfr_subnormalize (mpfr_ptr, int, mpfr_rnd_t);

 int mpfr_strtofr (mpfr_ptr, const char *, char **, int,
                                  mpfr_rnd_t);

 void mpfr_round_nearest_away_begin (mpfr_t);
 int mpfr_round_nearest_away_end (mpfr_t, int);

 size_t mpfr_custom_get_size (mpfr_prec_t);
 void mpfr_custom_init (void *, mpfr_prec_t);
 void *
  mpfr_custom_get_significand (mpfr_srcptr);
 mpfr_exp_t mpfr_custom_get_exp (mpfr_srcptr);
 void mpfr_custom_move (mpfr_ptr, void *);
 void mpfr_custom_init_set (mpfr_ptr, int, mpfr_exp_t,
                                           mpfr_prec_t, void *);
 int mpfr_custom_get_kind (mpfr_srcptr);

 int mpfr_total_order_p (mpfr_srcptr, mpfr_srcptr);
# 1109 "/usr/include/mpfr.h" 3 4
 size_t __gmpfr_inp_str (mpfr_ptr, FILE*, int, mpfr_rnd_t);
 size_t __gmpfr_out_str (FILE*, int, size_t, mpfr_srcptr,
                                     mpfr_rnd_t);


 int __gmpfr_fprintf (FILE*, const char*, ...);



 int __gmpfr_fpif_export (FILE*, mpfr_ptr);
 int __gmpfr_fpif_import (mpfr_ptr, FILE*);
# 22 "/usr/include/flint/flint.h" 2 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/10/include/stdarg.h" 1 3 4
# 99 "/usr/lib/gcc/x86_64-redhat-linux/10/include/stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 23 "/usr/include/flint/flint.h" 2 3 4




# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/10/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4







extern void *alloca (size_t __size) ;






# 28 "/usr/include/flint/flint.h" 2 3 4




# 1 "/usr/lib/gcc/x86_64-redhat-linux/10/include/limits.h" 1 3 4
# 33 "/usr/include/flint/flint.h" 2 3 4
# 1 "/usr/include/flint/longlong.h" 1 3 4
# 665 "/usr/include/flint/longlong.h" 3 4
static const int rec_word_tab[256] = {
   2045, 2037, 2029, 2021, 2013, 2005, 1998, 1990, 1983, 1975, 1968, 1960, 1953, 1946, 1938, 1931,
   1924, 1917, 1910, 1903, 1896, 1889, 1883, 1876, 1869, 1863, 1856, 1849, 1843, 1836, 1830, 1824,
   1817, 1811, 1805, 1799, 1792, 1786, 1780, 1774, 1768, 1762, 1756, 1750, 1745, 1739, 1733, 1727,
   1722, 1716, 1710, 1705, 1699, 1694, 1688, 1683, 1677, 1672, 1667, 1661, 1656, 1651, 1646, 1641,
   1636, 1630, 1625, 1620, 1615, 1610, 1605, 1600, 1596, 1591, 1586, 1581, 1576, 1572, 1567, 1562,
   1558, 1553, 1548, 1544, 1539, 1535, 1530, 1526, 1521, 1517, 1513, 1508, 1504, 1500, 1495, 1491,
   1487, 1483, 1478, 1474, 1470, 1466, 1462, 1458, 1454, 1450, 1446, 1442, 1438, 1434, 1430, 1426,
   1422, 1418, 1414, 1411, 1407, 1403, 1399, 1396, 1392, 1388, 1384, 1381, 1377, 1374, 1370, 1366,
   1363, 1359, 1356, 1352, 1349, 1345, 1342, 1338, 1335, 1332, 1328, 1325, 1322, 1318, 1315, 1312,
   1308, 1305, 1302, 1299, 1295, 1292, 1289, 1286, 1283, 1280, 1276, 1273, 1270, 1267, 1264, 1261,
   1258, 1255, 1252, 1249, 1246, 1243, 1240, 1237, 1234, 1231, 1228, 1226, 1223, 1220, 1217, 1214,
   1211, 1209, 1206, 1203, 1200, 1197, 1195, 1192, 1189, 1187, 1184, 1181, 1179, 1176, 1173, 1171,
   1168, 1165, 1163, 1160, 1158, 1155, 1153, 1150, 1148, 1145, 1143, 1140, 1138, 1135, 1133, 1130,
   1128, 1125, 1123, 1121, 1118, 1116, 1113, 1111, 1109, 1106, 1104, 1102, 1099, 1097, 1095, 1092,
   1090, 1088, 1086, 1083, 1081, 1079, 1077, 1074, 1072, 1070, 1068, 1066, 1064, 1061, 1059, 1057,
   1055, 1053, 1051, 1049, 1047, 1044, 1042, 1040, 1038, 1036, 1034, 1032, 1030, 1028, 1026, 1024
};
# 34 "/usr/include/flint/flint.h" 2 3 4
# 1 "/usr/include/flint/flint-config.h" 1 3 4
# 35 "/usr/include/flint/flint.h" 2 3 4
# 85 "/usr/include/flint/flint.h" 3 4
extern char flint_version[];




 void * flint_malloc(size_t size);
 void * flint_realloc(void * ptr, size_t size);
 void * flint_calloc(size_t num, size_t size);
 void flint_free(void * ptr);

typedef void (*flint_cleanup_function_t)(void);
 void flint_register_cleanup_function(flint_cleanup_function_t cleanup_function);
 void flint_cleanup(void);
 void flint_cleanup_master(void);

 void __flint_set_memory_functions(void *(*alloc_func) (size_t),
     void *(*calloc_func) (size_t, size_t), void *(*realloc_func) (void *, size_t),
                                                              void (*free_func) (void *));







 void flint_abort(void);
 void flint_set_abort( void (*func)(void));
# 173 "/usr/include/flint/flint.h" 3 4
 int flint_get_num_threads(void);
 void flint_set_num_threads(int num_threads);
 void _flint_set_num_workers(int num_workers);
 int flint_set_num_workers(int num_workers);
 void flint_reset_num_workers(int max_workers);
 int flint_set_thread_affinity(int * cpus, mp_limb_signed_t length);
 int flint_restore_thread_affinity();

int flint_test_multiplier(void);

typedef struct
{
    gmp_randstate_t gmp_state;
    int gmp_init;
    mp_limb_t __randval;
    mp_limb_t __randval2;
} flint_rand_s;

typedef flint_rand_s flint_rand_t[1];

static __inline__
void flint_randinit(flint_rand_t state)
{
   state->gmp_init = 0;

    state->__randval = (13845646450878251009UL);
    state->__randval2 = (13142370077570254774UL);




}

static __inline__
void flint_randseed(flint_rand_t state, mp_limb_t seed1, mp_limb_t seed2)
{
   state->__randval = seed1;
   state->__randval2 = seed2;
}

static __inline__
void flint_get_randseed(mp_limb_t * seed1, mp_limb_t * seed2, flint_rand_t state)
{
   *seed1 = state->__randval;
   *seed2 = state->__randval2;
}


static __inline__
void _flint_rand_init_gmp(flint_rand_t state)
{
    if (!state->gmp_init)
    {
        __gmp_randinit_default(state->gmp_state);
        state->gmp_init = 1;
    }
}

static __inline__
void flint_randclear(flint_rand_t state)
{
    if (state->gmp_init)
        __gmp_randclear(state->gmp_state);
}

static __inline__
flint_rand_s * flint_rand_alloc(void)
{
    return (flint_rand_s *) flint_malloc(sizeof(flint_rand_s));
}

static __inline__
void flint_rand_free(flint_rand_s * state)
{
    flint_free(state);
}
# 268 "/usr/include/flint/flint.h" 3 4
typedef __mpfr_struct flint_mpfr;
# 315 "/usr/include/flint/flint.h" 3 4
static __inline__
mp_limb_t FLINT_BIT_COUNT(mp_limb_t x)
{
   mp_limb_t zeros = 64;
   if (x) do { mp_limb_t __cbtmp; ; __asm__ ("bsrq %1,%0" : "=r" (__cbtmp) : "rm" ((mp_limb_t)(x))); (zeros) = __cbtmp ^ (mp_limb_t) 63; } while (0);
   return 64 - zeros;
}
# 403 "/usr/include/flint/flint.h" 3 4
static __inline__ void
mpn_tdiv_q(mp_ptr qp, mp_srcptr np, mp_size_t nn, mp_srcptr dp, mp_size_t dn)
{
    mp_ptr _scratch;
    typedef struct __tmp_struct { void * block; struct __tmp_struct * next; } __tmp_t; __tmp_t * __tmp_root; __tmp_t * __tpx;
    __tmp_root = ((void *)0);
    _scratch = (mp_ptr) (((dn * sizeof(mp_limb_t)) > 8192) ? (__tpx = (__tmp_t *) __builtin_alloca (sizeof(__tmp_t)), __tpx->next = __tmp_root, __tmp_root = __tpx, __tpx->block = flint_malloc(dn * sizeof(mp_limb_t))) : __builtin_alloca (dn * sizeof(mp_limb_t)));
    __gmpn_tdiv_qr(qp, _scratch, 0, np, nn, dp, dn);
    while (__tmp_root) { flint_free(__tmp_root->block); __tmp_root = __tmp_root->next; };
}
# 439 "/usr/include/flint/flint.h" 3 4
 int parse_fmt(int * floating, const char * fmt);

 int flint_printf(const char * str, ...);
 int flint_vprintf(const char * str, va_list ap);
 int flint_fprintf(FILE * f, const char * str, ...);
 int flint_sprintf(char * s, const char * str, ...);

 int flint_scanf(const char * str, ...);
 int flint_fscanf(FILE * f, const char * str, ...);
 int flint_sscanf(const char * s, const char * str, ...);

static __inline__ mp_limb_signed_t flint_mul_sizes(mp_limb_signed_t x, mp_limb_signed_t y)
{
    mp_limb_t hi, lo;

    __asm__ ("mulq %3" : "=a" (lo), "=d" (hi) : "%0" ((mp_limb_t)((mp_limb_t) x)), "rm" ((mp_limb_t)((mp_limb_t) y)));
    if (hi != 0 || lo > 0x7fffffffffffffffL)
    {
        flint_printf("Exception (flint). Overflow creating size %wd x %wd object.\n", x, y);
        flint_abort();
    }
    return lo;
}

# 1 "/usr/include/flint/gmpcompat.h" 1 3 4
# 14 "/usr/include/flint/gmpcompat.h" 3 4
# 1 "/usr/include/gmp.h" 1 3 4
# 15 "/usr/include/flint/gmpcompat.h" 2 3 4
# 464 "/usr/include/flint/flint.h" 2 3 4
# 1 "/usr/include/flint/exception.h" 1 3 4
# 15 "/usr/include/flint/exception.h" 3 4
typedef enum
{
   FLINT_ERROR,
   FLINT_IMPINV,
   FLINT_DOMERR,
   FLINT_DIVZERO,
   FLINT_EXPOF,
   FLINT_INEXACT
} flint_err_t;

 void flint_throw(flint_err_t exc, const char * msg, ...);
# 465 "/usr/include/flint/flint.h" 2 3 4
# 31 "/usr/include/flint/fmpz.h" 2 3 4
# 1 "/usr/include/flint/nmod_vec.h" 1 3 4
# 25 "/usr/include/flint/nmod_vec.h" 3 4
# 1 "/usr/include/gmp.h" 1 3 4
# 26 "/usr/include/flint/nmod_vec.h" 2 3 4



# 1 "/usr/include/flint/ulong_extras.h" 1 3 4
# 24 "/usr/include/flint/ulong_extras.h" 3 4
# 1 "/usr/include/gmp.h" 1 3 4
# 25 "/usr/include/flint/ulong_extras.h" 2 3 4






typedef struct pair_s
{
    mp_limb_t x, y;
} n_pair_t;



typedef struct {
   int num;
   int exp[15];
   mp_limb_t p[15];
} n_factor_t;
# 72 "/usr/include/flint/ulong_extras.h" 3 4
typedef struct
{
    mp_limb_signed_t small_i;
    mp_limb_signed_t small_num;
    unsigned int * small_primes;

    mp_limb_t sieve_a;
    mp_limb_t sieve_b;
    mp_limb_signed_t sieve_i;
    mp_limb_signed_t sieve_num;
    char * sieve;
}
n_primes_struct;

typedef n_primes_struct n_primes_t[1];

 void n_primes_init(n_primes_t iter);

 void n_primes_clear(n_primes_t iter);

 void n_primes_extend_small(n_primes_t iter, mp_limb_t bound);

 void n_primes_sieve_range(n_primes_t iter, mp_limb_t a, mp_limb_t b);

 void n_primes_jump_after(n_primes_t iter, mp_limb_t n);

static __inline__ mp_limb_t
n_primes_next(n_primes_t iter)
{
    if (iter->small_i < iter->small_num)
        return iter->small_primes[(iter->small_i)++];

    for (;;)
    {
        while (iter->sieve_i < iter->sieve_num)
            if (iter->sieve[iter->sieve_i++] != 0)
                return iter->sieve_a + 2 * (iter->sieve_i - 1);

        if (iter->sieve_b == 0)
            n_primes_jump_after(iter, iter->small_primes[iter->small_num-1]);
        else
            n_primes_jump_after(iter, iter->sieve_b);
    }
}

 extern const unsigned int flint_primes_small[];

extern __thread mp_limb_t * _flint_primes[64];
extern __thread double * _flint_prime_inverses[64];
extern __thread int _flint_primes_used;

 void n_compute_primes(mp_limb_t num_primes);

 void n_cleanup_primes(void);

 const mp_limb_t * n_primes_arr_readonly(mp_limb_t n);
 const double * n_prime_inverses_arr_readonly(mp_limb_t n);

 mp_limb_t n_randlimb(flint_rand_t state);

 mp_limb_t n_randint(flint_rand_t state, mp_limb_t limit);

 mp_limb_t n_urandint(flint_rand_t state, mp_limb_t limit);

 mp_limb_t n_randbits(flint_rand_t state, unsigned int bits);

 mp_limb_t n_randtest_bits(flint_rand_t state, int bits);

 mp_limb_t n_randtest(flint_rand_t state);

 mp_limb_t n_randtest_not_zero(flint_rand_t state);

 mp_limb_t n_randprime(flint_rand_t state, mp_limb_t bits, int proved);

 mp_limb_t n_randtest_prime(flint_rand_t state, int proved);

 mp_limb_t n_pow(mp_limb_t n, mp_limb_t exp);

 mp_limb_t n_flog(mp_limb_t n, mp_limb_t b);

 mp_limb_t n_clog(mp_limb_t n, mp_limb_t b);

static __inline__
double n_precompute_inverse(mp_limb_t n)
{
   return (double) 1 / (double) n;
}

static __inline__
mp_limb_t n_preinvert_limb(mp_limb_t n)
{
   mp_limb_t norm, ninv;

   do { mp_limb_t __cbtmp; ; __asm__ ("bsrq %1,%0" : "=r" (__cbtmp) : "rm" ((mp_limb_t)(n))); (norm) = __cbtmp ^ (mp_limb_t) 63; } while (0);
   do { mp_limb_t _v0, _v2, _d40, _e, _m0; ; _d40 = ((n << norm) >> 24) + 1; _v0 = rec_word_tab[((n << norm) >> 55) & 0xFF]; _v0 = (_v0 << 11) - ((_v0*_v0*_d40) >> 40) - 1; _v2 = ((_v0*((((mp_limb_t) 1) << 60) - _v0*_d40)) >> 47); _v2 += (_v0 << 13); _e = -_v2*((n << norm) >> 1); _m0 = -((n << norm) & (mp_limb_t) 1); _e -= ((_v2 - (_v2 >> 1)) & _m0); __asm__ ("mulq %3" : "=a" (_d40), "=d" (_v0) : "%0" ((mp_limb_t)(_v2)), "rm" ((mp_limb_t)(_e))); _v2 = (_v2 << 31) + (_v0 >> 1); __asm__ ("mulq %3" : "=a" (_d40), "=d" (_v0) : "%0" ((mp_limb_t)(_v2)), "rm" ((mp_limb_t)((n << norm)))); __asm__ ("addq %5,%q1\n\tadcq %3,%q0" : "=r" (_v0), "=&r" (_d40) : "0" ((mp_limb_t)(_v0)), "rme" ((mp_limb_t)((mp_limb_t) 0)), "%1" ((mp_limb_t)(_d40)), "rme" ((mp_limb_t)((n << norm)))); (ninv) = _v2 - (_v0 + (n << norm)); } while (0);

   return ninv;
}

 mp_limb_t n_mod_precomp(mp_limb_t a, mp_limb_t n, double ninv);

 mp_limb_t n_mod2_precomp(mp_limb_t a, mp_limb_t n, double ninv);

 mp_limb_t n_divrem2_precomp(mp_limb_t * q, mp_limb_t a,
                                           mp_limb_t n, double npre);

 mp_limb_t n_divrem2_preinv(mp_limb_t * q, mp_limb_t a, mp_limb_t n, mp_limb_t ninv);

 mp_limb_t n_div2_preinv(mp_limb_t a, mp_limb_t n, mp_limb_t ninv);

 mp_limb_t n_mod2_preinv(mp_limb_t a, mp_limb_t n, mp_limb_t ninv);

 mp_limb_t n_ll_mod_preinv(mp_limb_t a_hi, mp_limb_t a_lo,
                                        mp_limb_t n, mp_limb_t ninv);

 mp_limb_t n_lll_mod_preinv(mp_limb_t a_hi, mp_limb_t a_mi,
                        mp_limb_t a_lo, mp_limb_t n, mp_limb_t ninv);

 mp_limb_t n_mulmod_precomp(mp_limb_t a, mp_limb_t b,
                                           mp_limb_t n, double ninv);

static __inline__
mp_limb_t n_mulmod2_preinv(mp_limb_t a, mp_limb_t b, mp_limb_t n, mp_limb_t ninv)
{
    mp_limb_t p1, p2;

    ;

    __asm__ ("mulq %3" : "=a" (p2), "=d" (p1) : "%0" ((mp_limb_t)(a)), "rm" ((mp_limb_t)(b)));
    return n_ll_mod_preinv(p1, p2, n, ninv);
}

static __inline__
mp_limb_t n_mulmod2(mp_limb_t a, mp_limb_t b, mp_limb_t n)
{
    mp_limb_t p1, p2, ninv;

    ;

    ninv = n_preinvert_limb(n);
    __asm__ ("mulq %3" : "=a" (p2), "=d" (p1) : "%0" ((mp_limb_t)(a)), "rm" ((mp_limb_t)(b)));
    return n_ll_mod_preinv(p1, p2, n, ninv);
}

 mp_limb_t n_mulmod_preinv(mp_limb_t a, mp_limb_t b,
                            mp_limb_t n, mp_limb_t ninv, mp_limb_t norm);

 mp_limb_t n_powmod_ui_precomp(mp_limb_t a, mp_limb_t exp, mp_limb_t n, double npre);

 mp_limb_t n_powmod_precomp(mp_limb_t a, mp_limb_signed_t exp, mp_limb_t n, double npre);

static __inline__
mp_limb_t n_powmod(mp_limb_t a, mp_limb_signed_t exp, mp_limb_t n)
{
   double npre = n_precompute_inverse(n);

   return n_powmod_precomp(a, exp, n, npre);
}







 mp_limb_t n_powmod2_preinv(mp_limb_t a, mp_limb_signed_t exp, mp_limb_t n, mp_limb_t ninv);

 mp_limb_t n_powmod2_ui_preinv(mp_limb_t a, mp_limb_t exp, mp_limb_t n, mp_limb_t ninv);

 mp_limb_t n_powmod_ui_preinv(mp_limb_t a, mp_limb_t exp, mp_limb_t n,
                                                       mp_limb_t ninv, mp_limb_t norm);

static __inline__
mp_limb_t n_powmod2(mp_limb_t a, mp_limb_signed_t exp, mp_limb_t n)
{
   mp_limb_t ninv;

   ;

   ninv = n_preinvert_limb(n);

   return n_powmod2_preinv(a, exp, n, ninv);
}

static __inline__
mp_limb_t n_addmod(mp_limb_t x, mp_limb_t y, mp_limb_t n)
{
    ;
    ;
    ;

    return (n - y > x ? x + y : x + y - n);
}

static __inline__
mp_limb_t n_submod(mp_limb_t x, mp_limb_t y, mp_limb_t n)
{
    ;
    ;
    ;

    return (y > x ? x - y + n : x - y);
}

static __inline__
mp_limb_t n_negmod(mp_limb_t x, mp_limb_t n)
{
    ;
    ;

    return n_submod(0, x, n);
}

 mp_limb_t n_sqrtmod(mp_limb_t a, mp_limb_t p);

 mp_limb_signed_t n_sqrtmod_2pow(mp_limb_t ** sqrt, mp_limb_t a, mp_limb_signed_t exp);

 mp_limb_signed_t n_sqrtmod_primepow(mp_limb_t ** sqrt, mp_limb_t a,
                                              mp_limb_t p, mp_limb_signed_t exp);

 mp_limb_signed_t n_sqrtmodn(mp_limb_t ** sqrt, mp_limb_t a, n_factor_t * fac);

 mp_limb_t n_gcd(mp_limb_t x, mp_limb_t y);



 mp_limb_t n_xgcd(mp_limb_t * a, mp_limb_t * b, mp_limb_t x, mp_limb_t y);

 mp_limb_t n_gcdinv(mp_limb_t * a, mp_limb_t x, mp_limb_t y);

static __inline__
mp_limb_t n_invmod(mp_limb_t x, mp_limb_t y)
{
   mp_limb_t r, g;

   g = n_gcdinv(&r, x, y);
   if (g != 1)
      flint_throw(FLINT_IMPINV, "Cannot invert modulo %wd*%wd\n", g, g/y);

   return r;
}

 mp_limb_t n_CRT(mp_limb_t r1, mp_limb_t m1, mp_limb_t r2, mp_limb_t m2);

 mp_limb_t n_revbin(mp_limb_t in, mp_limb_t bits);

 int n_jacobi(mp_limb_signed_t x, mp_limb_t y);

 int n_jacobi_unsigned(mp_limb_t x, mp_limb_t y);

 mp_limb_t n_sqrt(mp_limb_t a);

 mp_limb_t n_sqrtrem(mp_limb_t * r, mp_limb_t a);

 int n_is_square(mp_limb_t x);

 double n_cbrt_estimate(double a);

 mp_limb_t n_cbrt(mp_limb_t a);

 mp_limb_t n_cbrt_binary_search(mp_limb_t x);

 mp_limb_t n_cbrt_newton_iteration(mp_limb_t n);

 mp_limb_t n_cbrt_chebyshev_approx(mp_limb_t n);

 mp_limb_t n_cbrtrem(mp_limb_t* remainder, mp_limb_t n);

 int n_is_perfect_power235(mp_limb_t n);

 int n_is_perfect_power(mp_limb_t * root, mp_limb_t n);

 int n_is_oddprime_small(mp_limb_t n);

 int n_is_oddprime_binary(mp_limb_t n);

 int n_is_probabprime_fermat(mp_limb_t n, mp_limb_t i);

 int n_is_probabprime_fibonacci(mp_limb_t n);

 int n_is_probabprime_lucas(mp_limb_t n);

 int n_is_probabprime_BPSW(mp_limb_t n);

 int n_is_strong_probabprime_precomp(mp_limb_t n,
                              double npre, mp_limb_t a, mp_limb_t d);

 int n_is_strong_probabprime2_preinv(mp_limb_t n,
                           mp_limb_t ninv, mp_limb_t a, mp_limb_t d);

 int n_is_probabprime(mp_limb_t n);

 int n_is_prime_pseudosquare(mp_limb_t n);

 int n_is_prime_pocklington(mp_limb_t n, mp_limb_t iterations);

 int n_is_prime(mp_limb_t n);

 mp_limb_t n_nth_prime(mp_limb_t n);

 void n_nth_prime_bounds(mp_limb_t *lo, mp_limb_t *hi, mp_limb_t n);

 mp_limb_t n_prime_pi(mp_limb_t n);

 void n_prime_pi_bounds(mp_limb_t *lo, mp_limb_t *hi, mp_limb_t n);

 int n_remove(mp_limb_t * n, mp_limb_t p);

 int n_remove2_precomp(mp_limb_t * n, mp_limb_t p, double ppre);

static __inline__
void n_factor_init(n_factor_t * factors)
{
    factors->num = (0UL);
}

 void n_factor_insert(n_factor_t * factors, mp_limb_t p, mp_limb_t exp);

 mp_limb_t n_factor_trial_range(n_factor_t * factors,
                         mp_limb_t n, mp_limb_t start, mp_limb_t num_primes);

 mp_limb_t n_factor_trial_partial(n_factor_t * factors, mp_limb_t n,
                mp_limb_t * prod, mp_limb_t num_primes, mp_limb_t limit);

 mp_limb_t n_factor_trial(n_factor_t * factors,
                                  mp_limb_t n, mp_limb_t num_primes);

 mp_limb_t n_factor_partial(n_factor_t * factors,
                           mp_limb_t n, mp_limb_t limit, int proved);

 mp_limb_t n_factor_power235(mp_limb_t *exp, mp_limb_t n);

 mp_limb_t n_factor_one_line(mp_limb_t n, mp_limb_t iters);

 mp_limb_t n_factor_lehman(mp_limb_t n);

 mp_limb_t n_factor_SQUFOF(mp_limb_t n, mp_limb_t iters);

 void n_factor(n_factor_t * factors, mp_limb_t n, int proved);

 mp_limb_t n_factor_pp1(mp_limb_t n, mp_limb_t B1, mp_limb_t c);

 mp_limb_t n_factor_pp1_wrapper(mp_limb_t n);

 void n_factor_pp1_table_insert(mp_limb_signed_t bits, mp_limb_signed_t B1, mp_limb_signed_t count);

 int n_factor_pollard_brent_single(mp_limb_t *factor, mp_limb_t n,
                                            mp_limb_t ninv, mp_limb_t ai,
                                            mp_limb_t xi, mp_limb_t normbits,
                                            mp_limb_t max_iters);

 int n_factor_pollard_brent(mp_limb_t *factor, flint_rand_t state,
                                     mp_limb_t n_in, mp_limb_t max_tries,
                                     mp_limb_t max_iters);

 int n_is_squarefree(mp_limb_t n);

 int n_moebius_mu(mp_limb_t n);

 void n_moebius_mu_vec(int * mu, mp_limb_t len);

 mp_limb_t n_euler_phi(mp_limb_t n);

 int n_sizeinbase(mp_limb_t n, int base);

 mp_limb_t n_nextprime(mp_limb_t n, int proved);

 mp_limb_t n_factorial_mod2_preinv(mp_limb_t n, mp_limb_t p, mp_limb_t pinv);

 mp_limb_t n_factorial_fast_mod2_preinv(mp_limb_t n, mp_limb_t p, mp_limb_t pinv);

 mp_limb_t n_primitive_root_prime_prefactor(mp_limb_t p, n_factor_t * factors);

 mp_limb_t n_primitive_root_prime(mp_limb_t p);

 mp_limb_t n_discrete_log_bsgs(mp_limb_t b, mp_limb_t a, mp_limb_t n);

 mp_limb_t n_root_estimate(double a, int n);

 mp_limb_t n_rootrem(mp_limb_t* remainder, mp_limb_t n, mp_limb_t root);

 mp_limb_t n_root(mp_limb_t n, mp_limb_t root);



typedef struct n_ecm_s {

    mp_limb_t x, z;
    mp_limb_t a24;
    mp_limb_t ninv;
    mp_limb_t normbits;
    mp_limb_t one;

    unsigned char *GCD_table;


    unsigned char **prime_table;

} n_ecm_s;

typedef n_ecm_s n_ecm_t[1];

 void n_factor_ecm_double(mp_limb_t *x, mp_limb_t *z, mp_limb_t x0,
                                   mp_limb_t z0, mp_limb_t n, n_ecm_t n_ecm_inf);

 void n_factor_ecm_add(mp_limb_t *x, mp_limb_t *z, mp_limb_t x1,
                                mp_limb_t z1, mp_limb_t x2, mp_limb_t z2,
                                mp_limb_t x0, mp_limb_t z0, mp_limb_t n,
                                n_ecm_t n_ecm_inf);

 void n_factor_ecm_mul_montgomery_ladder(mp_limb_t *x, mp_limb_t *z,
                                                  mp_limb_t x0, mp_limb_t z0,
                                                  mp_limb_t k, mp_limb_t n,
                                                  n_ecm_t n_ecm_inf);

 int n_factor_ecm_select_curve(mp_limb_t *f, mp_limb_t sig, mp_limb_t n,
                                        n_ecm_t n_ecm_inf);

 int n_factor_ecm_stage_I(mp_limb_t *f, const mp_limb_t *prime_array,
                                   mp_limb_t num, mp_limb_t B1, mp_limb_t n,
                                   n_ecm_t n_ecm_inf);

 int n_factor_ecm_stage_II(mp_limb_t *f, mp_limb_t B1, mp_limb_t B2,
                                    mp_limb_t P, mp_limb_t n, n_ecm_t n_ecm_inf);

 int n_factor_ecm(mp_limb_t *f, mp_limb_t curves, mp_limb_t B1,
                           mp_limb_t B2, flint_rand_t state, mp_limb_t n);

 mp_limb_t n_mulmod_precomp_shoup(mp_limb_t w, mp_limb_t p);

static __inline__ mp_limb_t
n_mulmod_shoup(mp_limb_t w, mp_limb_t t, mp_limb_t w_precomp, mp_limb_t p)
{
   mp_limb_t q, r, p_hi, p_lo;

   __asm__ ("mulq %3" : "=a" (p_lo), "=d" (p_hi) : "%0" ((mp_limb_t)(w_precomp)), "rm" ((mp_limb_t)(t)));
   q = p_hi;


   r = w * t;
   r -= q * p;

   if (r >= p)
   {
      r -= p;
   }

    return r;
}
# 30 "/usr/include/flint/nmod_vec.h" 2 3 4






typedef struct
{
   mp_limb_t n;
   mp_limb_t ninv;
   mp_limb_t norm;
} nmod_t;
# 91 "/usr/include/flint/nmod_vec.h" 3 4
static __inline__
mp_limb_t _nmod_add(mp_limb_t a, mp_limb_t b, nmod_t mod)
{
   const mp_limb_t sum = a + b;
   return sum - mod.n + ((((mp_limb_signed_t)(sum - mod.n))>>(64 - 1)) & mod.n);
}

static __inline__
mp_limb_t _nmod_sub(mp_limb_t a, mp_limb_t b, nmod_t mod)
{
   const mp_limb_t diff = a - b;
   return ((((mp_limb_signed_t)diff)>>(64 - 1)) & mod.n) + diff;
}

static __inline__
mp_limb_t nmod_add(mp_limb_t a, mp_limb_t b, nmod_t mod)
{
   const mp_limb_t neg = mod.n - a;
   if (neg > b)
      return a + b;
   else
      return b - neg;
}

static __inline__
mp_limb_t nmod_sub(mp_limb_t a, mp_limb_t b, nmod_t mod)
{
   const mp_limb_t diff = a - b;

   if (a < b)
      return mod.n + diff;
   else
      return diff;
}

static __inline__
mp_limb_t nmod_neg(mp_limb_t a, nmod_t mod)
{
   if (a)
      return mod.n - a;
   else
      return 0;
}

static __inline__
mp_limb_t nmod_mul(mp_limb_t a, mp_limb_t b, nmod_t mod)
{
    return n_mulmod2_preinv(a, b, mod.n, mod.ninv);
}

static __inline__
mp_limb_t nmod_inv(mp_limb_t a, nmod_t mod)
{
    return n_invmod(a, mod.n);
}

static __inline__
mp_limb_t nmod_div(mp_limb_t a, mp_limb_t b, nmod_t mod)
{
    b = n_invmod(b, mod.n);
    return n_mulmod2_preinv(a, b, mod.n, mod.ninv);
}

static __inline__
mp_limb_t nmod_pow_ui(mp_limb_t a, mp_limb_t exp, nmod_t mod)
{
    return n_powmod2_ui_preinv(a, exp, mod.n, mod.ninv);
}






static __inline__
void nmod_init(nmod_t * mod, mp_limb_t n)
{
   mod->n = n;
   mod->ninv = n_preinvert_limb(n);
   do { mp_limb_t __cbtmp; ; __asm__ ("bsrq %1,%0" : "=r" (__cbtmp) : "rm" ((mp_limb_t)(n))); (mod->norm) = __cbtmp ^ (mp_limb_t) 63; } while (0);
}

static __inline__
mp_ptr _nmod_vec_init(mp_limb_signed_t len)
{
   return (mp_ptr) flint_malloc(len * sizeof(mp_limb_t));
}

static __inline__
void _nmod_vec_clear(mp_ptr vec)
{
   flint_free(vec);
}

 void _nmod_vec_randtest(mp_ptr vec, flint_rand_t state, mp_limb_signed_t len, nmod_t mod);

static __inline__
void _nmod_vec_zero(mp_ptr vec, mp_limb_signed_t len)
{
   do { mp_limb_signed_t ixxx; for (ixxx = 0; ixxx < (len); ixxx++) (vec)[ixxx] = (0UL); } while (0);
}

 mp_limb_t _nmod_vec_max_bits(mp_srcptr vec, mp_limb_signed_t len);

static __inline__
void _nmod_vec_set(mp_ptr res, mp_srcptr vec, mp_limb_signed_t len)
{
   do { mp_limb_signed_t ixxx; for (ixxx = 0; ixxx < (len); ixxx++) (res)[ixxx] = (vec)[ixxx]; } while (0);
}

static __inline__
void _nmod_vec_swap(mp_ptr a, mp_ptr b, mp_limb_signed_t length)
{
    mp_limb_signed_t i;
    for (i = 0; i < length; i++)
    {
        mp_limb_t t = a[i];
        a[i] = b[i];
        b[i] = t;
    }
}

static __inline__
int _nmod_vec_equal(mp_srcptr vec, mp_srcptr vec2, mp_limb_signed_t len)
{
   mp_limb_signed_t i;

   for (i = 0; i < len; i++)
      if (vec[i] != vec2[i]) return 0;

   return 1;
}

static __inline__
int _nmod_vec_is_zero(mp_srcptr vec, mp_limb_signed_t len)
{
   mp_limb_signed_t i;

   for (i = 0; i < len; i++)
      if (vec[i] != 0) return 0;

   return 1;
}

 void _nmod_vec_reduce(mp_ptr res, mp_srcptr vec,
                                        mp_limb_signed_t len, nmod_t mod);

 void _nmod_vec_add(mp_ptr res, mp_srcptr vec1,
                        mp_srcptr vec2, mp_limb_signed_t len, nmod_t mod);

 void _nmod_vec_sub(mp_ptr res, mp_srcptr vec1,
                        mp_srcptr vec2, mp_limb_signed_t len, nmod_t mod);

 void _nmod_vec_neg(mp_ptr res, mp_srcptr vec,
                                            mp_limb_signed_t len, nmod_t mod);

 void _nmod_vec_scalar_mul_nmod(mp_ptr res, mp_srcptr vec,
                            mp_limb_signed_t len, mp_limb_t c, nmod_t mod);

 void _nmod_vec_scalar_mul_nmod_shoup(mp_ptr res, mp_srcptr vec,
                            mp_limb_signed_t len, mp_limb_t c, nmod_t mod);

 void _nmod_vec_scalar_addmul_nmod(mp_ptr res, mp_srcptr vec,
                            mp_limb_signed_t len, mp_limb_t c, nmod_t mod);

 int _nmod_vec_dot_bound_limbs(mp_limb_signed_t len, nmod_t mod);
# 323 "/usr/include/flint/nmod_vec.h" 3 4
 mp_limb_t _nmod_vec_dot(mp_srcptr vec1, mp_srcptr vec2,
    mp_limb_signed_t len, nmod_t mod, int nlimbs);

 mp_limb_t _nmod_vec_dot_ptr(mp_srcptr vec1, const mp_ptr * vec2, mp_limb_signed_t offset,
    mp_limb_signed_t len, nmod_t mod, int nlimbs);




typedef struct {
    mp_limb_t gammapow;
    mp_limb_t cm;
} nmod_discrete_log_pohlig_hellman_table_entry_struct;

typedef struct {
    mp_limb_signed_t exp;
    mp_limb_t prime;
    mp_limb_t gamma;
    mp_limb_t gammainv;
    mp_limb_t startingbeta;
    mp_limb_t co;
    mp_limb_t startinge;
    mp_limb_t idem;
    mp_limb_t cbound;
    mp_limb_t dbound;
    nmod_discrete_log_pohlig_hellman_table_entry_struct * table;
} nmod_discrete_log_pohlig_hellman_entry_struct;

typedef struct {
    nmod_t mod;
    mp_limb_t alpha;
    mp_limb_t alphainv;
    mp_limb_signed_t num_factors;
    nmod_discrete_log_pohlig_hellman_entry_struct * entries;
} nmod_discrete_log_pohlig_hellman_struct;

typedef nmod_discrete_log_pohlig_hellman_struct nmod_discrete_log_pohlig_hellman_t[1];

 void nmod_discrete_log_pohlig_hellman_init(
                nmod_discrete_log_pohlig_hellman_t L);

 void nmod_discrete_log_pohlig_hellman_clear(
                nmod_discrete_log_pohlig_hellman_t L);

 double nmod_discrete_log_pohlig_hellman_precompute_prime(
                nmod_discrete_log_pohlig_hellman_t L,
                mp_limb_t p);

 mp_limb_t nmod_discrete_log_pohlig_hellman_run(
                const nmod_discrete_log_pohlig_hellman_t L,
                mp_limb_t y);

static __inline__ mp_limb_t nmod_discrete_log_pohlig_hellman_primitive_root(
                const nmod_discrete_log_pohlig_hellman_t L)
{
    return L->alpha;
}
# 32 "/usr/include/flint/fmpz.h" 2 3 4
# 1 "/usr/include/flint/fmpz-conversions.h" 1 3 4
# 33 "/usr/include/flint/fmpz.h" 2 3 4


# 1 "/usr/include/pthread.h" 1 3 4
# 22 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/sched.h" 1 3 4
# 29 "/usr/include/sched.h" 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/10/include/stddef.h" 1 3 4
# 30 "/usr/include/sched.h" 2 3 4


# 1 "/usr/include/bits/types/struct_timespec.h" 1 3 4
# 10 "/usr/include/bits/types/struct_timespec.h" 3 4
struct timespec
{
  __time_t tv_sec;



  __syscall_slong_t tv_nsec;
# 26 "/usr/include/bits/types/struct_timespec.h" 3 4
};
# 33 "/usr/include/sched.h" 2 3 4

# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
# 1 "/usr/lib/gcc/x86_64-redhat-linux/10/include/stddef.h" 1 3 4
# 30 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/bits/time.h" 1 3 4
# 34 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 38 "/usr/include/time.h" 2 3 4

# 1 "/usr/include/bits/types/struct_tm.h" 1 3 4






struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;





  long int __tm_gmtoff;
  const char *__tm_zone;

};
# 40 "/usr/include/time.h" 2 3 4
# 68 "/usr/include/time.h" 3 4




extern clock_t clock (void) ;


extern time_t time (time_t *__timer) ;


extern double difftime (time_t __time1, time_t __time0)
     ;


extern time_t mktime (struct tm *__tp) ;





extern size_t strftime (char * __s, size_t __maxsize,
   const char * __format,
   const struct tm * __tp) ;
# 119 "/usr/include/time.h" 3 4
extern struct tm *gmtime (const time_t *__timer) ;



extern struct tm *localtime (const time_t *__timer) ;
# 139 "/usr/include/time.h" 3 4
extern char *asctime (const struct tm *__tp) ;


extern char *ctime (const time_t *__timer) ;
# 159 "/usr/include/time.h" 3 4
extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;
# 301 "/usr/include/time.h" 3 4

# 35 "/usr/include/sched.h" 2 3 4
# 43 "/usr/include/sched.h" 3 4
# 1 "/usr/include/bits/sched.h" 1 3 4
# 76 "/usr/include/bits/sched.h" 3 4
# 1 "/usr/include/bits/types/struct_sched_param.h" 1 3 4
# 23 "/usr/include/bits/types/struct_sched_param.h" 3 4
struct sched_param
{
  int sched_priority;
};
# 77 "/usr/include/bits/sched.h" 2 3 4


# 98 "/usr/include/bits/sched.h" 3 4

# 44 "/usr/include/sched.h" 2 3 4
# 1 "/usr/include/bits/cpu-set.h" 1 3 4
# 32 "/usr/include/bits/cpu-set.h" 3 4
typedef unsigned long int __cpu_mask;






typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
# 115 "/usr/include/bits/cpu-set.h" 3 4


extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
     ;
extern cpu_set_t *__sched_cpualloc (size_t __count) ;
extern void __sched_cpufree (cpu_set_t *__set) ;


# 45 "/usr/include/sched.h" 2 3 4









extern int sched_setparam (__pid_t __pid, const struct sched_param *__param)
     ;


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) ;


extern int sched_setscheduler (__pid_t __pid, int __policy,
          const struct sched_param *__param) ;


extern int sched_getscheduler (__pid_t __pid) ;


extern int sched_yield (void) ;


extern int sched_get_priority_max (int __algorithm) ;


extern int sched_get_priority_min (int __algorithm) ;


extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) ;
# 129 "/usr/include/sched.h" 3 4

# 23 "/usr/include/pthread.h" 2 3 4



# 1 "/usr/include/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/bits/thread-shared-types.h" 1 3 4
# 44 "/usr/include/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 22 "/usr/include/bits/pthreadtypes-arch.h" 2 3 4
# 45 "/usr/include/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;

typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;
# 74 "/usr/include/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/bits/struct_mutex.h" 1 3 4
# 22 "/usr/include/bits/struct_mutex.h" 3 4
struct __pthread_mutex_s
{
  int __lock;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;



  int __kind;

  short __spins;
  short __elision;
  __pthread_list_t __list;
# 53 "/usr/include/bits/struct_mutex.h" 3 4
};
# 75 "/usr/include/bits/thread-shared-types.h" 2 3 4
# 87 "/usr/include/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/bits/struct_rwlock.h" 1 3 4
# 23 "/usr/include/bits/struct_rwlock.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 55 "/usr/include/bits/struct_rwlock.h" 3 4
};
# 88 "/usr/include/bits/thread-shared-types.h" 2 3 4




struct __pthread_cond_s
{
  union
  {
    unsigned long long int __wseq;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __wseq32;
  };
  union
  {
    unsigned long long int __g1_start;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __g1_start32;
  };
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};

typedef unsigned int __tss_t;
typedef unsigned long int __thrd_t;

typedef struct
{
  int __data ;
} __once_flag;
# 24 "/usr/include/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  long long int __align;
} pthread_cond_t;
# 27 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/bits/setjmp.h" 1 3 4
# 26 "/usr/include/bits/setjmp.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 27 "/usr/include/bits/setjmp.h" 2 3 4




typedef long int __jmp_buf[8];
# 28 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 29 "/usr/include/pthread.h" 2 3 4

# 1 "/usr/include/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 31 "/usr/include/pthread.h" 2 3 4



enum
{
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP
# 61 "/usr/include/pthread.h" 3 4
};
# 121 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};



enum
{
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};



enum
{
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 156 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum
{
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 194 "/usr/include/pthread.h" 3 4





extern int pthread_create (pthread_t * __newthread,
      const pthread_attr_t * __attr,
      void *(*__start_routine) (void *),
      void * __arg) ;





extern void pthread_exit (void *__retval) ;







extern int pthread_join (pthread_t __th, void **__thread_return);
# 248 "/usr/include/pthread.h" 3 4
extern int pthread_detach (pthread_t __th) ;



extern pthread_t pthread_self (void) ;


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2)
  ;







extern int pthread_attr_init (pthread_attr_t *__attr) ;


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     ;


extern int pthread_attr_getdetachstate (const pthread_attr_t *__attr,
     int *__detachstate)
     ;


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     ;



extern int pthread_attr_getguardsize (const pthread_attr_t *__attr,
          size_t *__guardsize)
     ;


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     ;



extern int pthread_attr_getschedparam (const pthread_attr_t * __attr,
           struct sched_param * __param)
     ;


extern int pthread_attr_setschedparam (pthread_attr_t * __attr,
           const struct sched_param *
           __param) ;


extern int pthread_attr_getschedpolicy (const pthread_attr_t *
     __attr, int * __policy)
     ;


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     ;


extern int pthread_attr_getinheritsched (const pthread_attr_t *
      __attr, int * __inherit)
     ;


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     ;



extern int pthread_attr_getscope (const pthread_attr_t * __attr,
      int * __scope)
     ;


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     ;


extern int pthread_attr_getstackaddr (const pthread_attr_t *
          __attr, void ** __stackaddr)
     ;





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     ;


extern int pthread_attr_getstacksize (const pthread_attr_t *
          __attr, size_t * __stacksize)
     ;




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     ;
# 420 "/usr/include/pthread.h" 3 4
extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      const struct sched_param *__param)
     ;


extern int pthread_getschedparam (pthread_t __target_thread,
      int * __policy,
      struct sched_param * __param)
     ;


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     ;
# 485 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) ;
# 497 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




typedef struct
{
  struct
  {
    __jmp_buf __cancel_jmp_buf;
    int __mask_was_saved;
  } __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t ;
# 531 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};
# 671 "/usr/include/pthread.h" 3 4
extern void __pthread_register_cancel (__pthread_unwind_buf_t *__buf)
     ;
# 683 "/usr/include/pthread.h" 3 4
extern void __pthread_unregister_cancel (__pthread_unwind_buf_t *__buf)
  ;
# 724 "/usr/include/pthread.h" 3 4
extern void __pthread_unwind_next (__pthread_unwind_buf_t *__buf)
    

    

     ;



struct __jmp_buf_tag;
extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask) ;





extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          const pthread_mutexattr_t *__mutexattr)
     ;


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     ;


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     ;


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     ;
# 771 "/usr/include/pthread.h" 3 4
extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     ;



extern int pthread_mutex_getprioceiling (const pthread_mutex_t *
      __mutex,
      int * __prioceiling)
     ;



extern int pthread_mutex_setprioceiling (pthread_mutex_t * __mutex,
      int __prioceiling,
      int * __old_ceiling)
     ;
# 804 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     ;


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     ;


extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *
      __attr,
      int * __pshared)
     ;


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     ;
# 836 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *
       __attr,
       int * __protocol)
     ;



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     ;


extern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *
          __attr,
          int * __prioceiling)
     ;


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     ;
# 980 "/usr/include/pthread.h" 3 4
extern int pthread_cond_init (pthread_cond_t * __cond,
         const pthread_condattr_t * __cond_attr)
     ;


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     ;


extern int pthread_cond_signal (pthread_cond_t *__cond)
     ;


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     ;






extern int pthread_cond_wait (pthread_cond_t * __cond,
         pthread_mutex_t * __mutex)
     ;
# 1012 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t * __cond,
       pthread_mutex_t * __mutex,
       const struct timespec * __abstime)
     ;
# 1035 "/usr/include/pthread.h" 3 4
extern int pthread_condattr_init (pthread_condattr_t *__attr)
     ;


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     ;


extern int pthread_condattr_getpshared (const pthread_condattr_t *
     __attr,
     int * __pshared)
     ;


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
     int __pshared) ;
# 1138 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     ;


extern int pthread_key_delete (pthread_key_t __key) ;


extern void *pthread_getspecific (pthread_key_t __key) ;


extern int pthread_setspecific (pthread_key_t __key,
    const void *__pointer) ;
# 1172 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) ;
# 1186 "/usr/include/pthread.h" 3 4

# 36 "/usr/include/flint/fmpz.h" 2 3 4






typedef mp_limb_signed_t fmpz;
typedef fmpz fmpz_t[1];

typedef gmp_randstate_t fmpz_randstate_t;

extern __mpz_struct * fmpz_arr;
extern gmp_randstate_t fmpz_randstate;

typedef struct
{
   mp_ptr dinv;
   mp_limb_signed_t n;
   mp_limb_t norm;
} fmpz_preinvn_struct;

typedef fmpz_preinvn_struct fmpz_preinvn_t[1];

typedef struct
{
   int count;

   pthread_t thread;

   void * address;
} fmpz_block_header_s;
# 76 "/usr/include/flint/fmpz.h" 3 4
 __mpz_struct * _fmpz_new_mpz(void);

 void _fmpz_clear_mpz(fmpz f);

 void _fmpz_cleanup_mpz_content(void);

 void _fmpz_cleanup(void);

 __mpz_struct * _fmpz_promote(fmpz_t f);

 __mpz_struct * _fmpz_promote_val(fmpz_t f);

static __inline__
void _fmpz_demote(fmpz_t f)
{




    if ((((*f) >> (64 - 2)) == (1L)))
    {
        _fmpz_clear_mpz(*f);
        (*f) = (0L);
    }
}

 void _fmpz_demote_val(fmpz_t f);

 void _fmpz_init_readonly_mpz(fmpz_t f, const mpz_t z);

 void _fmpz_clear_readonly_mpz(mpz_t);

static __inline__
void fmpz_init(fmpz_t f)
{
 (*f) = (0L);
}

 void fmpz_init2(fmpz_t f, mp_limb_t limbs);

static __inline__
void fmpz_init_set(fmpz_t f, const fmpz_t g)
{
    if (!(((*g) >> (64 - 2)) == (1L)))
    {
        *f = *g;
    }
    else
    {
        __mpz_struct *ptr;

        ptr = _fmpz_new_mpz();
        *f = (((mp_limb_t) (ptr) >> 2) | ((1L) << (64 - 2)));
        __gmpz_set(ptr, ((__mpz_struct *) ((*g) << 2)));
    }
}

static __inline__
void fmpz_init_set_ui(fmpz_t f, mp_limb_t g)
{
    if (g <= (((1L) << (64 - 2)) - (1L)))
    {
        *f = g;
    }
    else
    {
        __mpz_struct *ptr;

        ptr = _fmpz_new_mpz();
        *f = (((mp_limb_t) (ptr) >> 2) | ((1L) << (64 - 2)));
        __gmpz_set_ui(ptr, g);
    }
}

static __inline__
void fmpz_init_set_si(fmpz_t f, mp_limb_signed_t g)
{
    if ((-(((1L) << (64 - 2)) - (1L))) <= g && g <= (((1L) << (64 - 2)) - (1L)))
    {
        *f = g;
    }
    else
    {
        __mpz_struct *ptr;

        ptr = _fmpz_new_mpz();
        *f = (((mp_limb_t) (ptr) >> 2) | ((1L) << (64 - 2)));
        __gmpz_set_si(ptr, g);
    }
}

static __inline__
void fmpz_clear(fmpz_t f)
{
    if ((((*f) >> (64 - 2)) == (1L)))
        _fmpz_clear_mpz(*f);
}

 void fmpz_randbits(fmpz_t f, flint_rand_t state, mp_limb_t bits);

 void fmpz_randm(fmpz_t f, flint_rand_t state, const fmpz_t m);

 void fmpz_randtest(fmpz_t f, flint_rand_t state, mp_limb_t bits);

 void fmpz_randtest_unsigned(fmpz_t f, flint_rand_t state, mp_limb_t bits);

 void fmpz_randtest_not_zero(fmpz_t f, flint_rand_t state, mp_limb_t bits);

 void fmpz_randtest_mod(fmpz_t f, flint_rand_t state, const fmpz_t m);

 void fmpz_randtest_mod_signed(fmpz_t f, flint_rand_t state, const fmpz_t m);

 void fmpz_randprime(fmpz_t f, flint_rand_t state,
                              mp_limb_t bits, int proved);

 mp_limb_signed_t fmpz_get_si(const fmpz_t f);

 mp_limb_t fmpz_get_ui(const fmpz_t f);

static __inline__ void
fmpz_get_uiui(mp_limb_t * hi, mp_limb_t * low, const fmpz_t f)
{
    if (!(((*f) >> (64 - 2)) == (1L)))
    {
        *low = *f;
        *hi = 0;
    }
    else
    {
        __mpz_struct * mpz = ((__mpz_struct *) ((*f) << 2));
        *low = mpz->_mp_d[0];
        *hi = mpz->_mp_size == 2 ? mpz->_mp_d[1] : 0;
    }
}

static __inline__ void
fmpz_set_si(fmpz_t f, mp_limb_signed_t val)
{
    if (val < (-(((1L) << (64 - 2)) - (1L))) || val > (((1L) << (64 - 2)) - (1L)))
    {
        __mpz_struct *mpz_coeff = _fmpz_promote(f);
        __gmpz_set_si(mpz_coeff, val);
    }
    else
    {
        _fmpz_demote(f);
        *f = val;
    }
}

static __inline__ void
fmpz_set_ui(fmpz_t f, mp_limb_t val)
{
    if (val > (((1L) << (64 - 2)) - (1L)))
    {
        __mpz_struct *mpz_coeff = _fmpz_promote(f);
        __gmpz_set_ui(mpz_coeff, val);
    }
    else
    {
        _fmpz_demote(f);
        *f = val;
    }
}

static __inline__ void
fmpz_neg_ui(fmpz_t f, mp_limb_t val)
{
    if (val > (((1L) << (64 - 2)) - (1L)))
    {
        __mpz_struct *mpz_coeff = _fmpz_promote(f);
        __gmpz_set_ui(mpz_coeff, val);
        __gmpz_neg(mpz_coeff, mpz_coeff);
    }
    else
    {
        _fmpz_demote(f);
        *f = -(mp_limb_signed_t) val;
    }
}

static __inline__ void
fmpz_set_uiui(fmpz_t f, mp_limb_t hi, mp_limb_t lo)
{
    if (hi == 0)
    {
        fmpz_set_ui(f, lo);
    }
    else
    {
        __mpz_struct *z = _fmpz_promote(f);
        if (z->_mp_alloc < 2)
            __gmpz_realloc2(z, 2 * 64);
        z->_mp_d[0] = lo;
        z->_mp_d[1] = hi;
        z->_mp_size = 2;
    }
}

static __inline__ void
fmpz_neg_uiui(fmpz_t f, mp_limb_t hi, mp_limb_t lo)
{
    if (hi == 0)
    {
        fmpz_neg_ui(f, lo);
    }
    else
    {
        __mpz_struct *z = _fmpz_promote(f);
        if (z->_mp_alloc < 2)
            __gmpz_realloc2(z, 2 * 64);
        z->_mp_d[0] = lo;
        z->_mp_d[1] = hi;
        z->_mp_size = -2;
    }
}

 void fmpz_set_signed_uiui(fmpz_t r, mp_limb_t hi, mp_limb_t lo);

 void fmpz_set_signed_uiuiui(fmpz_t r, mp_limb_t hi, mp_limb_t mid, mp_limb_t lo);

 void fmpz_set_ui_array(fmpz_t out, const mp_limb_t * in, mp_limb_signed_t in_len);

 void fmpz_get_ui_array(mp_limb_t * out, mp_limb_signed_t out_len, const fmpz_t in);

 void fmpz_get_mpz(mpz_t x, const fmpz_t f);

 void fmpz_set_mpz(fmpz_t f, const mpz_t x);

 double fmpz_get_d(const fmpz_t f);

 void fmpz_set_d(fmpz_t f, double c);

 void fmpz_get_mpf(mpf_t x, const fmpz_t f);

 void fmpz_set_mpf(fmpz_t f, const mpf_t x);

 void fmpz_get_mpfr(mpfr_t x, const fmpz_t f, mpfr_rnd_t rnd);

 int fmpz_get_mpn(mp_ptr *n, fmpz_t n_in);

 int fmpz_set_str(fmpz_t f, const char * str, int b);

 void flint_mpz_init_set_readonly(mpz_t z, const fmpz_t f);

 void flint_mpz_clear_readonly(mpz_t z);

 void fmpz_init_set_readonly(fmpz_t f, const mpz_t z);

 void fmpz_clear_readonly(fmpz_t f);

 int fmpz_abs_fits_ui(const fmpz_t f);

 int fmpz_fits_si(const fmpz_t f);

static __inline__
void fmpz_zero(fmpz_t f)
{
   if ((((*f) >> (64 - 2)) == (1L)))
      _fmpz_clear_mpz(*f);
   *f = (0L);
}

static __inline__
void fmpz_one(fmpz_t f)
{
    if ((((*f) >> (64 - 2)) == (1L)))
    {
        _fmpz_clear_mpz(*f);
 }
    *f = (1L);
}

static __inline__
int fmpz_is_zero(const fmpz_t f)
{
   return (*f == 0);
}

static __inline__
int fmpz_is_one(const fmpz_t f)
{
   return (*f == 1);
}

static __inline__
int fmpz_is_pm1(const fmpz_t f)
{
   return (*f == 1 || *f == -1);
}

 void fmpz_set(fmpz_t f, const fmpz_t g);

 int fmpz_equal(const fmpz_t f, const fmpz_t g);

 int fmpz_equal_si(const fmpz_t f, mp_limb_signed_t g);

 int fmpz_equal_ui(const fmpz_t f, mp_limb_t g);

 int fmpz_read(fmpz_t f);

 int fmpz_fread(FILE * file, fmpz_t f);

 size_t fmpz_inp_raw( fmpz_t x, FILE *fin );

 int fmpz_print(const fmpz_t x);

 int fmpz_fprint(FILE * file, const fmpz_t x);

 size_t fmpz_out_raw( FILE *fout, const fmpz_t x );

 size_t fmpz_sizeinbase(const fmpz_t f, int b);

 char * fmpz_get_str(char * str, int b, const fmpz_t f);

static __inline__
void fmpz_swap(fmpz_t f, fmpz_t g)
{
    if (f != g)
    {
        fmpz t = *f;
        *f = *g;
        *g = t;
    }
}

 int fmpz_cmp(const fmpz_t f, const fmpz_t g);

 int fmpz_cmp_ui(const fmpz_t f, mp_limb_t g);

 int fmpz_cmp_si(const fmpz_t f, mp_limb_signed_t g);

 int fmpz_cmpabs(const fmpz_t f, const fmpz_t g);

static __inline__
int fmpz_is_even(const fmpz_t f)
{
    if (!(((*f) >> (64 - 2)) == (1L)))
    {
        return !((*f) & (1L));
    }
    else
    {
        return (! (((((__mpz_struct *) ((*f) << 2)))->_mp_size != 0) & ((int) ((((__mpz_struct *) ((*f) << 2)))->_mp_d[0]))));
    }
}

static __inline__
int fmpz_is_odd(const fmpz_t f)
{
    if (!(((*f) >> (64 - 2)) == (1L)))
    {
        return ((*f) & (1L));
    }
    else
    {
        return (((((__mpz_struct *) ((*f) << 2)))->_mp_size != 0) & ((int) ((((__mpz_struct *) ((*f) << 2)))->_mp_d[0])));
    }
}

 mp_size_t fmpz_size(const fmpz_t f);

 int fmpz_sgn(const fmpz_t f);

 mp_limb_t fmpz_bits(const fmpz_t f);

 mp_limb_t fmpz_val2(const fmpz_t x);

static __inline__ void
fmpz_neg(fmpz_t f1, const fmpz_t f2)
{
    if (!(((*f2) >> (64 - 2)) == (1L)))
    {
        fmpz t = -*f2;
        _fmpz_demote(f1);
        *f1 = t;
    }
    else
    {

        __mpz_struct *mpz_res = _fmpz_promote(f1);
        __gmpz_neg(mpz_res, ((__mpz_struct *) ((*f2) << 2)));
    }
}

 void fmpz_abs(fmpz_t f1, const fmpz_t f2);

 void fmpz_add(fmpz_t f, const fmpz_t g, const fmpz_t h);

 void fmpz_sub(fmpz_t f, const fmpz_t g, const fmpz_t h);

 void fmpz_mul_ui(fmpz_t f, const fmpz_t g, mp_limb_t x);

 void fmpz_mul_si(fmpz_t f, const fmpz_t g, mp_limb_signed_t x);

 void fmpz_mul(fmpz_t f, const fmpz_t g, const fmpz_t h);

 void fmpz_mul_2exp(fmpz_t f, const fmpz_t g, mp_limb_t exp);

 void fmpz_add_ui(fmpz_t f, const fmpz_t g, mp_limb_t x);

 void fmpz_sub_ui(fmpz_t f, const fmpz_t g, mp_limb_t x);

static __inline__ void fmpz_add_si(fmpz_t f, const fmpz_t g, mp_limb_signed_t x)
{
    if (x >= 0)
        fmpz_add_ui(f, g, (mp_limb_t) x);
    else
        fmpz_sub_ui(f, g, (mp_limb_t) -x);
}

static __inline__ void fmpz_sub_si(fmpz_t f, const fmpz_t g, mp_limb_signed_t x)
{
    if (x >= 0)
        fmpz_sub_ui(f, g, (mp_limb_t) x);
    else
        fmpz_add_ui(f, g, (mp_limb_t) -x);
}

 void fmpz_addmul_ui(fmpz_t f, const fmpz_t g, mp_limb_t x);

 void fmpz_submul_ui(fmpz_t f, const fmpz_t g, mp_limb_t x);

 void fmpz_addmul(fmpz_t f, const fmpz_t g, const fmpz_t h);

 void fmpz_submul(fmpz_t f, const fmpz_t g, const fmpz_t h);

 void fmpz_fmma(fmpz_t f, const fmpz_t a, const fmpz_t b, const fmpz_t c, const fmpz_t d);

 void fmpz_fmms(fmpz_t f, const fmpz_t a, const fmpz_t b, const fmpz_t c, const fmpz_t d);

 void fmpz_pow_ui(fmpz_t f, const fmpz_t g, mp_limb_t exp);

 int fmpz_pow_fmpz(fmpz_t a, const fmpz_t b, const fmpz_t e);

 void fmpz_powm_ui(fmpz_t f, const fmpz_t g, mp_limb_t exp, const fmpz_t m);

 void fmpz_powm(fmpz_t f, const fmpz_t g, const fmpz_t e, const fmpz_t m);

 void fmpz_setbit(fmpz_t f, mp_limb_t i);

 int fmpz_tstbit(const fmpz_t f, mp_limb_t i);

 void fmpz_clrbit(fmpz_t f, mp_limb_t i);

 void fmpz_complement(fmpz_t r, const fmpz_t f);

 void fmpz_combit(fmpz_t f, mp_limb_t i);

 void fmpz_and(fmpz_t r, const fmpz_t a, const fmpz_t b);

 void fmpz_or(fmpz_t r, const fmpz_t a, const fmpz_t b);

 void fmpz_xor(fmpz_t r, const fmpz_t a, const fmpz_t b);

 mp_limb_t fmpz_popcnt(const fmpz_t c);

 double fmpz_dlog(const fmpz_t x);
 mp_limb_signed_t fmpz_flog(const fmpz_t x, const fmpz_t b);
 mp_limb_signed_t fmpz_flog_ui(const fmpz_t x, mp_limb_t b);
 mp_limb_signed_t fmpz_clog(const fmpz_t x, const fmpz_t b);
 mp_limb_signed_t fmpz_clog_ui(const fmpz_t x, mp_limb_t b);

 int fmpz_sqrtmod(fmpz_t b, const fmpz_t a, const fmpz_t p);

 void fmpz_sqrt(fmpz_t f, const fmpz_t g);

 int fmpz_is_square(const fmpz_t f);

 void fmpz_root(fmpz_t r, const fmpz_t f, mp_limb_signed_t n);

 int fmpz_is_perfect_power(fmpz_t root, const fmpz_t f);

 void fmpz_sqrtrem(fmpz_t f, fmpz_t r, const fmpz_t g);

 mp_limb_t fmpz_fdiv_ui(const fmpz_t g, mp_limb_t h);

 mp_limb_t fmpz_mod_ui(fmpz_t f, const fmpz_t g, mp_limb_t h);

 void fmpz_mod(fmpz_t f, const fmpz_t g, const fmpz_t h);

 void fmpz_smod(fmpz_t f, const fmpz_t g, const fmpz_t h);

static __inline__ void
fmpz_negmod(fmpz_t r, const fmpz_t a, const fmpz_t mod)
{
   if (fmpz_is_zero(a))
      fmpz_zero(r);
   else
      fmpz_sub(r, mod, a);
}

 void fmpz_gcd(fmpz_t f, const fmpz_t g, const fmpz_t h);

 void fmpz_lcm(fmpz_t f, const fmpz_t g, const fmpz_t h);

 void fmpz_gcdinv(fmpz_t d, fmpz_t a, const fmpz_t f, const fmpz_t g);

 void fmpz_xgcd(fmpz_t d, fmpz_t a, fmpz_t b, const fmpz_t f, const fmpz_t g);

 void fmpz_xgcd_partial(fmpz_t co2, fmpz_t co1,
                                       fmpz_t r2, fmpz_t r1, const fmpz_t L);

 int fmpz_invmod(fmpz_t f, const fmpz_t g, const fmpz_t h);

 int fmpz_jacobi(const fmpz_t a, const fmpz_t p);

 void fmpz_divides_mod_list(fmpz_t xstart, fmpz_t xstride,
               fmpz_t xlength, const fmpz_t a, const fmpz_t b, const fmpz_t n);

 mp_limb_signed_t _fmpz_remove(fmpz_t x, const fmpz_t f, double finv);

 mp_limb_signed_t fmpz_remove(fmpz_t rop, const fmpz_t op, const fmpz_t f);

 void fmpz_divexact(fmpz_t f, const fmpz_t g, const fmpz_t h);

 void fmpz_divexact_si(fmpz_t f, const fmpz_t g, mp_limb_signed_t h);

 void fmpz_divexact_ui(fmpz_t f, const fmpz_t g, mp_limb_t h);

 int fmpz_divisible(const fmpz_t f, const fmpz_t g);

 int fmpz_divisible_si(const fmpz_t f, mp_limb_signed_t g);

 void fmpz_cdiv_qr(fmpz_t f, fmpz_t s, const fmpz_t g, const fmpz_t h);

 void fmpz_cdiv_q(fmpz_t f, const fmpz_t g, const fmpz_t h);

 void fmpz_cdiv_q_si(fmpz_t f, const fmpz_t g, mp_limb_signed_t h);

 void fmpz_cdiv_q_ui(fmpz_t f, const fmpz_t g, mp_limb_t h);

 void fmpz_cdiv_q_2exp(fmpz_t f, const fmpz_t g, mp_limb_t exp);

 void fmpz_cdiv_r_2exp(fmpz_t f, const fmpz_t g, mp_limb_t exp);

 mp_limb_t fmpz_cdiv_ui(const fmpz_t g, mp_limb_t h);

 void fmpz_fdiv_qr(fmpz_t f, fmpz_t s, const fmpz_t g, const fmpz_t h);

 void fmpz_fdiv_qr_preinvn(fmpz_t f, fmpz_t s, const fmpz_t g,
                                     const fmpz_t h, const fmpz_preinvn_t inv);

 void fmpz_fdiv_q(fmpz_t f, const fmpz_t g, const fmpz_t h);

 void fmpz_fdiv_r(fmpz_t f, const fmpz_t g, const fmpz_t h);

 void fmpz_fdiv_q_ui(fmpz_t f, const fmpz_t g, mp_limb_t h);

 void fmpz_fdiv_q_si(fmpz_t f, const fmpz_t g, mp_limb_signed_t h);

 void fmpz_fdiv_q_2exp(fmpz_t f, const fmpz_t g, mp_limb_t exp);

 void fmpz_fdiv_r_2exp(fmpz_t f, const fmpz_t g, mp_limb_t exp);

 void fmpz_tdiv_q(fmpz_t f, const fmpz_t g, const fmpz_t h);

 void fmpz_tdiv_qr(fmpz_t f, fmpz_t s, const fmpz_t g, const fmpz_t h);

 void fmpz_tdiv_q_ui(fmpz_t f, const fmpz_t g, mp_limb_t h);

 void fmpz_tdiv_q_si(fmpz_t f, const fmpz_t g, mp_limb_signed_t h);

 void fmpz_tdiv_r_2exp(fmpz_t f, const fmpz_t g, mp_limb_t exp);

 mp_limb_t fmpz_tdiv_ui(const fmpz_t g, mp_limb_t h);

 void fmpz_tdiv_q_2exp(fmpz_t f, const fmpz_t g, mp_limb_t exp);

 void fmpz_preinvn_init(fmpz_preinvn_t inv, const fmpz_t f);

 void fmpz_preinvn_clear(fmpz_preinvn_t inv);

 double fmpz_get_d_2exp(mp_limb_signed_t * exp, const fmpz_t f);

 void fmpz_set_d_2exp(fmpz_t f, double m, mp_limb_signed_t exp);

static __inline__ void
fmpz_mul2_uiui(fmpz_t f, const fmpz_t g, mp_limb_t h1, mp_limb_t h2)
{
    mp_limb_t hi, lo;

    __asm__ ("mulq %3" : "=a" (lo), "=d" (hi) : "%0" ((mp_limb_t)(h1)), "rm" ((mp_limb_t)(h2)));
    if (!hi)
    {
        fmpz_mul_ui(f, g, lo);
    }
    else
    {
        fmpz_mul_ui(f, g, h1);
        fmpz_mul_ui(f, f, h2);
    }
}

static __inline__ void
fmpz_divexact2_uiui(fmpz_t f, const fmpz_t g, mp_limb_t h1, mp_limb_t h2)
{
    mp_limb_t hi, lo;

    __asm__ ("mulq %3" : "=a" (lo), "=d" (hi) : "%0" ((mp_limb_t)(h1)), "rm" ((mp_limb_t)(h2)));
    if (!hi)
    {
        fmpz_divexact_ui(f, g, lo);
    }
    else
    {
        fmpz_divexact_ui(f, g, h1);
        fmpz_divexact_ui(f, f, h2);
    }
}

 void fmpz_mul_tdiv_q_2exp(fmpz_t f, const fmpz_t g, const fmpz_t h, mp_limb_t exp);

 void fmpz_mul_si_tdiv_q_2exp(fmpz_t f, const fmpz_t g, mp_limb_signed_t x, mp_limb_t exp);

 void fmpz_fac_ui(fmpz_t f, mp_limb_t n);

 void fmpz_fib_ui(fmpz_t f, mp_limb_t n);

 void fmpz_bin_uiui(fmpz_t res, mp_limb_t n, mp_limb_t k);

 void _fmpz_rfac_ui(fmpz_t r, const fmpz_t x, mp_limb_t a, mp_limb_t b);

 void fmpz_rfac_ui(fmpz_t r, const fmpz_t x, mp_limb_t n);

 void fmpz_rfac_uiui(fmpz_t r, mp_limb_t x, mp_limb_t n);

 int fmpz_bit_pack(mp_ptr arr, mp_limb_t shift, mp_limb_t bits,
                  const fmpz_t coeff, int negate, int borrow);

 int fmpz_bit_unpack(fmpz_t coeff, mp_srcptr arr, mp_limb_t shift,
                    mp_limb_t bits, int negate, int borrow);

 void fmpz_bit_unpack_unsigned(fmpz_t coeff, mp_srcptr arr,
                              mp_limb_t shift, mp_limb_t bits);



 void _fmpz_CRT_ui_precomp(fmpz_t out, const fmpz_t r1, const fmpz_t m1,
    mp_limb_t r2, mp_limb_t m2, mp_limb_t m2inv, const fmpz_t m1m2, mp_limb_t c,
        int sign);

 void fmpz_CRT_ui(fmpz_t out, const fmpz_t r1, const fmpz_t m1,
    mp_limb_t r2, mp_limb_t m2, int sign);



typedef struct
{
    const mp_limb_t * primes;
    mp_limb_signed_t num_primes;
    mp_limb_signed_t n;
    fmpz ** comb;
    fmpz ** res;
    nmod_t * mod;
}
fmpz_comb_struct;

typedef struct
{
    mp_limb_signed_t n;
    fmpz ** comb_temp;
    fmpz_t temp;
    fmpz_t temp2;
}
fmpz_comb_temp_struct;

typedef fmpz_comb_struct fmpz_comb_t[1];
typedef fmpz_comb_temp_struct fmpz_comb_temp_t[1];

 void fmpz_comb_temp_init(fmpz_comb_temp_t temp, const fmpz_comb_t comb);
 void fmpz_comb_temp_clear(fmpz_comb_temp_t temp);

 void fmpz_comb_init(fmpz_comb_t comb, mp_srcptr primes, mp_limb_signed_t num_primes);
 void fmpz_comb_clear(fmpz_comb_t comb);

 void fmpz_multi_mod_ui(mp_limb_t * out, const fmpz_t in,
    const fmpz_comb_t comb, fmpz_comb_temp_t temp);

 void fmpz_multi_CRT_ui(fmpz_t output, mp_srcptr residues,
    const fmpz_comb_t comb, fmpz_comb_temp_t temp, int sign);

 void fmpz_CRT(fmpz_t out, const fmpz_t r1, const fmpz_t m1,
                                                fmpz_t r2, fmpz_t m2, int sign);

static __inline__ void fmpz_set_ui_smod(fmpz_t f, mp_limb_t x, mp_limb_t m)
{
    if (x <= m / 2)
        fmpz_set_ui(f, x);
    else
        fmpz_set_si(f, x - m);
}


typedef struct
{
    mp_limb_signed_t a_idx;
    mp_limb_signed_t b_idx;
    mp_limb_signed_t c_idx;
    fmpz_t idem;
    fmpz_t modulus;
} _fmpz_multi_crt_prog_instr;

typedef struct
{
    _fmpz_multi_crt_prog_instr * prog;
    mp_limb_signed_t length;
    mp_limb_signed_t alloc;
    mp_limb_signed_t localsize;
    mp_limb_signed_t temp1loc;
    mp_limb_signed_t temp2loc;
    int good;
} fmpz_multi_crt_struct;

typedef fmpz_multi_crt_struct fmpz_multi_crt_t[1];

 void fmpz_multi_crt_init(fmpz_multi_crt_t CRT);

 int fmpz_multi_crt_precompute(fmpz_multi_crt_t CRT,
                                               const fmpz * moduli, mp_limb_signed_t len);

 int fmpz_multi_crt_precompute_p(fmpz_multi_crt_t CRT,
                                       const fmpz * const * moduli, mp_limb_signed_t len);

 void fmpz_multi_crt_precomp(fmpz_t output, const fmpz_multi_crt_t P,
                                                          const fmpz * inputs);

 void fmpz_multi_crt_precomp_p(fmpz_t output,
                        const fmpz_multi_crt_t P, const fmpz * const * inputs);

 int fmpz_multi_crt(fmpz_t output, const fmpz * moduli,
                                               const fmpz * values, mp_limb_signed_t len);

 void fmpz_multi_crt_clear(fmpz_multi_crt_t P);

static __inline__ mp_limb_signed_t _fmpz_multi_crt_local_size(const fmpz_multi_crt_t CRT)
{
    return CRT->localsize;
}

 void _fmpz_multi_crt_run(fmpz * outputs, const fmpz_multi_crt_t CRT,
                                                          const fmpz * inputs);

 void _fmpz_multi_crt_run_p(fmpz * outputs,
                      const fmpz_multi_crt_t CRT, const fmpz * const * inputs);



 mp_limb_t fmpz_abs_ubound_ui_2exp(mp_limb_signed_t * exp, const fmpz_t x, int bits);

 mp_limb_t fmpz_abs_lbound_ui_2exp(mp_limb_signed_t * exp, const fmpz_t x, int bits);

 void fmpz_lucas_chain(fmpz_t Vm, fmpz_t Vm1, const fmpz_t A,
                                               const fmpz_t m, const fmpz_t n);

 void fmpz_lucas_chain_full(fmpz_t Vm, fmpz_t Vm1, const fmpz_t A, const fmpz_t B,
                                         const fmpz_t m, const fmpz_t n);

 void fmpz_lucas_chain_double(fmpz_t U2m, fmpz_t U2m1, const fmpz_t Um,
                             const fmpz_t Um1, const fmpz_t A,
                             const fmpz_t B, const fmpz_t n);

 void fmpz_lucas_chain_add(fmpz_t Umn, fmpz_t Umn1, const fmpz_t Um,
                             const fmpz_t Um1, const fmpz_t Un,
                             const fmpz_t Un1, const fmpz_t A,
                             const fmpz_t B, const fmpz_t n);

 void fmpz_lucas_chain_mul(fmpz_t Ukm, fmpz_t Ukm1,
                               const fmpz_t Um, const fmpz_t Um1,
                               const fmpz_t A, const fmpz_t B, const fmpz_t k,
                               const fmpz_t n);

 void fmpz_lucas_chain_VtoU(fmpz_t Um, fmpz_t Um1,
                            const fmpz_t Vm, const fmpz_t Vm1,
                            const fmpz_t A, const fmpz_t B, const fmpz_t Dinv,
                            const fmpz_t n);

 int fmpz_is_probabprime_lucas(const fmpz_t n);

 int fmpz_is_probabprime_BPSW(const fmpz_t n);

 int fmpz_is_strong_probabprime(const fmpz_t n, const fmpz_t a);

 int fmpz_is_probabprime(const fmpz_t p);

 int fmpz_is_prime_pseudosquare(const fmpz_t n);

 void _fmpz_nm1_trial_factors(const fmpz_t n, mp_ptr pm1,
                                                 mp_limb_signed_t * num_pm1, mp_limb_t limit);

 int fmpz_is_prime_pocklington(fmpz_t F, fmpz_t R,
                                    const fmpz_t n, mp_ptr pm1, mp_limb_signed_t num_pm1);

 void _fmpz_np1_trial_factors(const fmpz_t n,
                                     mp_ptr pp1, mp_limb_signed_t * num_pp1, mp_limb_t limit);

 int fmpz_is_prime_morrison(fmpz_t F, fmpz_t R,
                                    const fmpz_t n, mp_ptr pm1, mp_limb_signed_t num_pm1);

 int fmpz_is_prime(const fmpz_t p);

 int fmpz_divisor_in_residue_class_lenstra(fmpz_t fac, const fmpz_t n,
                                               const fmpz_t r, const fmpz_t s);

 void fmpz_nextprime(fmpz_t res, const fmpz_t n, int proved);



 void fmpz_primorial(fmpz_t res, mp_limb_t n);



 void fmpz_euler_phi(fmpz_t res, const fmpz_t n);

 int fmpz_moebius_mu(const fmpz_t n);

 void fmpz_divisor_sigma(fmpz_t res, const fmpz_t n, mp_limb_t k);



 mp_limb_t n_powmod2_fmpz_preinv(mp_limb_t a, const fmpz_t exp,
                                                          mp_limb_t n, mp_limb_t ninv);

static __inline__ mp_limb_t nmod_pow_fmpz(mp_limb_t a, const fmpz_t exp, nmod_t mod)
{
    return n_powmod2_fmpz_preinv(a, exp, mod.n, mod.ninv);
}



 fmpz * __new_fmpz();
 void __free_fmpz(fmpz * f);
 void __fmpz_set_si(fmpz_t f, mp_limb_signed_t val);
 void __fmpz_set_ui(fmpz_t f, mp_limb_t val);
 void __fmpz_init(fmpz_t f);
 void __fmpz_init_set_ui(fmpz_t f, mp_limb_t g);
 void __fmpz_clear(fmpz_t f);
 int __fmpz_lt(fmpz_t f, fmpz_t g);
 int __fmpz_gt(fmpz_t f, fmpz_t g);
 int __fmpz_lte(fmpz_t f, fmpz_t g);
 int __fmpz_gte(fmpz_t f, fmpz_t g);
 int __fmpz_eq(fmpz_t f, fmpz_t g);
 int __fmpz_neq(fmpz_t f, fmpz_t g);
 void __fmpz_init_set(fmpz_t f, const fmpz_t g);
 void __fmpz_neg(fmpz_t f1, const fmpz_t f2);





# 1 "/usr/include/flint/fmpz_factor.h" 1 3 4
# 21 "/usr/include/flint/fmpz_factor.h" 3 4
# 1 "/usr/include/gmp.h" 1 3 4
# 22 "/usr/include/flint/fmpz_factor.h" 2 3 4






typedef struct
{
    int sign;
    fmpz * p;
    mp_limb_t * exp;
    mp_limb_signed_t alloc;
    mp_limb_signed_t num;
} fmpz_factor_struct;

typedef fmpz_factor_struct fmpz_factor_t[1];



 void fmpz_factor_init(fmpz_factor_t factor);

 void fmpz_factor_clear(fmpz_factor_t factor);

 void fmpz_factor_print(const fmpz_factor_t factor);

 void _fmpz_factor_fit_length(fmpz_factor_t factor, mp_limb_signed_t len);

 void _fmpz_factor_append_ui(fmpz_factor_t factor,
                                                       mp_limb_t p, mp_limb_t exp);

 void _fmpz_factor_append(fmpz_factor_t factor,
                                                    const fmpz_t p, mp_limb_t exp);

 void _fmpz_factor_set_length(fmpz_factor_t factor, mp_limb_signed_t newlen);

 void _fmpz_factor_concat(fmpz_factor_t factor1,
                                             fmpz_factor_t factor2, mp_limb_t exp);



 void _fmpz_factor_extend_factor_ui(fmpz_factor_t factor,
                                                    mp_limb_t n);

 int fmpz_factor_trial_range(fmpz_factor_t factor, const fmpz_t n,
                                       mp_limb_t start, mp_limb_t num_primes);

 int fmpz_factor_trial(fmpz_factor_t factor, const fmpz_t n,
                                               mp_limb_signed_t num_primes);

 void fmpz_factor(fmpz_factor_t factor, const fmpz_t n);

 void fmpz_factor_no_trial(fmpz_factor_t factor, const fmpz_t n);

 int fmpz_factor_smooth(fmpz_factor_t factor,
                         const fmpz_t n, mp_limb_signed_t bits, int proved);

 void fmpz_factor_si(fmpz_factor_t factor, mp_limb_signed_t n);

 int fmpz_factor_pp1(fmpz_t factor, const fmpz_t n,
                                       mp_limb_t B1, mp_limb_t B2_sqrt, mp_limb_t c);

 void fmpz_factor_refine(fmpz_factor_t res, const fmpz_factor_t f);

 void flint_mpn_sqr_and_add_a(mp_ptr y, mp_ptr a, mp_ptr n,
              mp_limb_t n_size, mp_ptr ninv, mp_limb_t normbits);

 int flint_mpn_factor_pollard_brent_single(mp_ptr factor,
            mp_ptr n, mp_ptr ninv, mp_ptr a, mp_ptr y, mp_limb_t n_size,
                                      mp_limb_t normbits, mp_limb_t max_iters);

 int fmpz_factor_pollard_brent_single(fmpz_t p_factor, fmpz_t n_in,
                                                         fmpz_t yi, fmpz_t ai,
                                                          mp_limb_t max_iters);

 int fmpz_factor_pollard_brent(fmpz_t factor, flint_rand_t state,
                                        fmpz_t n, mp_limb_t max_tries,
                                        mp_limb_t max_iters);


 void fmpz_factor_expand_iterative(fmpz_t n, const fmpz_factor_t factor);

 void fmpz_factor_expand_multiexp(fmpz_t n, const fmpz_factor_t factor);

 void fmpz_factor_expand(fmpz_t n, const fmpz_factor_t factor);



 void fmpz_factor_euler_phi(fmpz_t res, const fmpz_factor_t fac);

 int fmpz_factor_moebius_mu(const fmpz_factor_t fac);

 void fmpz_factor_divisor_sigma(fmpz_t res, const fmpz_factor_t fac, mp_limb_t k);



typedef struct ecm_s {

    mp_ptr t, u, v, w;
    mp_ptr x, z;
    mp_ptr a24;
    mp_ptr ninv;
    mp_ptr one;

    unsigned char *GCD_table;


    unsigned char **prime_table;

    mp_limb_t n_size;
    mp_limb_t normbits;

} ecm_s;

typedef ecm_s ecm_t[1];

 void fmpz_factor_ecm_init(ecm_t ecm_inf, mp_limb_t sz);

 void fmpz_factor_ecm_clear(ecm_t ecm_inf);

 void fmpz_factor_ecm_addmod(mp_ptr a, mp_ptr b, mp_ptr c, mp_ptr n,
                                     mp_limb_t n_size);

 void fmpz_factor_ecm_submod(mp_ptr x, mp_ptr a, mp_ptr b, mp_ptr n,
                                     mp_limb_t n_size);

 void fmpz_factor_ecm_double(mp_ptr x, mp_ptr z, mp_ptr x0, mp_ptr z0,
                                      mp_ptr n, ecm_t ecm_inf);

 void fmpz_factor_ecm_add(mp_ptr x, mp_ptr z, mp_ptr x1, mp_ptr z1,
                                   mp_ptr x2, mp_ptr z2, mp_ptr x0, mp_ptr z0,
                                   mp_ptr n, ecm_t ecm_inf);

 void fmpz_factor_ecm_mul_montgomery_ladder(mp_ptr x, mp_ptr z,
                                                     mp_ptr x0, mp_ptr z0,
                                                     mp_limb_t k, mp_ptr n,
                                                     ecm_t ecm_inf);

 int fmpz_factor_ecm_select_curve(mp_ptr f,
                            mp_ptr sig, mp_ptr n, ecm_t ecm_inf);

 int fmpz_factor_ecm_stage_I(mp_ptr f, const mp_limb_t *prime_array,
                                      mp_limb_t num, mp_limb_t B1, mp_ptr n,
                                      ecm_t ecm_inf);

 int fmpz_factor_ecm_stage_II(mp_ptr f, mp_limb_t B1, mp_limb_t B2,
                                       mp_limb_t P, mp_ptr n, ecm_t ecm_inf);

 int fmpz_factor_ecm(fmpz_t f, mp_limb_t curves, mp_limb_t B1,
                        mp_limb_t B2, flint_rand_t state, const fmpz_t n_in);



 void fmpz_factor_get_fmpz(fmpz_t z, const fmpz_factor_t factor, mp_limb_signed_t i);
# 927 "/usr/include/flint/fmpz.h" 2 3 4
# 10 "my_fmpz_pre.h" 2
