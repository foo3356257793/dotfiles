#!/usr/bin/sage

import itertools

def possible_values(grid, i, j):

    # shouldn't happen
    if grid[i][j] != 0:
        return [grid[i][j]]

    is_good = [True] * 10

    # row
    for k in range(9):
        is_good[grid[i][k]] = False

    # column
    for k in range(9):
        is_good[grid[k][j]] = False

    # square
    start_x = i - (i%3)
    start_y = j - (j%3)

    for tup in itertools.product(range(start_x,start_x+3),range(start_y,start_y+3)):
        is_good[grid[tup[0]][tup[1]]] = False

    ret = [i for i in range(1,10) if is_good[i]]

    return ret


def branch_fill_grid(grid, i, j):

    if i >= 9:
        return True

    i_next = i
    j_next = j+1

    if j_next == 9:
        i_next += 1
        j_next = 0

    if grid[i][j] != 0:

        return branch_fill_grid(grid, i_next, j_next)

    poss = possible_values(grid, i, j)


    for v in poss:

        grid[i][j] = v

        works = branch_fill_grid(grid, i_next, j_next)

        if works:
            return True

    # failed
    grid[i][j] = 0
    return False


if __name__ == "__main__":

    fp = open('sudoku.txt', 'r')

    lines = fp.readlines()

    fp.close()

    ################
    # parse the file
    ################

    puzzles = []

    grid = []

    for line in lines:

        if 'Grid' in line:
            if len(grid) == 9:
                puzzles.append(copy(grid))
                grid = []

        else:
            grid.append(line)

    if len(grid) == 9:
        puzzles.append(copy(grid))


    # put into arrays
    puzzle_arrs = []
    for grid in puzzles:

        arr = []
        for i in range(9):
            line = grid[i]
            row = []
            for j in range(9):
                row.append(int(line[j]))
            arr.append(row)

        puzzle_arrs.append(arr)


    num_solved = 0
    ans = 0
    for arr in puzzle_arrs:

        solved = branch_fill_grid(arr, 0, 0)

        if solved:
            num_solved += 1

        ans += int('%d%d%d' % (arr[0][0], arr[0][1], arr[0][2]))
