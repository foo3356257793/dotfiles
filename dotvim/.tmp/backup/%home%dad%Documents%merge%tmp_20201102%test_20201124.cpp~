#include <algorithm>
#include <iostream>
#include <memory>
#include <numeric>
#include <tuple>
#include <vector>

using namespace std;

#include <fmt/core.h>
#include <fmt/ostream.h>

using fmt::print;

// flint
#include <flint/flint.h>
#include <flint/fmpz.h>

class Fmpz
{
  public:
    fmpz_t number;

    Fmpz(int64_t in_number)
    {
      fmpz_init_set_si(number, in_number);
    }

    Fmpz(const Fmpz &other)
    {
      fmpz_init_set(number, other.number);
    }

    Fmpz& operator=(const Fmpz &other)
    {
      fmpz_set(number, other.number);

      return *this;
    }

    ~Fmpz()
    {
      fmpz_clear(number);
    }

    Fmpz& operator+=(const Fmpz &rhs)
    {
      fmpz_add(number, number, rhs.number);

      return *this;
    }

    Fmpz operator + (const Fmpz &rhs)
    {
      auto result = Fmpz(rhs);
      fmpz_add(result.number, number, rhs.number);

      return result;
    }

};

int main(int argc, char *argv[]){

  print("Hello, world!\n");

  auto a = Fmpz(1);
  auto b = Fmpz(2);

  auto c = a+b;

  fmpz_print(c.number);
  print("\n");
}

