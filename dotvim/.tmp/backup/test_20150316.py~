#!/usr/bin/python3

from random import *
from math import *

seed()

def network64(list):
  sub_list = [None] * 16
  dst_list = [None] * 64
  for i in range(0,4):
    for j in range(0,16):
      sub_list[j] = list[16*i+j]
    sub_list.sort()
    for j in range(0,16):
      list[16*i+j] = sub_list[j]
  for i in range(0,4):
    for j in range(0,4):
      for k in range(0,4):
        sub_list[4*j+k] = list[4*i+16*j+k]
    sub_list.sort()
    for j in range(0,16):
      dst_list[16*i + j] = sub_list[j]
  return dst_list

def network256(list):
  sub_list = [None] * 16
  dst_list = [None] * 256
  for i in range(0,16):
    for j in range(0,16):
      sub_list[j] = list[16*i+j]
    sub_list.sort()
    for j in range(0,16):
      list[16*i+j] = sub_list[j]
  for i in range(0,16):
    for j in range(0,16):
      sub_list[j] = list[16*j+i]
    sub_list.sort()
    for j in range(0,16):
      dst_list[16*i+j] = sub_list[j]
  return dst_list

N = 256
key_size = 16
num_keys = (1<<key_size)
max_key = (1<<key_size)-1

num_trials = 1<<12

list = [None] * N
histogram = [0] * (num_keys*N)

for trial in range(0,num_trials):
  for i in range(0,N):
    list[i] = randint(0,max_key)
  #list.sort()
  #list = network64(list)
  list = network256(list)
  for i in range(0,N):
    histogram[num_keys*i + list[i]] += 1

#  for i in range(0,N):
#    for j in range(0,max_key+1):
#      print("%4d " % histogram[num_keys*i + j], end="")
#    print("")

means = [0] * N
for i in range(0,N):
  for j in range(0,num_keys):
    means[i] += j * histogram[num_keys*i + j]
  means[i] /= num_trials

# print("")
# for i in range(0,N):
#   print("%d %f" % (i, means[i]))

# print("")
# num_windows = 8
# for j in range(1,num_windows+1):
#   print("%-4d " % j, end = "")
# print("")
# for i in range(0,N):
#   for window in range(1,num_windows+1):
#     min_window = max(ceil(means[i] - (window/2)),0)
#     max_window = min(floor(means[i] + (window/2)),max_key)
#     count = 0;
#     for j in range(min_window, max_window+1):
#       count += histogram[16*i+j]
#     count /= num_trials
#     print("%.2lf " % count, end="")
#   print("")

print("")
print("key      mean ", end ="")
for i in range(0,key_size):
  print("%4d" % (key_size-1-i), end=" ")
print("")
print("----------------------------------------------")
for i in range(0,N):
  print("%4d %8.2f" % (i,means[i]), end=" ")
  for bin_key_size in range(1,key_size+1):
    bin_num_keys = (1<<bin_key_size)
    #min_val = max(0,floor(means[i]/bin_num_keys) * bin_num_keys)
    #max_val = min(ceil(means[i]/bin_num_keys) * bin_num_keys,max_key)
    min_val = max(0,floor( means[i] - (bin_num_keys/2) ))
    max_val = min(max_key,ceil( means[i] + (bin_num_keys/2) ))
    count = 0
    for j in range(min_val, max_val+1):
      count += histogram[num_keys*i + j]
    count /= num_trials
    print("%.2f" % count, end=" ")
  print("")
