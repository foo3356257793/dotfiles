#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>

int main(int argc, char *argv[])
{

    int32_t grid[20][20];

    FILE *fp = fopen( "input.txt", "r" );

    if(fp == NULL)
    {
        printf("Couldn't find the file!\n");
        exit(255);
    }

    int i=0; int j=0;

    while((i < 20) && ((fscanf(fp, "%02d", &(grid[i][j])))))
    {
        j += 1;
        if(j == 20)
        {
            j = 0;
            i += 1;
        }
    }

    int32_t max_prod = 1;

    // left to right
    #pragma omp parallel for collapse(2)
    for(int i=0; i<20; i++)
    {
        for(int j=0; j<=16; j++)
        {
            int32_t prod = 1;
            for(int k=0; k<4; k++)
            {
                prod *= grid[i][j+k];
            }
            if(prod > max_prod)
            {
               #pragma omp atomic
               max_prod = prod;
            }
        }
    }

    // up and down
    #pragma omp parallel for collapse(2)
    for(int j=0; j<20; j++)
    {
        for(int i=0; i<=16; i++)
        {
            int32_t prod = 1;
            for(int k=0; k<4; k++)
            {
                prod *= grid[i+k][j];
            }
            if(prod > max_prod)
            {
                #pragma omp atomic
                max_prod = prod;
            }
        }
    }

    // diag lu to rd
    #pragma omp parallel for collapse(2)
    for(int i=0; i<=16; i++)
    {
        for(int j=0; j<=16; j++)
        {
            int32_t prod = 1;
            for(int k=0; k<4; k++)
            {
                prod *= grid[i+k][j+k];
            }
            if(prod > max_prod)
            {
                #pragma omp atomic
                max_prod = prod;
            }
        }
    }

    // diag ru to ld
    #pragma omp parallel for collapse(2)
    for(int i=0; i<=16; i++)
    {
        for(int j=3; j<20; j++)
        {
            int32_t prod = 1;
            for(int k=0; k<4; k++)
            {
                prod *= grid[i+k][j-k];
            }
            if(prod > max_prod)
            {
                #pragma omp atomic
                max_prod = prod;
            }
        }
    }

    printf("%d\n", max_prod);

}

