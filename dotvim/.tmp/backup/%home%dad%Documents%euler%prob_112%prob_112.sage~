#!/usr/bin/sage

def n_digit_increasing(n):

    return binomial(n+8,8)

def n_digit_decreasing(n):

    return binomial(n+9,9) - 1

def n_digit_bouncy(n):

    return (10**n - 10**(n-1)) - n_digit_increasing(n) - n_digit_decreasing(n) + 9

def at_most_n_digit_bouncy(n):

    return sum([n_digit_bouncy(i) for i in range(1,n+1)])


# def bouncy_ct(bd):
# 
#     # below stuff
#     n_digits_below = floor(log(bd-1,10))
# 
#     bouncy_below = at_most_n_digit_bouncy(n_digits_below)
# 
#     top_digit = str(bd)[0]

def is_bouncy(a):

    a_str = str(a)

    len_a = len(a_str)

    if len_a <= 2:
        return False

    a_digits = [int(c) for c in a_str]

    is_increasing = True
    is_decreasing = True

    j = 1

    while j < len_a and (is_increasing or is_decreasing):

        if a_digits[j-1] < a_digits[j]:
            is_decreasing = False

        elif a_digits[j-1] > a_digits[j]:
            is_increasing = False

        j += 1

    return is_increasing or is_decreasing


if __name__ == "__main__":

    n = 1

    n_bouncy = at_most_n_digit_bouncy(n)

    n_bouncy = 0
    n_tot = 100

    while n_bouncy != 0.99 * n_tot:

        if n_tot % 100 == 0:
            print(n_tot, float(n_bouncy/n_tot))

        n_tot += 1

        if is_bouncy(n_tot):

            n_bouncy += 1
