/* automatically generated by rust-bindgen 0.55.1 */

pub const _SYS_PARAM_H: u32 = 1;
pub const _SYS_TYPES_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const MB_LEN_MAX: u32 = 16;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const _BITS_SIGNUM_H: u32 = 1;
pub const _BITS_SIGNUM_GENERIC_H: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGILL: u32 = 4;
pub const SIGABRT: u32 = 6;
pub const SIGFPE: u32 = 8;
pub const SIGSEGV: u32 = 11;
pub const SIGTERM: u32 = 15;
pub const SIGHUP: u32 = 1;
pub const SIGQUIT: u32 = 3;
pub const SIGTRAP: u32 = 5;
pub const SIGKILL: u32 = 9;
pub const SIGBUS: u32 = 10;
pub const SIGSYS: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGURG: u32 = 16;
pub const SIGSTOP: u32 = 17;
pub const SIGTSTP: u32 = 18;
pub const SIGCONT: u32 = 19;
pub const SIGCHLD: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGPOLL: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGUSR1: u32 = 30;
pub const SIGUSR2: u32 = 31;
pub const SIGWINCH: u32 = 28;
pub const SIGIO: u32 = 23;
pub const SIGIOT: u32 = 6;
pub const SIGCLD: u32 = 20;
pub const __SIGRTMIN: u32 = 32;
pub const __SIGRTMAX: u32 = 32;
pub const _NSIG: u32 = 33;
pub const SIGSTKFLT: u32 = 16;
pub const SIGPWR: u32 = 30;
pub const __sig_atomic_t_defined: u32 = 1;
pub const __siginfo_t_defined: u32 = 1;
pub const __SI_MAX_SIZE: u32 = 128;
pub const _BITS_SIGINFO_ARCH_H: u32 = 1;
pub const __SI_ERRNO_THEN_CODE: u32 = 1;
pub const __SI_HAVE_SIGSYS: u32 = 1;
pub const _BITS_SIGINFO_CONSTS_H: u32 = 1;
pub const __SI_ASYNCIO_AFTER_SIGIO: u32 = 1;
pub const __sigevent_t_defined: u32 = 1;
pub const __SIGEV_MAX_SIZE: u32 = 64;
pub const _BITS_SIGEVENT_CONSTS_H: u32 = 1;
pub const NSIG: u32 = 33;
pub const _BITS_SIGACTION_H: u32 = 1;
pub const SA_NOCLDSTOP: u32 = 1;
pub const SA_NOCLDWAIT: u32 = 2;
pub const SA_SIGINFO: u32 = 4;
pub const SA_ONSTACK: u32 = 134217728;
pub const SA_RESTART: u32 = 268435456;
pub const SA_NODEFER: u32 = 1073741824;
pub const SA_RESETHAND: u32 = 2147483648;
pub const SA_INTERRUPT: u32 = 536870912;
pub const SA_NOMASK: u32 = 1073741824;
pub const SA_ONESHOT: u32 = 2147483648;
pub const SA_STACK: u32 = 134217728;
pub const SIG_BLOCK: u32 = 0;
pub const SIG_UNBLOCK: u32 = 1;
pub const SIG_SETMASK: u32 = 2;
pub const _BITS_SIGCONTEXT_H: u32 = 1;
pub const FP_XSTATE_MAGIC1: u32 = 1179670611;
pub const FP_XSTATE_MAGIC2: u32 = 1179670597;
pub const __stack_t_defined: u32 = 1;
pub const _SYS_UCONTEXT_H: u32 = 1;
pub const __NGREG: u32 = 23;
pub const NGREG: u32 = 23;
pub const _BITS_SIGSTACK_H: u32 = 1;
pub const MINSIGSTKSZ: u32 = 2048;
pub const SIGSTKSZ: u32 = 8192;
pub const _BITS_SS_FLAGS_H: u32 = 1;
pub const __sigstack_defined: u32 = 1;
pub const _BITS_SIGTHREAD_H: u32 = 1;
pub const HZ: u32 = 100;
pub const EXEC_PAGESIZE: u32 = 4096;
pub const NOGROUP: i32 = -1;
pub const MAXHOSTNAMELEN: u32 = 64;
pub const MAXSYMLINKS: u32 = 20;
pub const NOFILE: u32 = 256;
pub const NCARGS: u32 = 131072;
pub const NGROUPS: u32 = 65536;
pub const CANBSIZ: u32 = 255;
pub const MAXPATHLEN: u32 = 4096;
pub const DEV_BSIZE: u32 = 512;
pub const __GMP_HAVE_HOST_CPU_FAMILY_power: u32 = 0;
pub const __GMP_HAVE_HOST_CPU_FAMILY_powerpc: u32 = 0;
pub const GMP_LIMB_BITS: u32 = 64;
pub const GMP_NAIL_BITS: u32 = 0;
pub const GMP_NUMB_BITS: u32 = 64;
pub const __GNU_MP__: u32 = 6;
pub const __GMP_LIBGMP_DLL: u32 = 0;
pub const __GMP_MP_SIZE_T_INT: u32 = 0;
pub const __GMP_INLINE_PROTOTYPES: u32 = 1;
pub const __GMP_CC: &'static [u8; 4usize] = b"gcc\0";
pub const __GMP_CFLAGS : & 'static [u8 ; 336usize] = b"-O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fexceptions -fstack-protector-strong -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 -m64 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection\0" ;
pub const __GNU_MP_VERSION: u32 = 6;
pub const __GNU_MP_VERSION_MINOR: u32 = 1;
pub const __GNU_MP_VERSION_PATCHLEVEL: u32 = 2;
pub const __GNU_MP_RELEASE: u32 = 60102;
pub const MPFR_VERSION_MAJOR: u32 = 4;
pub const MPFR_VERSION_MINOR: u32 = 0;
pub const MPFR_VERSION_PATCHLEVEL: u32 = 2;
pub const MPFR_VERSION_STRING: &'static [u8; 9usize] = b"4.0.2-p9\0";
pub const MPFR_FLAGS_UNDERFLOW: u32 = 1;
pub const MPFR_FLAGS_OVERFLOW: u32 = 2;
pub const MPFR_FLAGS_NAN: u32 = 4;
pub const MPFR_FLAGS_INEXACT: u32 = 8;
pub const MPFR_FLAGS_ERANGE: u32 = 16;
pub const MPFR_FLAGS_DIVBY0: u32 = 32;
pub const MPFR_FLAGS_ALL: u32 = 63;
pub const _MPFR_PREC_FORMAT: u32 = 3;
pub const _MPFR_EXP_FORMAT: u32 = 3;
pub const MPFR_PREC_MIN: u32 = 1;
pub const MPFR_USE_C99_FEATURE: u32 = 1;
pub const _STDIO_H: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _ALLOCA_H: u32 = 1;
pub const HAVE_BLAS: u32 = 1;
pub const HAVE_TLS: u32 = 1;
pub const HAVE_FENV: u32 = 1;
pub const HAVE_PTHREAD: u32 = 1;
pub const HAVE_GC: u32 = 0;
pub const FLINT_REENTRANT: u32 = 0;
pub const WANT_ASSERT: u32 = 0;
pub const __FLINT_VERSION: u32 = 2;
pub const __FLINT_VERSION_MINOR: u32 = 5;
pub const __FLINT_VERSION_PATCHLEVEL: u32 = 2;
pub const FLINT_VERSION: &'static [u8; 6usize] = b"2.5.2\0";
pub const __FLINT_RELEASE: u32 = 20502;
pub const WORD_FMT: &'static [u8; 3usize] = b"%l\0";
pub const WORD_WIDTH_FMT: &'static [u8; 4usize] = b"%*l\0";
pub const FLINT_BITS: u32 = 64;
pub const FLINT_D_BITS: u32 = 53;
pub const FLINT64: u32 = 1;
pub const FLINT_MAX_FACTORS_IN_LIMB: u32 = 15;
pub const FLINT_ODDPRIME_SMALL_CUTOFF: u32 = 4096;
pub const FLINT_NUM_PRIMES_SMALL: u32 = 172;
pub const FLINT_PRIMES_SMALL_CUTOFF: u32 = 1030;
pub const FLINT_PSEUDOSQUARES_CUTOFF: u32 = 1000;
pub const FLINT_FACTOR_TRIAL_PRIMES: u32 = 3000;
pub const FLINT_PRIMES_TAB_DEFAULT_CUTOFF: u32 = 1000000;
pub const FLINT_FACTOR_SQUFOF_ITERS: u32 = 50000;
pub const FLINT_FACTOR_ONE_LINE_ITERS: u32 = 40000;
pub const FLINT_PRIME_PI_ODD_LOOKUP_CUTOFF: u32 = 311;
pub const FLINT_SIEVE_SIZE: u32 = 65536;
pub const FLINT_FMPZ_LOG_MULTI_MOD_CUTOFF: u32 = 2;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type size_t = ::std::os::raw::c_ulong;
pub type ulongxx = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_slist>())).__next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type sig_atomic_t = __sig_atomic_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_sigval() {
    assert_eq!(
        ::std::mem::size_of::<sigval>(),
        8usize,
        concat!("Size of: ", stringify!(sigval))
    );
    assert_eq!(
        ::std::mem::align_of::<sigval>(),
        8usize,
        concat!("Alignment of ", stringify!(sigval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigval>())).sival_int as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigval>())).sival_ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_ptr)
        )
    );
}
pub type __sigval_t = sigval;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub __pad0: ::std::os::raw::c_int,
    pub _sifields: siginfo_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union siginfo_t__bindgen_ty_1 {
    pub _pad: [::std::os::raw::c_int; 28usize],
    pub _kill: siginfo_t__bindgen_ty_1__bindgen_ty_1,
    pub _timer: siginfo_t__bindgen_ty_1__bindgen_ty_2,
    pub _rt: siginfo_t__bindgen_ty_1__bindgen_ty_3,
    pub _sigchld: siginfo_t__bindgen_ty_1__bindgen_ty_4,
    pub _sigfault: siginfo_t__bindgen_ty_1__bindgen_ty_5,
    pub _sigpoll: siginfo_t__bindgen_ty_1__bindgen_ty_6,
    pub _sigsys: siginfo_t__bindgen_ty_1__bindgen_ty_7,
    _bindgen_union_align: [u64; 14usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_1 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_1>())).si_pid as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_1>())).si_uid as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(si_uid)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_2 {
    pub si_tid: ::std::os::raw::c_int,
    pub si_overrun: ::std::os::raw::c_int,
    pub si_sigval: __sigval_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_2>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_2>())).si_tid as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(si_tid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_2>())).si_overrun as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(si_overrun)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_2>())).si_sigval as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(si_sigval)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_3 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_sigval: __sigval_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_3>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_3>())).si_pid as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_3>())).si_uid as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(si_uid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_3>())).si_sigval as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(si_sigval)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_4 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_utime: __clock_t,
    pub si_stime: __clock_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_4>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_4>())).si_pid as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_4>())).si_uid as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_uid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_4>())).si_status as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_4>())).si_utime as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_utime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_4>())).si_stime as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_stime)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5 {
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_addr_lsb: ::std::os::raw::c_short,
    pub _bounds: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
    pub _addr_bnd: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
    pub _pkey: __uint32_t,
    _bindgen_union_align: [u64; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 {
    pub _lower: *mut ::std::os::raw::c_void,
    pub _upper: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<
                siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
            >()))
            ._lower as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_lower)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<
                siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
            >()))
            ._upper as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_upper)
        )
    );
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>()))
                ._addr_bnd as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(_addr_bnd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>()))._pkey
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(_pkey)
        )
    );
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_5>())).si_addr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(si_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_5>())).si_addr_lsb
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(si_addr_lsb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_5>()))._bounds as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(_bounds)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_6 {
    pub si_band: ::std::os::raw::c_long,
    pub si_fd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_6() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_6>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_6>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_6>())).si_band as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(si_band)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_6>())).si_fd as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(si_fd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_7 {
    pub _call_addr: *mut ::std::os::raw::c_void,
    pub _syscall: ::std::os::raw::c_int,
    pub _arch: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_7() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_7>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_7>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_7>()))._call_addr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(_call_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_7>()))._syscall as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(_syscall)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_7>()))._arch as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(_arch)
        )
    );
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1>(),
        112usize,
        concat!("Size of: ", stringify!(siginfo_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(siginfo_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._pad as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._kill as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_kill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._timer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_timer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._rt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_rt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._sigchld as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigchld)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._sigfault as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigfault)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._sigpoll as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigpoll)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._sigsys as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigsys)
        )
    );
}
#[test]
fn bindgen_test_layout_siginfo_t() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t>(),
        128usize,
        concat!("Size of: ", stringify!(siginfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t>(),
        8usize,
        concat!("Alignment of ", stringify!(siginfo_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t>())).si_signo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(si_signo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t>())).si_errno as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(si_errno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t>())).si_code as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(si_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t>())).__pad0 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(__pad0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t>()))._sifields as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(_sifields)
        )
    );
}
pub const SI_ASYNCNL: ::std::os::raw::c_int = -60;
pub const SI_DETHREAD: ::std::os::raw::c_int = -7;
pub const SI_TKILL: ::std::os::raw::c_int = -6;
pub const SI_SIGIO: ::std::os::raw::c_int = -5;
pub const SI_ASYNCIO: ::std::os::raw::c_int = -4;
pub const SI_MESGQ: ::std::os::raw::c_int = -3;
pub const SI_TIMER: ::std::os::raw::c_int = -2;
pub const SI_QUEUE: ::std::os::raw::c_int = -1;
pub const SI_USER: ::std::os::raw::c_int = 0;
pub const SI_KERNEL: ::std::os::raw::c_int = 128;
pub type _bindgen_ty_1 = ::std::os::raw::c_int;
pub const ILL_ILLOPC: ::std::os::raw::c_uint = 1;
pub const ILL_ILLOPN: ::std::os::raw::c_uint = 2;
pub const ILL_ILLADR: ::std::os::raw::c_uint = 3;
pub const ILL_ILLTRP: ::std::os::raw::c_uint = 4;
pub const ILL_PRVOPC: ::std::os::raw::c_uint = 5;
pub const ILL_PRVREG: ::std::os::raw::c_uint = 6;
pub const ILL_COPROC: ::std::os::raw::c_uint = 7;
pub const ILL_BADSTK: ::std::os::raw::c_uint = 8;
pub const ILL_BADIADDR: ::std::os::raw::c_uint = 9;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const FPE_INTDIV: ::std::os::raw::c_uint = 1;
pub const FPE_INTOVF: ::std::os::raw::c_uint = 2;
pub const FPE_FLTDIV: ::std::os::raw::c_uint = 3;
pub const FPE_FLTOVF: ::std::os::raw::c_uint = 4;
pub const FPE_FLTUND: ::std::os::raw::c_uint = 5;
pub const FPE_FLTRES: ::std::os::raw::c_uint = 6;
pub const FPE_FLTINV: ::std::os::raw::c_uint = 7;
pub const FPE_FLTSUB: ::std::os::raw::c_uint = 8;
pub const FPE_FLTUNK: ::std::os::raw::c_uint = 14;
pub const FPE_CONDTRAP: ::std::os::raw::c_uint = 15;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
pub const SEGV_MAPERR: ::std::os::raw::c_uint = 1;
pub const SEGV_ACCERR: ::std::os::raw::c_uint = 2;
pub const SEGV_BNDERR: ::std::os::raw::c_uint = 3;
pub const SEGV_PKUERR: ::std::os::raw::c_uint = 4;
pub const SEGV_ACCADI: ::std::os::raw::c_uint = 5;
pub const SEGV_ADIDERR: ::std::os::raw::c_uint = 6;
pub const SEGV_ADIPERR: ::std::os::raw::c_uint = 7;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub const BUS_ADRALN: ::std::os::raw::c_uint = 1;
pub const BUS_ADRERR: ::std::os::raw::c_uint = 2;
pub const BUS_OBJERR: ::std::os::raw::c_uint = 3;
pub const BUS_MCEERR_AR: ::std::os::raw::c_uint = 4;
pub const BUS_MCEERR_AO: ::std::os::raw::c_uint = 5;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub const CLD_EXITED: ::std::os::raw::c_uint = 1;
pub const CLD_KILLED: ::std::os::raw::c_uint = 2;
pub const CLD_DUMPED: ::std::os::raw::c_uint = 3;
pub const CLD_TRAPPED: ::std::os::raw::c_uint = 4;
pub const CLD_STOPPED: ::std::os::raw::c_uint = 5;
pub const CLD_CONTINUED: ::std::os::raw::c_uint = 6;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
pub const POLL_IN: ::std::os::raw::c_uint = 1;
pub const POLL_OUT: ::std::os::raw::c_uint = 2;
pub const POLL_MSG: ::std::os::raw::c_uint = 3;
pub const POLL_ERR: ::std::os::raw::c_uint = 4;
pub const POLL_PRI: ::std::os::raw::c_uint = 5;
pub const POLL_HUP: ::std::os::raw::c_uint = 6;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
pub type sigval_t = __sigval_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_value: __sigval_t,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_notify: ::std::os::raw::c_int,
    pub _sigev_un: sigevent__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigevent__bindgen_ty_1 {
    pub _pad: [::std::os::raw::c_int; 12usize],
    pub _tid: __pid_t,
    pub _sigev_thread: sigevent__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: [u64; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent__bindgen_ty_1__bindgen_ty_1 {
    pub _function: ::std::option::Option<unsafe extern "C" fn(arg1: __sigval_t)>,
    pub _attribute: *mut pthread_attr_t,
}
#[test]
fn bindgen_test_layout_sigevent__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<sigevent__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(sigevent__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(sigevent__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigevent__bindgen_ty_1__bindgen_ty_1>()))._function as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_function)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigevent__bindgen_ty_1__bindgen_ty_1>()))._attribute as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_attribute)
        )
    );
}
#[test]
fn bindgen_test_layout_sigevent__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<sigevent__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(sigevent__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(sigevent__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent__bindgen_ty_1>()))._pad as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1),
            "::",
            stringify!(_pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent__bindgen_ty_1>()))._tid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1),
            "::",
            stringify!(_tid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigevent__bindgen_ty_1>()))._sigev_thread as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1),
            "::",
            stringify!(_sigev_thread)
        )
    );
}
#[test]
fn bindgen_test_layout_sigevent() {
    assert_eq!(
        ::std::mem::size_of::<sigevent>(),
        64usize,
        concat!("Size of: ", stringify!(sigevent))
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent>(),
        8usize,
        concat!("Alignment of ", stringify!(sigevent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>())).sigev_value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>())).sigev_signo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_signo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>())).sigev_notify as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>()))._sigev_un as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(_sigev_un)
        )
    );
}
pub type sigevent_t = sigevent;
pub const SIGEV_SIGNAL: ::std::os::raw::c_uint = 0;
pub const SIGEV_NONE: ::std::os::raw::c_uint = 1;
pub const SIGEV_THREAD: ::std::os::raw::c_uint = 2;
pub const SIGEV_THREAD_ID: ::std::os::raw::c_uint = 4;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
pub type __sighandler_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
extern "C" {
    pub fn __sysv_signal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t)
        -> __sighandler_t;
}
extern "C" {
    pub fn signal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t) -> __sighandler_t;
}
extern "C" {
    pub fn kill(__pid: __pid_t, __sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn killpg(__pgrp: __pid_t, __sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn raise(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ssignal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t) -> __sighandler_t;
}
extern "C" {
    pub fn gsignal(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psignal(__sig: ::std::os::raw::c_int, __s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn psiginfo(__pinfo: *const siginfo_t, __s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn sigblock(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigsetmask(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn siggetmask() -> ::std::os::raw::c_int;
}
pub type sig_t = __sighandler_t;
extern "C" {
    pub fn sigemptyset(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigfillset(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaddset(__set: *mut sigset_t, __signo: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigdelset(__set: *mut sigset_t, __signo: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigismember(
        __set: *const sigset_t,
        __signo: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_handler: sigaction__bindgen_ty_1,
    pub sa_mask: __sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
    pub sa_restorer: ::std::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigaction__bindgen_ty_1 {
    pub sa_handler: __sighandler_t,
    pub sa_sigaction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut siginfo_t,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_sigaction__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<sigaction__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(sigaction__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<sigaction__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(sigaction__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigaction__bindgen_ty_1>())).sa_handler as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction__bindgen_ty_1),
            "::",
            stringify!(sa_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigaction__bindgen_ty_1>())).sa_sigaction as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction__bindgen_ty_1),
            "::",
            stringify!(sa_sigaction)
        )
    );
}
#[test]
fn bindgen_test_layout_sigaction() {
    assert_eq!(
        ::std::mem::size_of::<sigaction>(),
        152usize,
        concat!("Size of: ", stringify!(sigaction))
    );
    assert_eq!(
        ::std::mem::align_of::<sigaction>(),
        8usize,
        concat!("Alignment of ", stringify!(sigaction))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaction>())).__sigaction_handler as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(__sigaction_handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaction>())).sa_mask as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaction>())).sa_flags as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaction>())).sa_restorer as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_restorer)
        )
    );
}
extern "C" {
    pub fn sigprocmask(
        __how: ::std::os::raw::c_int,
        __set: *const sigset_t,
        __oset: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigsuspend(__set: *const sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaction(
        __sig: ::std::os::raw::c_int,
        __act: *const sigaction,
        __oact: *mut sigaction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigpending(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigwait(
        __set: *const sigset_t,
        __sig: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigwaitinfo(__set: *const sigset_t, __info: *mut siginfo_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigtimedwait(
        __set: *const sigset_t,
        __info: *mut siginfo_t,
        __timeout: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigqueue(
        __pid: __pid_t,
        __sig: ::std::os::raw::c_int,
        __val: sigval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static _sys_siglist: [*const ::std::os::raw::c_char; 65usize];
}
extern "C" {
    pub static sys_siglist: [*const ::std::os::raw::c_char; 65usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fpx_sw_bytes {
    pub magic1: __uint32_t,
    pub extended_size: __uint32_t,
    pub xstate_bv: __uint64_t,
    pub xstate_size: __uint32_t,
    pub __glibc_reserved1: [__uint32_t; 7usize],
}
#[test]
fn bindgen_test_layout__fpx_sw_bytes() {
    assert_eq!(
        ::std::mem::size_of::<_fpx_sw_bytes>(),
        48usize,
        concat!("Size of: ", stringify!(_fpx_sw_bytes))
    );
    assert_eq!(
        ::std::mem::align_of::<_fpx_sw_bytes>(),
        8usize,
        concat!("Alignment of ", stringify!(_fpx_sw_bytes))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpx_sw_bytes>())).magic1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpx_sw_bytes),
            "::",
            stringify!(magic1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpx_sw_bytes>())).extended_size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpx_sw_bytes),
            "::",
            stringify!(extended_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpx_sw_bytes>())).xstate_bv as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpx_sw_bytes),
            "::",
            stringify!(xstate_bv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpx_sw_bytes>())).xstate_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpx_sw_bytes),
            "::",
            stringify!(xstate_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpx_sw_bytes>())).__glibc_reserved1 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpx_sw_bytes),
            "::",
            stringify!(__glibc_reserved1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fpreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__fpreg() {
    assert_eq!(
        ::std::mem::size_of::<_fpreg>(),
        10usize,
        concat!("Size of: ", stringify!(_fpreg))
    );
    assert_eq!(
        ::std::mem::align_of::<_fpreg>(),
        2usize,
        concat!("Alignment of ", stringify!(_fpreg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpreg>())).significand as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpreg),
            "::",
            stringify!(significand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpreg>())).exponent as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpreg),
            "::",
            stringify!(exponent)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fpxreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
    pub __glibc_reserved1: [::std::os::raw::c_ushort; 3usize],
}
#[test]
fn bindgen_test_layout__fpxreg() {
    assert_eq!(
        ::std::mem::size_of::<_fpxreg>(),
        16usize,
        concat!("Size of: ", stringify!(_fpxreg))
    );
    assert_eq!(
        ::std::mem::align_of::<_fpxreg>(),
        2usize,
        concat!("Alignment of ", stringify!(_fpxreg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpxreg>())).significand as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpxreg),
            "::",
            stringify!(significand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpxreg>())).exponent as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpxreg),
            "::",
            stringify!(exponent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpxreg>())).__glibc_reserved1 as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpxreg),
            "::",
            stringify!(__glibc_reserved1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmmreg {
    pub element: [__uint32_t; 4usize],
}
#[test]
fn bindgen_test_layout__xmmreg() {
    assert_eq!(
        ::std::mem::size_of::<_xmmreg>(),
        16usize,
        concat!("Size of: ", stringify!(_xmmreg))
    );
    assert_eq!(
        ::std::mem::align_of::<_xmmreg>(),
        4usize,
        concat!("Alignment of ", stringify!(_xmmreg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xmmreg>())).element as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xmmreg),
            "::",
            stringify!(element)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fpstate {
    pub cwd: __uint16_t,
    pub swd: __uint16_t,
    pub ftw: __uint16_t,
    pub fop: __uint16_t,
    pub rip: __uint64_t,
    pub rdp: __uint64_t,
    pub mxcsr: __uint32_t,
    pub mxcr_mask: __uint32_t,
    pub _st: [_fpxreg; 8usize],
    pub _xmm: [_xmmreg; 16usize],
    pub __glibc_reserved1: [__uint32_t; 24usize],
}
#[test]
fn bindgen_test_layout__fpstate() {
    assert_eq!(
        ::std::mem::size_of::<_fpstate>(),
        512usize,
        concat!("Size of: ", stringify!(_fpstate))
    );
    assert_eq!(
        ::std::mem::align_of::<_fpstate>(),
        8usize,
        concat!("Alignment of ", stringify!(_fpstate))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>())).cwd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(cwd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>())).swd as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(swd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>())).ftw as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(ftw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>())).fop as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(fop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>())).rip as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(rip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>())).rdp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(rdp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>())).mxcsr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(mxcsr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>())).mxcr_mask as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(mxcr_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>()))._st as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(_st)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>()))._xmm as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(_xmm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>())).__glibc_reserved1 as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(__glibc_reserved1)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigcontext {
    pub r8: __uint64_t,
    pub r9: __uint64_t,
    pub r10: __uint64_t,
    pub r11: __uint64_t,
    pub r12: __uint64_t,
    pub r13: __uint64_t,
    pub r14: __uint64_t,
    pub r15: __uint64_t,
    pub rdi: __uint64_t,
    pub rsi: __uint64_t,
    pub rbp: __uint64_t,
    pub rbx: __uint64_t,
    pub rdx: __uint64_t,
    pub rax: __uint64_t,
    pub rcx: __uint64_t,
    pub rsp: __uint64_t,
    pub rip: __uint64_t,
    pub eflags: __uint64_t,
    pub cs: ::std::os::raw::c_ushort,
    pub gs: ::std::os::raw::c_ushort,
    pub fs: ::std::os::raw::c_ushort,
    pub __pad0: ::std::os::raw::c_ushort,
    pub err: __uint64_t,
    pub trapno: __uint64_t,
    pub oldmask: __uint64_t,
    pub cr2: __uint64_t,
    pub __bindgen_anon_1: sigcontext__bindgen_ty_1,
    pub __reserved1: [__uint64_t; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigcontext__bindgen_ty_1 {
    pub fpstate: *mut _fpstate,
    pub __fpstate_word: __uint64_t,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_sigcontext__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<sigcontext__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(sigcontext__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<sigcontext__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(sigcontext__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigcontext__bindgen_ty_1>())).fpstate as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext__bindgen_ty_1),
            "::",
            stringify!(fpstate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigcontext__bindgen_ty_1>())).__fpstate_word as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext__bindgen_ty_1),
            "::",
            stringify!(__fpstate_word)
        )
    );
}
#[test]
fn bindgen_test_layout_sigcontext() {
    assert_eq!(
        ::std::mem::size_of::<sigcontext>(),
        256usize,
        concat!("Size of: ", stringify!(sigcontext))
    );
    assert_eq!(
        ::std::mem::align_of::<sigcontext>(),
        8usize,
        concat!("Alignment of ", stringify!(sigcontext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).r8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).r9 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r9)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).r10 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r10)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).r11 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r11)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).r12 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r12)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).r13 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r13)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).r14 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r14)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).r15 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r15)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).rdi as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rdi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).rsi as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rsi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).rbp as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rbp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).rbx as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rbx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).rdx as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).rax as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).rcx as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rcx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).rsp as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rsp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).rip as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).eflags as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(eflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).cs as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(cs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).gs as *const _ as usize },
        146usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(gs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).fs as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(fs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).__pad0 as *const _ as usize },
        150usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(__pad0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).err as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).trapno as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(trapno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).oldmask as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(oldmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).cr2 as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(cr2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).__reserved1 as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(__reserved1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xsave_hdr {
    pub xstate_bv: __uint64_t,
    pub __glibc_reserved1: [__uint64_t; 2usize],
    pub __glibc_reserved2: [__uint64_t; 5usize],
}
#[test]
fn bindgen_test_layout__xsave_hdr() {
    assert_eq!(
        ::std::mem::size_of::<_xsave_hdr>(),
        64usize,
        concat!("Size of: ", stringify!(_xsave_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<_xsave_hdr>(),
        8usize,
        concat!("Alignment of ", stringify!(_xsave_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xsave_hdr>())).xstate_bv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xsave_hdr),
            "::",
            stringify!(xstate_bv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xsave_hdr>())).__glibc_reserved1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xsave_hdr),
            "::",
            stringify!(__glibc_reserved1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xsave_hdr>())).__glibc_reserved2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_xsave_hdr),
            "::",
            stringify!(__glibc_reserved2)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ymmh_state {
    pub ymmh_space: [__uint32_t; 64usize],
}
#[test]
fn bindgen_test_layout__ymmh_state() {
    assert_eq!(
        ::std::mem::size_of::<_ymmh_state>(),
        256usize,
        concat!("Size of: ", stringify!(_ymmh_state))
    );
    assert_eq!(
        ::std::mem::align_of::<_ymmh_state>(),
        4usize,
        concat!("Alignment of ", stringify!(_ymmh_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ymmh_state>())).ymmh_space as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ymmh_state),
            "::",
            stringify!(ymmh_space)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _xstate {
    pub fpstate: _fpstate,
    pub xstate_hdr: _xsave_hdr,
    pub ymmh: _ymmh_state,
}
#[test]
fn bindgen_test_layout__xstate() {
    assert_eq!(
        ::std::mem::size_of::<_xstate>(),
        832usize,
        concat!("Size of: ", stringify!(_xstate))
    );
    assert_eq!(
        ::std::mem::align_of::<_xstate>(),
        8usize,
        concat!("Alignment of ", stringify!(_xstate))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xstate>())).fpstate as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xstate),
            "::",
            stringify!(fpstate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xstate>())).xstate_hdr as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(_xstate),
            "::",
            stringify!(xstate_hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xstate>())).ymmh as *const _ as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(_xstate),
            "::",
            stringify!(ymmh)
        )
    );
}
extern "C" {
    pub fn sigreturn(__scp: *mut sigcontext) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_t {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_flags: ::std::os::raw::c_int,
    pub ss_size: size_t,
}
#[test]
fn bindgen_test_layout_stack_t() {
    assert_eq!(
        ::std::mem::size_of::<stack_t>(),
        24usize,
        concat!("Size of: ", stringify!(stack_t))
    );
    assert_eq!(
        ::std::mem::align_of::<stack_t>(),
        8usize,
        concat!("Alignment of ", stringify!(stack_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stack_t>())).ss_sp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stack_t),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stack_t>())).ss_flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stack_t),
            "::",
            stringify!(ss_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stack_t>())).ss_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stack_t),
            "::",
            stringify!(ss_size)
        )
    );
}
pub type greg_t = ::std::os::raw::c_longlong;
pub type gregset_t = [greg_t; 23usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _libc_fpxreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
    pub __glibc_reserved1: [::std::os::raw::c_ushort; 3usize],
}
#[test]
fn bindgen_test_layout__libc_fpxreg() {
    assert_eq!(
        ::std::mem::size_of::<_libc_fpxreg>(),
        16usize,
        concat!("Size of: ", stringify!(_libc_fpxreg))
    );
    assert_eq!(
        ::std::mem::align_of::<_libc_fpxreg>(),
        2usize,
        concat!("Alignment of ", stringify!(_libc_fpxreg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpxreg>())).significand as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpxreg),
            "::",
            stringify!(significand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpxreg>())).exponent as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpxreg),
            "::",
            stringify!(exponent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpxreg>())).__glibc_reserved1 as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpxreg),
            "::",
            stringify!(__glibc_reserved1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _libc_xmmreg {
    pub element: [__uint32_t; 4usize],
}
#[test]
fn bindgen_test_layout__libc_xmmreg() {
    assert_eq!(
        ::std::mem::size_of::<_libc_xmmreg>(),
        16usize,
        concat!("Size of: ", stringify!(_libc_xmmreg))
    );
    assert_eq!(
        ::std::mem::align_of::<_libc_xmmreg>(),
        4usize,
        concat!("Alignment of ", stringify!(_libc_xmmreg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_xmmreg>())).element as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_xmmreg),
            "::",
            stringify!(element)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _libc_fpstate {
    pub cwd: __uint16_t,
    pub swd: __uint16_t,
    pub ftw: __uint16_t,
    pub fop: __uint16_t,
    pub rip: __uint64_t,
    pub rdp: __uint64_t,
    pub mxcsr: __uint32_t,
    pub mxcr_mask: __uint32_t,
    pub _st: [_libc_fpxreg; 8usize],
    pub _xmm: [_libc_xmmreg; 16usize],
    pub __glibc_reserved1: [__uint32_t; 24usize],
}
#[test]
fn bindgen_test_layout__libc_fpstate() {
    assert_eq!(
        ::std::mem::size_of::<_libc_fpstate>(),
        512usize,
        concat!("Size of: ", stringify!(_libc_fpstate))
    );
    assert_eq!(
        ::std::mem::align_of::<_libc_fpstate>(),
        8usize,
        concat!("Alignment of ", stringify!(_libc_fpstate))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).cwd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(cwd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).swd as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(swd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).ftw as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(ftw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).fop as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(fop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).rip as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(rip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).rdp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(rdp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).mxcsr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(mxcsr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).mxcr_mask as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(mxcr_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>()))._st as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(_st)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>()))._xmm as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(_xmm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).__glibc_reserved1 as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(__glibc_reserved1)
        )
    );
}
pub type fpregset_t = *mut _libc_fpstate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mcontext_t {
    pub gregs: gregset_t,
    pub fpregs: fpregset_t,
    pub __reserved1: [::std::os::raw::c_ulonglong; 8usize],
}
#[test]
fn bindgen_test_layout_mcontext_t() {
    assert_eq!(
        ::std::mem::size_of::<mcontext_t>(),
        256usize,
        concat!("Size of: ", stringify!(mcontext_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mcontext_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mcontext_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mcontext_t>())).gregs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mcontext_t),
            "::",
            stringify!(gregs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mcontext_t>())).fpregs as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(mcontext_t),
            "::",
            stringify!(fpregs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mcontext_t>())).__reserved1 as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(mcontext_t),
            "::",
            stringify!(__reserved1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ucontext_t {
    pub uc_flags: ::std::os::raw::c_ulong,
    pub uc_link: *mut ucontext_t,
    pub uc_stack: stack_t,
    pub uc_mcontext: mcontext_t,
    pub uc_sigmask: sigset_t,
    pub __fpregs_mem: _libc_fpstate,
    pub __ssp: [::std::os::raw::c_ulonglong; 4usize],
}
#[test]
fn bindgen_test_layout_ucontext_t() {
    assert_eq!(
        ::std::mem::size_of::<ucontext_t>(),
        968usize,
        concat!("Size of: ", stringify!(ucontext_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ucontext_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ucontext_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ucontext_t>())).uc_flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(uc_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ucontext_t>())).uc_link as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(uc_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ucontext_t>())).uc_stack as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(uc_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ucontext_t>())).uc_mcontext as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(uc_mcontext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ucontext_t>())).uc_sigmask as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(uc_sigmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ucontext_t>())).__fpregs_mem as *const _ as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(__fpregs_mem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ucontext_t>())).__ssp as *const _ as usize },
        936usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(__ssp)
        )
    );
}
extern "C" {
    pub fn siginterrupt(
        __sig: ::std::os::raw::c_int,
        __interrupt: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const SS_ONSTACK: ::std::os::raw::c_uint = 1;
pub const SS_DISABLE: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
extern "C" {
    pub fn sigaltstack(__ss: *const stack_t, __oss: *mut stack_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_onstack: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigstack() {
    assert_eq!(
        ::std::mem::size_of::<sigstack>(),
        16usize,
        concat!("Size of: ", stringify!(sigstack))
    );
    assert_eq!(
        ::std::mem::align_of::<sigstack>(),
        8usize,
        concat!("Alignment of ", stringify!(sigstack))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigstack>())).ss_sp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigstack),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigstack>())).ss_onstack as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigstack),
            "::",
            stringify!(ss_onstack)
        )
    );
}
extern "C" {
    pub fn sigstack(__ss: *mut sigstack, __oss: *mut sigstack) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_sigmask(
        __how: ::std::os::raw::c_int,
        __newmask: *const __sigset_t,
        __oldmask: *mut __sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_kill(
        __threadid: pthread_t,
        __signo: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __libc_current_sigrtmin() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __libc_current_sigrtmax() -> ::std::os::raw::c_int;
}
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type mp_limb_t = ::std::os::raw::c_ulong;
pub type mp_limb_signed_t = ::std::os::raw::c_long;
pub type mp_bitcnt_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __mpz_struct {
    pub _mp_alloc: ::std::os::raw::c_int,
    pub _mp_size: ::std::os::raw::c_int,
    pub _mp_d: *mut mp_limb_t,
}
#[test]
fn bindgen_test_layout___mpz_struct() {
    assert_eq!(
        ::std::mem::size_of::<__mpz_struct>(),
        16usize,
        concat!("Size of: ", stringify!(__mpz_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__mpz_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__mpz_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mpz_struct>()))._mp_alloc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mpz_struct),
            "::",
            stringify!(_mp_alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mpz_struct>()))._mp_size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mpz_struct),
            "::",
            stringify!(_mp_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mpz_struct>()))._mp_d as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mpz_struct),
            "::",
            stringify!(_mp_d)
        )
    );
}
pub type MP_INT = __mpz_struct;
pub type mpz_t = [__mpz_struct; 1usize];
pub type mp_ptr = *mut mp_limb_t;
pub type mp_srcptr = *const mp_limb_t;
pub type mp_size_t = ::std::os::raw::c_long;
pub type mp_exp_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __mpq_struct {
    pub _mp_num: __mpz_struct,
    pub _mp_den: __mpz_struct,
}
#[test]
fn bindgen_test_layout___mpq_struct() {
    assert_eq!(
        ::std::mem::size_of::<__mpq_struct>(),
        32usize,
        concat!("Size of: ", stringify!(__mpq_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__mpq_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__mpq_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mpq_struct>()))._mp_num as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mpq_struct),
            "::",
            stringify!(_mp_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mpq_struct>()))._mp_den as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mpq_struct),
            "::",
            stringify!(_mp_den)
        )
    );
}
pub type MP_RAT = __mpq_struct;
pub type mpq_t = [__mpq_struct; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __mpf_struct {
    pub _mp_prec: ::std::os::raw::c_int,
    pub _mp_size: ::std::os::raw::c_int,
    pub _mp_exp: mp_exp_t,
    pub _mp_d: *mut mp_limb_t,
}
#[test]
fn bindgen_test_layout___mpf_struct() {
    assert_eq!(
        ::std::mem::size_of::<__mpf_struct>(),
        24usize,
        concat!("Size of: ", stringify!(__mpf_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__mpf_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__mpf_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mpf_struct>()))._mp_prec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mpf_struct),
            "::",
            stringify!(_mp_prec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mpf_struct>()))._mp_size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mpf_struct),
            "::",
            stringify!(_mp_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mpf_struct>()))._mp_exp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mpf_struct),
            "::",
            stringify!(_mp_exp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mpf_struct>()))._mp_d as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mpf_struct),
            "::",
            stringify!(_mp_d)
        )
    );
}
pub type mpf_t = [__mpf_struct; 1usize];
pub const gmp_randalg_t_GMP_RAND_ALG_DEFAULT: gmp_randalg_t = 0;
pub const gmp_randalg_t_GMP_RAND_ALG_LC: gmp_randalg_t = 0;
pub type gmp_randalg_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __gmp_randstate_struct {
    pub _mp_seed: mpz_t,
    pub _mp_alg: gmp_randalg_t,
    pub _mp_algdata: __gmp_randstate_struct__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __gmp_randstate_struct__bindgen_ty_1 {
    pub _mp_lc: *mut ::std::os::raw::c_void,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout___gmp_randstate_struct__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__gmp_randstate_struct__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__gmp_randstate_struct__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gmp_randstate_struct__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__gmp_randstate_struct__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__gmp_randstate_struct__bindgen_ty_1>()))._mp_lc as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__gmp_randstate_struct__bindgen_ty_1),
            "::",
            stringify!(_mp_lc)
        )
    );
}
#[test]
fn bindgen_test_layout___gmp_randstate_struct() {
    assert_eq!(
        ::std::mem::size_of::<__gmp_randstate_struct>(),
        32usize,
        concat!("Size of: ", stringify!(__gmp_randstate_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__gmp_randstate_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__gmp_randstate_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__gmp_randstate_struct>()))._mp_seed as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__gmp_randstate_struct),
            "::",
            stringify!(_mp_seed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__gmp_randstate_struct>()))._mp_alg as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__gmp_randstate_struct),
            "::",
            stringify!(_mp_alg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__gmp_randstate_struct>()))._mp_algdata as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__gmp_randstate_struct),
            "::",
            stringify!(_mp_algdata)
        )
    );
}
pub type gmp_randstate_t = [__gmp_randstate_struct; 1usize];
pub type mpz_srcptr = *const __mpz_struct;
pub type mpz_ptr = *mut __mpz_struct;
pub type mpf_srcptr = *const __mpf_struct;
pub type mpf_ptr = *mut __mpf_struct;
pub type mpq_srcptr = *const __mpq_struct;
pub type mpq_ptr = *mut __mpq_struct;
extern "C" {
    pub fn __gmp_set_memory_functions(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(arg1: size_t) -> *mut ::std::os::raw::c_void,
        >,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: size_t,
                arg3: size_t,
            ) -> *mut ::std::os::raw::c_void,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: size_t),
        >,
    );
}
extern "C" {
    pub fn __gmp_get_memory_functions(
        arg1: *mut ::std::option::Option<
            unsafe extern "C" fn(arg1: size_t) -> *mut ::std::os::raw::c_void,
        >,
        arg2: *mut ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: size_t,
                arg3: size_t,
            ) -> *mut ::std::os::raw::c_void,
        >,
        arg3: *mut ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: size_t),
        >,
    );
}
extern "C" {
    pub static __gmp_bits_per_limb: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __gmp_errno: ::std::os::raw::c_int;
}
extern "C" {
    pub static __gmp_version: *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn __gmp_randinit(arg1: *mut __gmp_randstate_struct, arg2: gmp_randalg_t, ...);
}
extern "C" {
    pub fn __gmp_randinit_default(arg1: *mut __gmp_randstate_struct);
}
extern "C" {
    pub fn __gmp_randinit_lc_2exp(
        arg1: *mut __gmp_randstate_struct,
        arg2: mpz_srcptr,
        arg3: ::std::os::raw::c_ulong,
        arg4: mp_bitcnt_t,
    );
}
extern "C" {
    pub fn __gmp_randinit_lc_2exp_size(
        arg1: *mut __gmp_randstate_struct,
        arg2: mp_bitcnt_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmp_randinit_mt(arg1: *mut __gmp_randstate_struct);
}
extern "C" {
    pub fn __gmp_randinit_set(
        arg1: *mut __gmp_randstate_struct,
        arg2: *const __gmp_randstate_struct,
    );
}
extern "C" {
    pub fn __gmp_randseed(arg1: *mut __gmp_randstate_struct, arg2: mpz_srcptr);
}
extern "C" {
    pub fn __gmp_randseed_ui(arg1: *mut __gmp_randstate_struct, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmp_randclear(arg1: *mut __gmp_randstate_struct);
}
extern "C" {
    pub fn __gmp_urandomb_ui(
        arg1: *mut __gmp_randstate_struct,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmp_urandomm_ui(
        arg1: *mut __gmp_randstate_struct,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmp_asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmp_printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmp_snprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: size_t,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmp_sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmp_scanf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmp_sscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_realloc(arg1: mpz_ptr, arg2: mp_size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __gmpz_abs(arg1: mpz_ptr, arg2: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_add(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_add_ui(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_addmul(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_addmul_ui(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_and(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_array_init(arg1: mpz_ptr, arg2: mp_size_t, arg3: mp_size_t);
}
extern "C" {
    pub fn __gmpz_bin_ui(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_bin_uiui(
        arg1: mpz_ptr,
        arg2: ::std::os::raw::c_ulong,
        arg3: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn __gmpz_cdiv_q(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_cdiv_q_2exp(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpz_cdiv_q_ui(
        arg1: mpz_ptr,
        arg2: mpz_srcptr,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpz_cdiv_qr(arg1: mpz_ptr, arg2: mpz_ptr, arg3: mpz_srcptr, arg4: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_cdiv_qr_ui(
        arg1: mpz_ptr,
        arg2: mpz_ptr,
        arg3: mpz_srcptr,
        arg4: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpz_cdiv_r(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_cdiv_r_2exp(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpz_cdiv_r_ui(
        arg1: mpz_ptr,
        arg2: mpz_srcptr,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpz_cdiv_ui(
        arg1: mpz_srcptr,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpz_clear(arg1: mpz_ptr);
}
extern "C" {
    pub fn __gmpz_clears(arg1: mpz_ptr, ...);
}
extern "C" {
    pub fn __gmpz_clrbit(arg1: mpz_ptr, arg2: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpz_cmp(arg1: mpz_srcptr, arg2: mpz_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_cmp_d(arg1: mpz_srcptr, arg2: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_cmp_si(arg1: mpz_srcptr, arg2: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_cmp_ui(arg1: mpz_srcptr, arg2: ::std::os::raw::c_ulong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_cmpabs(arg1: mpz_srcptr, arg2: mpz_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_cmpabs_d(arg1: mpz_srcptr, arg2: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_cmpabs_ui(
        arg1: mpz_srcptr,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_com(arg1: mpz_ptr, arg2: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_combit(arg1: mpz_ptr, arg2: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpz_congruent_p(
        arg1: mpz_srcptr,
        arg2: mpz_srcptr,
        arg3: mpz_srcptr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_congruent_2exp_p(
        arg1: mpz_srcptr,
        arg2: mpz_srcptr,
        arg3: mp_bitcnt_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_congruent_ui_p(
        arg1: mpz_srcptr,
        arg2: ::std::os::raw::c_ulong,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_divexact(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_divexact_ui(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_divisible_p(arg1: mpz_srcptr, arg2: mpz_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_divisible_ui_p(
        arg1: mpz_srcptr,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_divisible_2exp_p(arg1: mpz_srcptr, arg2: mp_bitcnt_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_dump(arg1: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_export(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut size_t,
        arg3: ::std::os::raw::c_int,
        arg4: size_t,
        arg5: ::std::os::raw::c_int,
        arg6: size_t,
        arg7: mpz_srcptr,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __gmpz_fac_ui(arg1: mpz_ptr, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_2fac_ui(arg1: mpz_ptr, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_mfac_uiui(
        arg1: mpz_ptr,
        arg2: ::std::os::raw::c_ulong,
        arg3: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn __gmpz_primorial_ui(arg1: mpz_ptr, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_fdiv_q(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_fdiv_q_2exp(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpz_fdiv_q_ui(
        arg1: mpz_ptr,
        arg2: mpz_srcptr,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpz_fdiv_qr(arg1: mpz_ptr, arg2: mpz_ptr, arg3: mpz_srcptr, arg4: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_fdiv_qr_ui(
        arg1: mpz_ptr,
        arg2: mpz_ptr,
        arg3: mpz_srcptr,
        arg4: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpz_fdiv_r(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_fdiv_r_2exp(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpz_fdiv_r_ui(
        arg1: mpz_ptr,
        arg2: mpz_srcptr,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpz_fdiv_ui(
        arg1: mpz_srcptr,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpz_fib_ui(arg1: mpz_ptr, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_fib2_ui(arg1: mpz_ptr, arg2: mpz_ptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_fits_sint_p(arg1: mpz_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_fits_slong_p(arg1: mpz_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_fits_sshort_p(arg1: mpz_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_fits_uint_p(arg1: mpz_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_fits_ulong_p(arg1: mpz_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_fits_ushort_p(arg1: mpz_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_gcd(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_gcd_ui(
        arg1: mpz_ptr,
        arg2: mpz_srcptr,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpz_gcdext(
        arg1: mpz_ptr,
        arg2: mpz_ptr,
        arg3: mpz_ptr,
        arg4: mpz_srcptr,
        arg5: mpz_srcptr,
    );
}
extern "C" {
    pub fn __gmpz_get_d(arg1: mpz_srcptr) -> f64;
}
extern "C" {
    pub fn __gmpz_get_d_2exp(arg1: *mut ::std::os::raw::c_long, arg2: mpz_srcptr) -> f64;
}
extern "C" {
    pub fn __gmpz_get_si(arg1: mpz_srcptr) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __gmpz_get_str(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: mpz_srcptr,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __gmpz_get_ui(arg1: mpz_srcptr) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpz_getlimbn(arg1: mpz_srcptr, arg2: mp_size_t) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpz_hamdist(arg1: mpz_srcptr, arg2: mpz_srcptr) -> mp_bitcnt_t;
}
extern "C" {
    pub fn __gmpz_import(
        arg1: mpz_ptr,
        arg2: size_t,
        arg3: ::std::os::raw::c_int,
        arg4: size_t,
        arg5: ::std::os::raw::c_int,
        arg6: size_t,
        arg7: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn __gmpz_init(arg1: mpz_ptr);
}
extern "C" {
    pub fn __gmpz_init2(arg1: mpz_ptr, arg2: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpz_inits(arg1: mpz_ptr, ...);
}
extern "C" {
    pub fn __gmpz_init_set(arg1: mpz_ptr, arg2: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_init_set_d(arg1: mpz_ptr, arg2: f64);
}
extern "C" {
    pub fn __gmpz_init_set_si(arg1: mpz_ptr, arg2: ::std::os::raw::c_long);
}
extern "C" {
    pub fn __gmpz_init_set_str(
        arg1: mpz_ptr,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_init_set_ui(arg1: mpz_ptr, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_invert(
        arg1: mpz_ptr,
        arg2: mpz_srcptr,
        arg3: mpz_srcptr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_ior(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_jacobi(arg1: mpz_srcptr, arg2: mpz_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_kronecker_si(
        arg1: mpz_srcptr,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_kronecker_ui(
        arg1: mpz_srcptr,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_si_kronecker(
        arg1: ::std::os::raw::c_long,
        arg2: mpz_srcptr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_ui_kronecker(
        arg1: ::std::os::raw::c_ulong,
        arg2: mpz_srcptr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_lcm(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_lcm_ui(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_lucnum_ui(arg1: mpz_ptr, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_lucnum2_ui(arg1: mpz_ptr, arg2: mpz_ptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_millerrabin(
        arg1: mpz_srcptr,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_mod(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_mul(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_mul_2exp(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpz_mul_si(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: ::std::os::raw::c_long);
}
extern "C" {
    pub fn __gmpz_mul_ui(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_neg(arg1: mpz_ptr, arg2: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_nextprime(arg1: mpz_ptr, arg2: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_perfect_power_p(arg1: mpz_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_perfect_square_p(arg1: mpz_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_popcount(arg1: mpz_srcptr) -> mp_bitcnt_t;
}
extern "C" {
    pub fn __gmpz_pow_ui(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_powm(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr, arg4: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_powm_sec(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr, arg4: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_powm_ui(
        arg1: mpz_ptr,
        arg2: mpz_srcptr,
        arg3: ::std::os::raw::c_ulong,
        arg4: mpz_srcptr,
    );
}
extern "C" {
    pub fn __gmpz_probab_prime_p(
        arg1: mpz_srcptr,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_random(arg1: mpz_ptr, arg2: mp_size_t);
}
extern "C" {
    pub fn __gmpz_random2(arg1: mpz_ptr, arg2: mp_size_t);
}
extern "C" {
    pub fn __gmpz_realloc2(arg1: mpz_ptr, arg2: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpz_remove(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr) -> mp_bitcnt_t;
}
extern "C" {
    pub fn __gmpz_root(
        arg1: mpz_ptr,
        arg2: mpz_srcptr,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_rootrem(
        arg1: mpz_ptr,
        arg2: mpz_ptr,
        arg3: mpz_srcptr,
        arg4: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn __gmpz_rrandomb(arg1: mpz_ptr, arg2: *mut __gmp_randstate_struct, arg3: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpz_scan0(arg1: mpz_srcptr, arg2: mp_bitcnt_t) -> mp_bitcnt_t;
}
extern "C" {
    pub fn __gmpz_scan1(arg1: mpz_srcptr, arg2: mp_bitcnt_t) -> mp_bitcnt_t;
}
extern "C" {
    pub fn __gmpz_set(arg1: mpz_ptr, arg2: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_set_d(arg1: mpz_ptr, arg2: f64);
}
extern "C" {
    pub fn __gmpz_set_f(arg1: mpz_ptr, arg2: mpf_srcptr);
}
extern "C" {
    pub fn __gmpz_set_q(arg1: mpz_ptr, arg2: mpq_srcptr);
}
extern "C" {
    pub fn __gmpz_set_si(arg1: mpz_ptr, arg2: ::std::os::raw::c_long);
}
extern "C" {
    pub fn __gmpz_set_str(
        arg1: mpz_ptr,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_set_ui(arg1: mpz_ptr, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_setbit(arg1: mpz_ptr, arg2: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpz_size(arg1: mpz_srcptr) -> size_t;
}
extern "C" {
    pub fn __gmpz_sizeinbase(arg1: mpz_srcptr, arg2: ::std::os::raw::c_int) -> size_t;
}
extern "C" {
    pub fn __gmpz_sqrt(arg1: mpz_ptr, arg2: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_sqrtrem(arg1: mpz_ptr, arg2: mpz_ptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_sub(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_sub_ui(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_ui_sub(arg1: mpz_ptr, arg2: ::std::os::raw::c_ulong, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_submul(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_submul_ui(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpz_swap(arg1: mpz_ptr, arg2: mpz_ptr);
}
extern "C" {
    pub fn __gmpz_tdiv_ui(
        arg1: mpz_srcptr,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpz_tdiv_q(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_tdiv_q_2exp(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpz_tdiv_q_ui(
        arg1: mpz_ptr,
        arg2: mpz_srcptr,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpz_tdiv_qr(arg1: mpz_ptr, arg2: mpz_ptr, arg3: mpz_srcptr, arg4: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_tdiv_qr_ui(
        arg1: mpz_ptr,
        arg2: mpz_ptr,
        arg3: mpz_srcptr,
        arg4: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpz_tdiv_r(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_tdiv_r_2exp(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpz_tdiv_r_ui(
        arg1: mpz_ptr,
        arg2: mpz_srcptr,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpz_tstbit(arg1: mpz_srcptr, arg2: mp_bitcnt_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpz_ui_pow_ui(
        arg1: mpz_ptr,
        arg2: ::std::os::raw::c_ulong,
        arg3: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn __gmpz_urandomb(arg1: mpz_ptr, arg2: *mut __gmp_randstate_struct, arg3: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpz_urandomm(arg1: mpz_ptr, arg2: *mut __gmp_randstate_struct, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_xor(arg1: mpz_ptr, arg2: mpz_srcptr, arg3: mpz_srcptr);
}
extern "C" {
    pub fn __gmpz_limbs_read(arg1: mpz_srcptr) -> mp_srcptr;
}
extern "C" {
    pub fn __gmpz_limbs_write(arg1: mpz_ptr, arg2: mp_size_t) -> mp_ptr;
}
extern "C" {
    pub fn __gmpz_limbs_modify(arg1: mpz_ptr, arg2: mp_size_t) -> mp_ptr;
}
extern "C" {
    pub fn __gmpz_limbs_finish(arg1: mpz_ptr, arg2: mp_size_t);
}
extern "C" {
    pub fn __gmpz_roinit_n(arg1: mpz_ptr, arg2: mp_srcptr, arg3: mp_size_t) -> mpz_srcptr;
}
extern "C" {
    pub fn __gmpq_abs(arg1: mpq_ptr, arg2: mpq_srcptr);
}
extern "C" {
    pub fn __gmpq_add(arg1: mpq_ptr, arg2: mpq_srcptr, arg3: mpq_srcptr);
}
extern "C" {
    pub fn __gmpq_canonicalize(arg1: mpq_ptr);
}
extern "C" {
    pub fn __gmpq_clear(arg1: mpq_ptr);
}
extern "C" {
    pub fn __gmpq_clears(arg1: mpq_ptr, ...);
}
extern "C" {
    pub fn __gmpq_cmp(arg1: mpq_srcptr, arg2: mpq_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpq_cmp_si(
        arg1: mpq_srcptr,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpq_cmp_ui(
        arg1: mpq_srcptr,
        arg2: ::std::os::raw::c_ulong,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpq_cmp_z(arg1: mpq_srcptr, arg2: mpz_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpq_div(arg1: mpq_ptr, arg2: mpq_srcptr, arg3: mpq_srcptr);
}
extern "C" {
    pub fn __gmpq_div_2exp(arg1: mpq_ptr, arg2: mpq_srcptr, arg3: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpq_equal(arg1: mpq_srcptr, arg2: mpq_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpq_get_num(arg1: mpz_ptr, arg2: mpq_srcptr);
}
extern "C" {
    pub fn __gmpq_get_den(arg1: mpz_ptr, arg2: mpq_srcptr);
}
extern "C" {
    pub fn __gmpq_get_d(arg1: mpq_srcptr) -> f64;
}
extern "C" {
    pub fn __gmpq_get_str(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: mpq_srcptr,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __gmpq_init(arg1: mpq_ptr);
}
extern "C" {
    pub fn __gmpq_inits(arg1: mpq_ptr, ...);
}
extern "C" {
    pub fn __gmpq_inv(arg1: mpq_ptr, arg2: mpq_srcptr);
}
extern "C" {
    pub fn __gmpq_mul(arg1: mpq_ptr, arg2: mpq_srcptr, arg3: mpq_srcptr);
}
extern "C" {
    pub fn __gmpq_mul_2exp(arg1: mpq_ptr, arg2: mpq_srcptr, arg3: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpq_neg(arg1: mpq_ptr, arg2: mpq_srcptr);
}
extern "C" {
    pub fn __gmpq_set(arg1: mpq_ptr, arg2: mpq_srcptr);
}
extern "C" {
    pub fn __gmpq_set_d(arg1: mpq_ptr, arg2: f64);
}
extern "C" {
    pub fn __gmpq_set_den(arg1: mpq_ptr, arg2: mpz_srcptr);
}
extern "C" {
    pub fn __gmpq_set_f(arg1: mpq_ptr, arg2: mpf_srcptr);
}
extern "C" {
    pub fn __gmpq_set_num(arg1: mpq_ptr, arg2: mpz_srcptr);
}
extern "C" {
    pub fn __gmpq_set_si(
        arg1: mpq_ptr,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn __gmpq_set_str(
        arg1: mpq_ptr,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpq_set_ui(
        arg1: mpq_ptr,
        arg2: ::std::os::raw::c_ulong,
        arg3: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn __gmpq_set_z(arg1: mpq_ptr, arg2: mpz_srcptr);
}
extern "C" {
    pub fn __gmpq_sub(arg1: mpq_ptr, arg2: mpq_srcptr, arg3: mpq_srcptr);
}
extern "C" {
    pub fn __gmpq_swap(arg1: mpq_ptr, arg2: mpq_ptr);
}
extern "C" {
    pub fn __gmpf_abs(arg1: mpf_ptr, arg2: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_add(arg1: mpf_ptr, arg2: mpf_srcptr, arg3: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_add_ui(arg1: mpf_ptr, arg2: mpf_srcptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpf_ceil(arg1: mpf_ptr, arg2: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_clear(arg1: mpf_ptr);
}
extern "C" {
    pub fn __gmpf_clears(arg1: mpf_ptr, ...);
}
extern "C" {
    pub fn __gmpf_cmp(arg1: mpf_srcptr, arg2: mpf_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_cmp_z(arg1: mpf_srcptr, arg2: mpz_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_cmp_d(arg1: mpf_srcptr, arg2: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_cmp_si(arg1: mpf_srcptr, arg2: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_cmp_ui(arg1: mpf_srcptr, arg2: ::std::os::raw::c_ulong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_div(arg1: mpf_ptr, arg2: mpf_srcptr, arg3: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_div_2exp(arg1: mpf_ptr, arg2: mpf_srcptr, arg3: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpf_div_ui(arg1: mpf_ptr, arg2: mpf_srcptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpf_dump(arg1: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_eq(
        arg1: mpf_srcptr,
        arg2: mpf_srcptr,
        arg3: mp_bitcnt_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_fits_sint_p(arg1: mpf_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_fits_slong_p(arg1: mpf_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_fits_sshort_p(arg1: mpf_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_fits_uint_p(arg1: mpf_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_fits_ulong_p(arg1: mpf_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_fits_ushort_p(arg1: mpf_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_floor(arg1: mpf_ptr, arg2: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_get_d(arg1: mpf_srcptr) -> f64;
}
extern "C" {
    pub fn __gmpf_get_d_2exp(arg1: *mut ::std::os::raw::c_long, arg2: mpf_srcptr) -> f64;
}
extern "C" {
    pub fn __gmpf_get_default_prec() -> mp_bitcnt_t;
}
extern "C" {
    pub fn __gmpf_get_prec(arg1: mpf_srcptr) -> mp_bitcnt_t;
}
extern "C" {
    pub fn __gmpf_get_si(arg1: mpf_srcptr) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __gmpf_get_str(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut mp_exp_t,
        arg3: ::std::os::raw::c_int,
        arg4: size_t,
        arg5: mpf_srcptr,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __gmpf_get_ui(arg1: mpf_srcptr) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __gmpf_init(arg1: mpf_ptr);
}
extern "C" {
    pub fn __gmpf_init2(arg1: mpf_ptr, arg2: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpf_inits(arg1: mpf_ptr, ...);
}
extern "C" {
    pub fn __gmpf_init_set(arg1: mpf_ptr, arg2: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_init_set_d(arg1: mpf_ptr, arg2: f64);
}
extern "C" {
    pub fn __gmpf_init_set_si(arg1: mpf_ptr, arg2: ::std::os::raw::c_long);
}
extern "C" {
    pub fn __gmpf_init_set_str(
        arg1: mpf_ptr,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_init_set_ui(arg1: mpf_ptr, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpf_integer_p(arg1: mpf_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_mul(arg1: mpf_ptr, arg2: mpf_srcptr, arg3: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_mul_2exp(arg1: mpf_ptr, arg2: mpf_srcptr, arg3: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpf_mul_ui(arg1: mpf_ptr, arg2: mpf_srcptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpf_neg(arg1: mpf_ptr, arg2: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_pow_ui(arg1: mpf_ptr, arg2: mpf_srcptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpf_random2(arg1: mpf_ptr, arg2: mp_size_t, arg3: mp_exp_t);
}
extern "C" {
    pub fn __gmpf_reldiff(arg1: mpf_ptr, arg2: mpf_srcptr, arg3: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_set(arg1: mpf_ptr, arg2: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_set_d(arg1: mpf_ptr, arg2: f64);
}
extern "C" {
    pub fn __gmpf_set_default_prec(arg1: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpf_set_prec(arg1: mpf_ptr, arg2: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpf_set_prec_raw(arg1: mpf_ptr, arg2: mp_bitcnt_t);
}
extern "C" {
    pub fn __gmpf_set_q(arg1: mpf_ptr, arg2: mpq_srcptr);
}
extern "C" {
    pub fn __gmpf_set_si(arg1: mpf_ptr, arg2: ::std::os::raw::c_long);
}
extern "C" {
    pub fn __gmpf_set_str(
        arg1: mpf_ptr,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpf_set_ui(arg1: mpf_ptr, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpf_set_z(arg1: mpf_ptr, arg2: mpz_srcptr);
}
extern "C" {
    pub fn __gmpf_size(arg1: mpf_srcptr) -> size_t;
}
extern "C" {
    pub fn __gmpf_sqrt(arg1: mpf_ptr, arg2: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_sqrt_ui(arg1: mpf_ptr, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpf_sub(arg1: mpf_ptr, arg2: mpf_srcptr, arg3: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_sub_ui(arg1: mpf_ptr, arg2: mpf_srcptr, arg3: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __gmpf_swap(arg1: mpf_ptr, arg2: mpf_ptr);
}
extern "C" {
    pub fn __gmpf_trunc(arg1: mpf_ptr, arg2: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_ui_div(arg1: mpf_ptr, arg2: ::std::os::raw::c_ulong, arg3: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_ui_sub(arg1: mpf_ptr, arg2: ::std::os::raw::c_ulong, arg3: mpf_srcptr);
}
extern "C" {
    pub fn __gmpf_urandomb(
        arg1: *mut __mpf_struct,
        arg2: *mut __gmp_randstate_struct,
        arg3: mp_bitcnt_t,
    );
}
extern "C" {
    pub fn __gmpn_add(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: mp_srcptr,
        arg5: mp_size_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_add_1(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: mp_limb_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_add_n(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_srcptr,
        arg4: mp_size_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_addmul_1(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: mp_limb_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_cmp(arg1: mp_srcptr, arg2: mp_srcptr, arg3: mp_size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpn_zero_p(arg1: mp_srcptr, arg2: mp_size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpn_divexact_1(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_size_t, arg4: mp_limb_t);
}
extern "C" {
    pub fn __gmpn_divexact_by3c(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: mp_limb_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_divrem(
        arg1: mp_ptr,
        arg2: mp_size_t,
        arg3: mp_ptr,
        arg4: mp_size_t,
        arg5: mp_srcptr,
        arg6: mp_size_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_divrem_1(
        arg1: mp_ptr,
        arg2: mp_size_t,
        arg3: mp_srcptr,
        arg4: mp_size_t,
        arg5: mp_limb_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_divrem_2(
        arg1: mp_ptr,
        arg2: mp_size_t,
        arg3: mp_ptr,
        arg4: mp_size_t,
        arg5: mp_srcptr,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_div_qr_1(
        arg1: mp_ptr,
        arg2: *mut mp_limb_t,
        arg3: mp_srcptr,
        arg4: mp_size_t,
        arg5: mp_limb_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_div_qr_2(
        arg1: mp_ptr,
        arg2: mp_ptr,
        arg3: mp_srcptr,
        arg4: mp_size_t,
        arg5: mp_srcptr,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_gcd(
        arg1: mp_ptr,
        arg2: mp_ptr,
        arg3: mp_size_t,
        arg4: mp_ptr,
        arg5: mp_size_t,
    ) -> mp_size_t;
}
extern "C" {
    pub fn __gmpn_gcd_1(arg1: mp_srcptr, arg2: mp_size_t, arg3: mp_limb_t) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_gcdext_1(
        arg1: *mut mp_limb_signed_t,
        arg2: *mut mp_limb_signed_t,
        arg3: mp_limb_t,
        arg4: mp_limb_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_gcdext(
        arg1: mp_ptr,
        arg2: mp_ptr,
        arg3: *mut mp_size_t,
        arg4: mp_ptr,
        arg5: mp_size_t,
        arg6: mp_ptr,
        arg7: mp_size_t,
    ) -> mp_size_t;
}
extern "C" {
    pub fn __gmpn_get_str(
        arg1: *mut ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_int,
        arg3: mp_ptr,
        arg4: mp_size_t,
    ) -> size_t;
}
extern "C" {
    pub fn __gmpn_hamdist(arg1: mp_srcptr, arg2: mp_srcptr, arg3: mp_size_t) -> mp_bitcnt_t;
}
extern "C" {
    pub fn __gmpn_lshift(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: ::std::os::raw::c_uint,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_mod_1(arg1: mp_srcptr, arg2: mp_size_t, arg3: mp_limb_t) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_mul(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: mp_srcptr,
        arg5: mp_size_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_mul_1(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: mp_limb_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_mul_n(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_srcptr, arg4: mp_size_t);
}
extern "C" {
    pub fn __gmpn_sqr(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_size_t);
}
extern "C" {
    pub fn __gmpn_neg(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_size_t) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_com(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_size_t);
}
extern "C" {
    pub fn __gmpn_perfect_square_p(arg1: mp_srcptr, arg2: mp_size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpn_perfect_power_p(arg1: mp_srcptr, arg2: mp_size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpn_popcount(arg1: mp_srcptr, arg2: mp_size_t) -> mp_bitcnt_t;
}
extern "C" {
    pub fn __gmpn_pow_1(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: mp_limb_t,
        arg5: mp_ptr,
    ) -> mp_size_t;
}
extern "C" {
    pub fn __gmpn_preinv_mod_1(
        arg1: mp_srcptr,
        arg2: mp_size_t,
        arg3: mp_limb_t,
        arg4: mp_limb_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_random(arg1: mp_ptr, arg2: mp_size_t);
}
extern "C" {
    pub fn __gmpn_random2(arg1: mp_ptr, arg2: mp_size_t);
}
extern "C" {
    pub fn __gmpn_rshift(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: ::std::os::raw::c_uint,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_scan0(arg1: mp_srcptr, arg2: mp_bitcnt_t) -> mp_bitcnt_t;
}
extern "C" {
    pub fn __gmpn_scan1(arg1: mp_srcptr, arg2: mp_bitcnt_t) -> mp_bitcnt_t;
}
extern "C" {
    pub fn __gmpn_set_str(
        arg1: mp_ptr,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: size_t,
        arg4: ::std::os::raw::c_int,
    ) -> mp_size_t;
}
extern "C" {
    pub fn __gmpn_sizeinbase(
        arg1: mp_srcptr,
        arg2: mp_size_t,
        arg3: ::std::os::raw::c_int,
    ) -> size_t;
}
extern "C" {
    pub fn __gmpn_sqrtrem(
        arg1: mp_ptr,
        arg2: mp_ptr,
        arg3: mp_srcptr,
        arg4: mp_size_t,
    ) -> mp_size_t;
}
extern "C" {
    pub fn __gmpn_sub(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: mp_srcptr,
        arg5: mp_size_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_sub_1(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: mp_limb_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_sub_n(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_srcptr,
        arg4: mp_size_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_submul_1(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: mp_limb_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_tdiv_qr(
        arg1: mp_ptr,
        arg2: mp_ptr,
        arg3: mp_size_t,
        arg4: mp_srcptr,
        arg5: mp_size_t,
        arg6: mp_srcptr,
        arg7: mp_size_t,
    );
}
extern "C" {
    pub fn __gmpn_and_n(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_srcptr, arg4: mp_size_t);
}
extern "C" {
    pub fn __gmpn_andn_n(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_srcptr, arg4: mp_size_t);
}
extern "C" {
    pub fn __gmpn_nand_n(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_srcptr, arg4: mp_size_t);
}
extern "C" {
    pub fn __gmpn_ior_n(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_srcptr, arg4: mp_size_t);
}
extern "C" {
    pub fn __gmpn_iorn_n(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_srcptr, arg4: mp_size_t);
}
extern "C" {
    pub fn __gmpn_nior_n(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_srcptr, arg4: mp_size_t);
}
extern "C" {
    pub fn __gmpn_xor_n(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_srcptr, arg4: mp_size_t);
}
extern "C" {
    pub fn __gmpn_xnor_n(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_srcptr, arg4: mp_size_t);
}
extern "C" {
    pub fn __gmpn_copyi(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_size_t);
}
extern "C" {
    pub fn __gmpn_copyd(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_size_t);
}
extern "C" {
    pub fn __gmpn_zero(arg1: mp_ptr, arg2: mp_size_t);
}
extern "C" {
    pub fn __gmpn_cnd_add_n(
        arg1: mp_limb_t,
        arg2: mp_ptr,
        arg3: mp_srcptr,
        arg4: mp_srcptr,
        arg5: mp_size_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_cnd_sub_n(
        arg1: mp_limb_t,
        arg2: mp_ptr,
        arg3: mp_srcptr,
        arg4: mp_srcptr,
        arg5: mp_size_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_sec_add_1(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: mp_limb_t,
        arg5: mp_ptr,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_sec_add_1_itch(arg1: mp_size_t) -> mp_size_t;
}
extern "C" {
    pub fn __gmpn_sec_sub_1(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: mp_limb_t,
        arg5: mp_ptr,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_sec_sub_1_itch(arg1: mp_size_t) -> mp_size_t;
}
extern "C" {
    pub fn __gmpn_cnd_swap(
        arg1: mp_limb_t,
        arg2: *mut mp_limb_t,
        arg3: *mut mp_limb_t,
        arg4: mp_size_t,
    );
}
extern "C" {
    pub fn __gmpn_sec_mul(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: mp_srcptr,
        arg5: mp_size_t,
        arg6: mp_ptr,
    );
}
extern "C" {
    pub fn __gmpn_sec_mul_itch(arg1: mp_size_t, arg2: mp_size_t) -> mp_size_t;
}
extern "C" {
    pub fn __gmpn_sec_sqr(arg1: mp_ptr, arg2: mp_srcptr, arg3: mp_size_t, arg4: mp_ptr);
}
extern "C" {
    pub fn __gmpn_sec_sqr_itch(arg1: mp_size_t) -> mp_size_t;
}
extern "C" {
    pub fn __gmpn_sec_powm(
        arg1: mp_ptr,
        arg2: mp_srcptr,
        arg3: mp_size_t,
        arg4: mp_srcptr,
        arg5: mp_bitcnt_t,
        arg6: mp_srcptr,
        arg7: mp_size_t,
        arg8: mp_ptr,
    );
}
extern "C" {
    pub fn __gmpn_sec_powm_itch(arg1: mp_size_t, arg2: mp_bitcnt_t, arg3: mp_size_t) -> mp_size_t;
}
extern "C" {
    pub fn __gmpn_sec_tabselect(
        arg1: *mut mp_limb_t,
        arg2: *const mp_limb_t,
        arg3: mp_size_t,
        arg4: mp_size_t,
        arg5: mp_size_t,
    );
}
extern "C" {
    pub fn __gmpn_sec_div_qr(
        arg1: mp_ptr,
        arg2: mp_ptr,
        arg3: mp_size_t,
        arg4: mp_srcptr,
        arg5: mp_size_t,
        arg6: mp_ptr,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn __gmpn_sec_div_qr_itch(arg1: mp_size_t, arg2: mp_size_t) -> mp_size_t;
}
extern "C" {
    pub fn __gmpn_sec_div_r(
        arg1: mp_ptr,
        arg2: mp_size_t,
        arg3: mp_srcptr,
        arg4: mp_size_t,
        arg5: mp_ptr,
    );
}
extern "C" {
    pub fn __gmpn_sec_div_r_itch(arg1: mp_size_t, arg2: mp_size_t) -> mp_size_t;
}
extern "C" {
    pub fn __gmpn_sec_invert(
        arg1: mp_ptr,
        arg2: mp_ptr,
        arg3: mp_srcptr,
        arg4: mp_size_t,
        arg5: mp_bitcnt_t,
        arg6: mp_ptr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __gmpn_sec_invert_itch(arg1: mp_size_t) -> mp_size_t;
}
pub const GMP_ERROR_NONE: ::std::os::raw::c_uint = 0;
pub const GMP_ERROR_UNSUPPORTED_ARGUMENT: ::std::os::raw::c_uint = 1;
pub const GMP_ERROR_DIVISION_BY_ZERO: ::std::os::raw::c_uint = 2;
pub const GMP_ERROR_SQRT_OF_NEGATIVE: ::std::os::raw::c_uint = 4;
pub const GMP_ERROR_INVALID_ARGUMENT: ::std::os::raw::c_uint = 8;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
pub type mpfr_void = ::std::os::raw::c_void;
pub type mpfr_int = ::std::os::raw::c_int;
pub type mpfr_uint = ::std::os::raw::c_uint;
pub type mpfr_long = ::std::os::raw::c_long;
pub type mpfr_ulong = ::std::os::raw::c_ulong;
pub type mpfr_size_t = size_t;
pub type mpfr_flags_t = ::std::os::raw::c_uint;
pub const mpfr_rnd_t_MPFR_RNDN: mpfr_rnd_t = 0;
pub const mpfr_rnd_t_MPFR_RNDZ: mpfr_rnd_t = 1;
pub const mpfr_rnd_t_MPFR_RNDU: mpfr_rnd_t = 2;
pub const mpfr_rnd_t_MPFR_RNDD: mpfr_rnd_t = 3;
pub const mpfr_rnd_t_MPFR_RNDA: mpfr_rnd_t = 4;
pub const mpfr_rnd_t_MPFR_RNDF: mpfr_rnd_t = 5;
pub const mpfr_rnd_t_MPFR_RNDNA: mpfr_rnd_t = -1;
pub type mpfr_rnd_t = ::std::os::raw::c_int;
pub type mpfr_prec_t = ::std::os::raw::c_long;
pub type mpfr_uprec_t = ::std::os::raw::c_ulong;
pub type mpfr_sign_t = ::std::os::raw::c_int;
pub type mpfr_exp_t = ::std::os::raw::c_long;
pub type mpfr_uexp_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __mpfr_struct {
    pub _mpfr_prec: mpfr_prec_t,
    pub _mpfr_sign: mpfr_sign_t,
    pub _mpfr_exp: mpfr_exp_t,
    pub _mpfr_d: *mut mp_limb_t,
}
#[test]
fn bindgen_test_layout___mpfr_struct() {
    assert_eq!(
        ::std::mem::size_of::<__mpfr_struct>(),
        32usize,
        concat!("Size of: ", stringify!(__mpfr_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__mpfr_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__mpfr_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mpfr_struct>()))._mpfr_prec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mpfr_struct),
            "::",
            stringify!(_mpfr_prec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mpfr_struct>()))._mpfr_sign as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mpfr_struct),
            "::",
            stringify!(_mpfr_sign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mpfr_struct>()))._mpfr_exp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mpfr_struct),
            "::",
            stringify!(_mpfr_exp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mpfr_struct>()))._mpfr_d as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mpfr_struct),
            "::",
            stringify!(_mpfr_d)
        )
    );
}
pub type mpfr_t = [__mpfr_struct; 1usize];
pub type mpfr_ptr = *mut __mpfr_struct;
pub type mpfr_srcptr = *const __mpfr_struct;
pub const mpfr_kind_t_MPFR_NAN_KIND: mpfr_kind_t = 0;
pub const mpfr_kind_t_MPFR_INF_KIND: mpfr_kind_t = 1;
pub const mpfr_kind_t_MPFR_ZERO_KIND: mpfr_kind_t = 2;
pub const mpfr_kind_t_MPFR_REGULAR_KIND: mpfr_kind_t = 3;
pub type mpfr_kind_t = ::std::os::raw::c_uint;
pub const mpfr_free_cache_t_MPFR_FREE_LOCAL_CACHE: mpfr_free_cache_t = 1;
pub const mpfr_free_cache_t_MPFR_FREE_GLOBAL_CACHE: mpfr_free_cache_t = 2;
pub type mpfr_free_cache_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn mpfr_get_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mpfr_get_patches() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mpfr_buildopt_tls_p() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_buildopt_float128_p() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_buildopt_decimal_p() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_buildopt_gmpinternals_p() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_buildopt_sharedcache_p() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_buildopt_tune_case() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mpfr_get_emin() -> mpfr_exp_t;
}
extern "C" {
    pub fn mpfr_set_emin(arg1: mpfr_exp_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_get_emin_min() -> mpfr_exp_t;
}
extern "C" {
    pub fn mpfr_get_emin_max() -> mpfr_exp_t;
}
extern "C" {
    pub fn mpfr_get_emax() -> mpfr_exp_t;
}
extern "C" {
    pub fn mpfr_set_emax(arg1: mpfr_exp_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_get_emax_min() -> mpfr_exp_t;
}
extern "C" {
    pub fn mpfr_get_emax_max() -> mpfr_exp_t;
}
extern "C" {
    pub fn mpfr_set_default_rounding_mode(arg1: mpfr_rnd_t);
}
extern "C" {
    pub fn mpfr_get_default_rounding_mode() -> mpfr_rnd_t;
}
extern "C" {
    pub fn mpfr_print_rnd_mode(arg1: mpfr_rnd_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mpfr_clear_flags();
}
extern "C" {
    pub fn mpfr_clear_underflow();
}
extern "C" {
    pub fn mpfr_clear_overflow();
}
extern "C" {
    pub fn mpfr_clear_divby0();
}
extern "C" {
    pub fn mpfr_clear_nanflag();
}
extern "C" {
    pub fn mpfr_clear_inexflag();
}
extern "C" {
    pub fn mpfr_clear_erangeflag();
}
extern "C" {
    pub fn mpfr_set_underflow();
}
extern "C" {
    pub fn mpfr_set_overflow();
}
extern "C" {
    pub fn mpfr_set_divby0();
}
extern "C" {
    pub fn mpfr_set_nanflag();
}
extern "C" {
    pub fn mpfr_set_inexflag();
}
extern "C" {
    pub fn mpfr_set_erangeflag();
}
extern "C" {
    pub fn mpfr_underflow_p() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_overflow_p() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_divby0_p() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_nanflag_p() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_inexflag_p() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_erangeflag_p() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_flags_clear(arg1: mpfr_flags_t);
}
extern "C" {
    pub fn mpfr_flags_set(arg1: mpfr_flags_t);
}
extern "C" {
    pub fn mpfr_flags_test(arg1: mpfr_flags_t) -> mpfr_flags_t;
}
extern "C" {
    pub fn mpfr_flags_save() -> mpfr_flags_t;
}
extern "C" {
    pub fn mpfr_flags_restore(arg1: mpfr_flags_t, arg2: mpfr_flags_t);
}
extern "C" {
    pub fn mpfr_check_range(
        arg1: mpfr_ptr,
        arg2: ::std::os::raw::c_int,
        arg3: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_init2(arg1: mpfr_ptr, arg2: mpfr_prec_t);
}
extern "C" {
    pub fn mpfr_init(arg1: mpfr_ptr);
}
extern "C" {
    pub fn mpfr_clear(arg1: mpfr_ptr);
}
extern "C" {
    pub fn mpfr_inits2(arg1: mpfr_prec_t, arg2: mpfr_ptr, ...);
}
extern "C" {
    pub fn mpfr_inits(arg1: mpfr_ptr, ...);
}
extern "C" {
    pub fn mpfr_clears(arg1: mpfr_ptr, ...);
}
extern "C" {
    pub fn mpfr_prec_round(
        arg1: mpfr_ptr,
        arg2: mpfr_prec_t,
        arg3: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_can_round(
        arg1: mpfr_srcptr,
        arg2: mpfr_exp_t,
        arg3: mpfr_rnd_t,
        arg4: mpfr_rnd_t,
        arg5: mpfr_prec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_min_prec(arg1: mpfr_srcptr) -> mpfr_prec_t;
}
extern "C" {
    pub fn mpfr_get_exp(arg1: mpfr_srcptr) -> mpfr_exp_t;
}
extern "C" {
    pub fn mpfr_set_exp(arg1: mpfr_ptr, arg2: mpfr_exp_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_get_prec(arg1: mpfr_srcptr) -> mpfr_prec_t;
}
extern "C" {
    pub fn mpfr_set_prec(arg1: mpfr_ptr, arg2: mpfr_prec_t);
}
extern "C" {
    pub fn mpfr_set_prec_raw(arg1: mpfr_ptr, arg2: mpfr_prec_t);
}
extern "C" {
    pub fn mpfr_set_default_prec(arg1: mpfr_prec_t);
}
extern "C" {
    pub fn mpfr_get_default_prec() -> mpfr_prec_t;
}
extern "C" {
    pub fn mpfr_set_d(arg1: mpfr_ptr, arg2: f64, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_set_flt(arg1: mpfr_ptr, arg2: f32, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_set_ld(arg1: mpfr_ptr, arg2: u128, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_set_z(arg1: mpfr_ptr, arg2: mpz_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_set_z_2exp(
        arg1: mpfr_ptr,
        arg2: mpz_srcptr,
        arg3: mpfr_exp_t,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_set_nan(arg1: mpfr_ptr);
}
extern "C" {
    pub fn mpfr_set_inf(arg1: mpfr_ptr, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mpfr_set_zero(arg1: mpfr_ptr, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mpfr_set_f(arg1: mpfr_ptr, arg2: mpf_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_cmp_f(arg1: mpfr_srcptr, arg2: mpf_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_get_f(arg1: mpf_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_set_si(
        arg1: mpfr_ptr,
        arg2: ::std::os::raw::c_long,
        arg3: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_set_ui(
        arg1: mpfr_ptr,
        arg2: ::std::os::raw::c_ulong,
        arg3: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_set_si_2exp(
        arg1: mpfr_ptr,
        arg2: ::std::os::raw::c_long,
        arg3: mpfr_exp_t,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_set_ui_2exp(
        arg1: mpfr_ptr,
        arg2: ::std::os::raw::c_ulong,
        arg3: mpfr_exp_t,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_set_q(arg1: mpfr_ptr, arg2: mpq_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_mul_q(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpq_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_div_q(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpq_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_add_q(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpq_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_sub_q(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpq_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_cmp_q(arg1: mpfr_srcptr, arg2: mpq_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_get_q(q: mpq_ptr, f: mpfr_srcptr);
}
extern "C" {
    pub fn mpfr_set_str(
        arg1: mpfr_ptr,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_init_set_str(
        arg1: mpfr_ptr,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_set4(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_rnd_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_abs(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_set(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_neg(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_signbit(arg1: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_setsign(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: ::std::os::raw::c_int,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_copysign(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_get_z_2exp(arg1: mpz_ptr, arg2: mpfr_srcptr) -> mpfr_exp_t;
}
extern "C" {
    pub fn mpfr_get_flt(arg1: mpfr_srcptr, arg2: mpfr_rnd_t) -> f32;
}
extern "C" {
    pub fn mpfr_get_d(arg1: mpfr_srcptr, arg2: mpfr_rnd_t) -> f64;
}
extern "C" {
    pub fn mpfr_get_ld(arg1: mpfr_srcptr, arg2: mpfr_rnd_t) -> u128;
}
extern "C" {
    pub fn mpfr_get_d1(arg1: mpfr_srcptr) -> f64;
}
extern "C" {
    pub fn mpfr_get_d_2exp(
        arg1: *mut ::std::os::raw::c_long,
        arg2: mpfr_srcptr,
        arg3: mpfr_rnd_t,
    ) -> f64;
}
extern "C" {
    pub fn mpfr_get_ld_2exp(
        arg1: *mut ::std::os::raw::c_long,
        arg2: mpfr_srcptr,
        arg3: mpfr_rnd_t,
    ) -> u128;
}
extern "C" {
    pub fn mpfr_frexp(
        arg1: *mut mpfr_exp_t,
        arg2: mpfr_ptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_get_si(arg1: mpfr_srcptr, arg2: mpfr_rnd_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mpfr_get_ui(arg1: mpfr_srcptr, arg2: mpfr_rnd_t) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn mpfr_get_str(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut mpfr_exp_t,
        arg3: ::std::os::raw::c_int,
        arg4: size_t,
        arg5: mpfr_srcptr,
        arg6: mpfr_rnd_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mpfr_get_z(z: mpz_ptr, f: mpfr_srcptr, arg1: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_free_str(arg1: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn mpfr_urandom(
        arg1: mpfr_ptr,
        arg2: *mut __gmp_randstate_struct,
        arg3: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_grandom(
        arg1: mpfr_ptr,
        arg2: mpfr_ptr,
        arg3: *mut __gmp_randstate_struct,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_nrandom(
        arg1: mpfr_ptr,
        arg2: *mut __gmp_randstate_struct,
        arg3: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_erandom(
        arg1: mpfr_ptr,
        arg2: *mut __gmp_randstate_struct,
        arg3: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_urandomb(
        arg1: mpfr_ptr,
        arg2: *mut __gmp_randstate_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_nextabove(arg1: mpfr_ptr);
}
extern "C" {
    pub fn mpfr_nextbelow(arg1: mpfr_ptr);
}
extern "C" {
    pub fn mpfr_nexttoward(arg1: mpfr_ptr, arg2: mpfr_srcptr);
}
extern "C" {
    pub fn mpfr_printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_snprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: size_t,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_pow(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_pow_si(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: ::std::os::raw::c_long,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_pow_ui(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: ::std::os::raw::c_ulong,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_ui_pow_ui(
        arg1: mpfr_ptr,
        arg2: ::std::os::raw::c_ulong,
        arg3: ::std::os::raw::c_ulong,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_ui_pow(
        arg1: mpfr_ptr,
        arg2: ::std::os::raw::c_ulong,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_pow_z(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpz_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_sqrt(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_sqrt_ui(
        arg1: mpfr_ptr,
        arg2: ::std::os::raw::c_ulong,
        arg3: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_rec_sqrt(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_add(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_sub(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_mul(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_div(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_add_ui(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: ::std::os::raw::c_ulong,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_sub_ui(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: ::std::os::raw::c_ulong,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_ui_sub(
        arg1: mpfr_ptr,
        arg2: ::std::os::raw::c_ulong,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_mul_ui(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: ::std::os::raw::c_ulong,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_div_ui(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: ::std::os::raw::c_ulong,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_ui_div(
        arg1: mpfr_ptr,
        arg2: ::std::os::raw::c_ulong,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_add_si(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: ::std::os::raw::c_long,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_sub_si(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: ::std::os::raw::c_long,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_si_sub(
        arg1: mpfr_ptr,
        arg2: ::std::os::raw::c_long,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_mul_si(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: ::std::os::raw::c_long,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_div_si(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: ::std::os::raw::c_long,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_si_div(
        arg1: mpfr_ptr,
        arg2: ::std::os::raw::c_long,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_add_d(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: f64,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_sub_d(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: f64,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_d_sub(
        arg1: mpfr_ptr,
        arg2: f64,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_mul_d(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: f64,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_div_d(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: f64,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_d_div(
        arg1: mpfr_ptr,
        arg2: f64,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_sqr(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_const_pi(arg1: mpfr_ptr, arg2: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_const_log2(arg1: mpfr_ptr, arg2: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_const_euler(arg1: mpfr_ptr, arg2: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_const_catalan(arg1: mpfr_ptr, arg2: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_agm(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_log(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_log2(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_log10(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_log1p(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_log_ui(
        arg1: mpfr_ptr,
        arg2: ::std::os::raw::c_ulong,
        arg3: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_exp(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_exp2(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_exp10(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_expm1(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_eint(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_li2(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_cmp(arg1: mpfr_srcptr, arg2: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_cmp3(
        arg1: mpfr_srcptr,
        arg2: mpfr_srcptr,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_cmp_d(arg1: mpfr_srcptr, arg2: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_cmp_ld(arg1: mpfr_srcptr, arg2: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_cmpabs(arg1: mpfr_srcptr, arg2: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_cmp_ui(arg1: mpfr_srcptr, arg2: ::std::os::raw::c_ulong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_cmp_si(arg1: mpfr_srcptr, arg2: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_cmp_ui_2exp(
        arg1: mpfr_srcptr,
        arg2: ::std::os::raw::c_ulong,
        arg3: mpfr_exp_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_cmp_si_2exp(
        arg1: mpfr_srcptr,
        arg2: ::std::os::raw::c_long,
        arg3: mpfr_exp_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_reldiff(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_srcptr, arg4: mpfr_rnd_t);
}
extern "C" {
    pub fn mpfr_eq(
        arg1: mpfr_srcptr,
        arg2: mpfr_srcptr,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_sgn(arg1: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_mul_2exp(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: ::std::os::raw::c_ulong,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_div_2exp(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: ::std::os::raw::c_ulong,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_mul_2ui(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: ::std::os::raw::c_ulong,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_div_2ui(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: ::std::os::raw::c_ulong,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_mul_2si(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: ::std::os::raw::c_long,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_div_2si(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: ::std::os::raw::c_long,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_rint(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_roundeven(arg1: mpfr_ptr, arg2: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_round(arg1: mpfr_ptr, arg2: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_trunc(arg1: mpfr_ptr, arg2: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_ceil(arg1: mpfr_ptr, arg2: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_floor(arg1: mpfr_ptr, arg2: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_rint_roundeven(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_rint_round(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_rint_trunc(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_rint_ceil(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_rint_floor(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_frac(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_modf(
        arg1: mpfr_ptr,
        arg2: mpfr_ptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_remquo(
        arg1: mpfr_ptr,
        arg2: *mut ::std::os::raw::c_long,
        arg3: mpfr_srcptr,
        arg4: mpfr_srcptr,
        arg5: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_remainder(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_fmod(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_fmodquo(
        arg1: mpfr_ptr,
        arg2: *mut ::std::os::raw::c_long,
        arg3: mpfr_srcptr,
        arg4: mpfr_srcptr,
        arg5: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_fits_ulong_p(arg1: mpfr_srcptr, arg2: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_fits_slong_p(arg1: mpfr_srcptr, arg2: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_fits_uint_p(arg1: mpfr_srcptr, arg2: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_fits_sint_p(arg1: mpfr_srcptr, arg2: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_fits_ushort_p(arg1: mpfr_srcptr, arg2: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_fits_sshort_p(arg1: mpfr_srcptr, arg2: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_fits_uintmax_p(arg1: mpfr_srcptr, arg2: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_fits_intmax_p(arg1: mpfr_srcptr, arg2: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_extract(arg1: mpz_ptr, arg2: mpfr_srcptr, arg3: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn mpfr_swap(arg1: mpfr_ptr, arg2: mpfr_ptr);
}
extern "C" {
    pub fn mpfr_dump(arg1: mpfr_srcptr);
}
extern "C" {
    pub fn mpfr_nan_p(arg1: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_inf_p(arg1: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_number_p(arg1: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_integer_p(arg1: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_zero_p(arg1: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_regular_p(arg1: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_greater_p(arg1: mpfr_srcptr, arg2: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_greaterequal_p(arg1: mpfr_srcptr, arg2: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_less_p(arg1: mpfr_srcptr, arg2: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_lessequal_p(arg1: mpfr_srcptr, arg2: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_lessgreater_p(arg1: mpfr_srcptr, arg2: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_equal_p(arg1: mpfr_srcptr, arg2: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_unordered_p(arg1: mpfr_srcptr, arg2: mpfr_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_atanh(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_acosh(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_asinh(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_cosh(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_sinh(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_tanh(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_sinh_cosh(
        arg1: mpfr_ptr,
        arg2: mpfr_ptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_sech(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_csch(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_coth(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_acos(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_asin(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_atan(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_sin(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_sin_cos(
        arg1: mpfr_ptr,
        arg2: mpfr_ptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_cos(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_tan(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_atan2(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_sec(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_csc(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_cot(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_hypot(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_erf(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_erfc(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_cbrt(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_root(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: ::std::os::raw::c_ulong,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_rootn_ui(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: ::std::os::raw::c_ulong,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_gamma(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_gamma_inc(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_beta(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_lngamma(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_lgamma(
        arg1: mpfr_ptr,
        arg2: *mut ::std::os::raw::c_int,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_digamma(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_zeta(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_zeta_ui(
        arg1: mpfr_ptr,
        arg2: ::std::os::raw::c_ulong,
        arg3: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_fac_ui(
        arg1: mpfr_ptr,
        arg2: ::std::os::raw::c_ulong,
        arg3: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_j0(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_j1(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_jn(
        arg1: mpfr_ptr,
        arg2: ::std::os::raw::c_long,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_y0(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_y1(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_yn(
        arg1: mpfr_ptr,
        arg2: ::std::os::raw::c_long,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_ai(arg1: mpfr_ptr, arg2: mpfr_srcptr, arg3: mpfr_rnd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_min(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_max(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_dim(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_mul_z(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpz_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_div_z(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpz_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_add_z(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpz_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_sub_z(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpz_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_z_sub(
        arg1: mpfr_ptr,
        arg2: mpz_srcptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_cmp_z(arg1: mpfr_srcptr, arg2: mpz_srcptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_fma(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_srcptr,
        arg5: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_fms(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_srcptr,
        arg5: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_fmma(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_srcptr,
        arg5: mpfr_srcptr,
        arg6: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_fmms(
        arg1: mpfr_ptr,
        arg2: mpfr_srcptr,
        arg3: mpfr_srcptr,
        arg4: mpfr_srcptr,
        arg5: mpfr_srcptr,
        arg6: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_sum(
        arg1: mpfr_ptr,
        arg2: *const mpfr_ptr,
        arg3: ::std::os::raw::c_ulong,
        arg4: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_free_cache();
}
extern "C" {
    pub fn mpfr_free_cache2(arg1: mpfr_free_cache_t);
}
extern "C" {
    pub fn mpfr_free_pool();
}
extern "C" {
    pub fn mpfr_mp_memory_cleanup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_subnormalize(
        arg1: mpfr_ptr,
        arg2: ::std::os::raw::c_int,
        arg3: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_strtofr(
        arg1: mpfr_ptr,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
        arg5: mpfr_rnd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_round_nearest_away_begin(arg1: *mut __mpfr_struct);
}
extern "C" {
    pub fn mpfr_round_nearest_away_end(
        arg1: *mut __mpfr_struct,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpfr_custom_get_size(arg1: mpfr_prec_t) -> size_t;
}
extern "C" {
    pub fn mpfr_custom_init(arg1: *mut ::std::os::raw::c_void, arg2: mpfr_prec_t);
}
extern "C" {
    pub fn mpfr_custom_get_significand(arg1: mpfr_srcptr) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mpfr_custom_get_exp(arg1: mpfr_srcptr) -> mpfr_exp_t;
}
extern "C" {
    pub fn mpfr_custom_move(arg1: mpfr_ptr, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn mpfr_custom_init_set(
        arg1: mpfr_ptr,
        arg2: ::std::os::raw::c_int,
        arg3: mpfr_exp_t,
        arg4: mpfr_prec_t,
        arg5: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn mpfr_custom_get_kind(arg1: mpfr_srcptr) -> ::std::os::raw::c_int;
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: size_t,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut size_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: size_t);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> size_t;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: size_t,
        __size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: size_t, __size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(
        __pwcs: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcstombs(
        __s: *mut ::std::os::raw::c_char,
        __pwcs: *const wchar_t,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut version: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn flint_malloc(size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn flint_realloc(
        ptr: *mut ::std::os::raw::c_void,
        size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn flint_calloc(num: size_t, size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn flint_free(ptr: *mut ::std::os::raw::c_void);
}
pub type flint_cleanup_function_t = ::std::option::Option<unsafe extern "C" fn()>;
extern "C" {
    pub fn flint_register_cleanup_function(cleanup_function: flint_cleanup_function_t);
}
extern "C" {
    pub fn flint_cleanup();
}
extern "C" {
    pub fn flint_get_num_threads() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flint_set_num_threads(num_threads: ::std::os::raw::c_int);
}
extern "C" {
    pub fn flint_test_multiplier() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct flint_rand_s {
    pub gmp_state: gmp_randstate_t,
    pub gmp_init: ::std::os::raw::c_int,
    pub __randval: mp_limb_t,
    pub __randval2: mp_limb_t,
}
#[test]
fn bindgen_test_layout_flint_rand_s() {
    assert_eq!(
        ::std::mem::size_of::<flint_rand_s>(),
        56usize,
        concat!("Size of: ", stringify!(flint_rand_s))
    );
    assert_eq!(
        ::std::mem::align_of::<flint_rand_s>(),
        8usize,
        concat!("Alignment of ", stringify!(flint_rand_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flint_rand_s>())).gmp_state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flint_rand_s),
            "::",
            stringify!(gmp_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flint_rand_s>())).gmp_init as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(flint_rand_s),
            "::",
            stringify!(gmp_init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flint_rand_s>())).__randval as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(flint_rand_s),
            "::",
            stringify!(__randval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flint_rand_s>())).__randval2 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(flint_rand_s),
            "::",
            stringify!(__randval2)
        )
    );
}
pub type flint_rand_t = [flint_rand_s; 1usize];
pub type mpfr = __mpfr_struct;
extern "C" {
    pub fn parse_fmt(
        floating: *mut ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flint_printf(str_: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flint_fprintf(
        f: *mut FILE,
        str_: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flint_sprintf(
        s: *mut ::std::os::raw::c_char,
        str_: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flint_scanf(str_: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flint_fscanf(
        f: *mut FILE,
        str_: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flint_sscanf(
        s: *const ::std::os::raw::c_char,
        str_: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pair_s {
    pub x: mp_limb_t,
    pub y: mp_limb_t,
}
#[test]
fn bindgen_test_layout_pair_s() {
    assert_eq!(
        ::std::mem::size_of::<pair_s>(),
        16usize,
        concat!("Size of: ", stringify!(pair_s))
    );
    assert_eq!(
        ::std::mem::align_of::<pair_s>(),
        8usize,
        concat!("Alignment of ", stringify!(pair_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pair_s>())).x as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(pair_s), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pair_s>())).y as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(pair_s), "::", stringify!(y))
    );
}
pub type n_pair_t = pair_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct n_factor_t {
    pub num: ::std::os::raw::c_int,
    pub exp: [::std::os::raw::c_int; 15usize],
    pub p: [mp_limb_t; 15usize],
}
#[test]
fn bindgen_test_layout_n_factor_t() {
    assert_eq!(
        ::std::mem::size_of::<n_factor_t>(),
        184usize,
        concat!("Size of: ", stringify!(n_factor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<n_factor_t>(),
        8usize,
        concat!("Alignment of ", stringify!(n_factor_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<n_factor_t>())).num as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(n_factor_t),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<n_factor_t>())).exp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(n_factor_t),
            "::",
            stringify!(exp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<n_factor_t>())).p as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(n_factor_t),
            "::",
            stringify!(p)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct n_primes_struct {
    pub small_i: mp_limb_signed_t,
    pub small_num: mp_limb_signed_t,
    pub small_primes: *mut ::std::os::raw::c_uint,
    pub sieve_a: mp_limb_t,
    pub sieve_b: mp_limb_t,
    pub sieve_i: mp_limb_signed_t,
    pub sieve_num: mp_limb_signed_t,
    pub sieve: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_n_primes_struct() {
    assert_eq!(
        ::std::mem::size_of::<n_primes_struct>(),
        64usize,
        concat!("Size of: ", stringify!(n_primes_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<n_primes_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(n_primes_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<n_primes_struct>())).small_i as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(n_primes_struct),
            "::",
            stringify!(small_i)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<n_primes_struct>())).small_num as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(n_primes_struct),
            "::",
            stringify!(small_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<n_primes_struct>())).small_primes as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(n_primes_struct),
            "::",
            stringify!(small_primes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<n_primes_struct>())).sieve_a as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(n_primes_struct),
            "::",
            stringify!(sieve_a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<n_primes_struct>())).sieve_b as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(n_primes_struct),
            "::",
            stringify!(sieve_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<n_primes_struct>())).sieve_i as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(n_primes_struct),
            "::",
            stringify!(sieve_i)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<n_primes_struct>())).sieve_num as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(n_primes_struct),
            "::",
            stringify!(sieve_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<n_primes_struct>())).sieve as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(n_primes_struct),
            "::",
            stringify!(sieve)
        )
    );
}
pub type n_primes_t = [n_primes_struct; 1usize];
extern "C" {
    pub fn n_primes_init(iter: *mut n_primes_struct);
}
extern "C" {
    pub fn n_primes_clear(iter: *mut n_primes_struct);
}
extern "C" {
    pub fn n_primes_extend_small(iter: *mut n_primes_struct, bound: mp_limb_t);
}
extern "C" {
    pub fn n_primes_sieve_range(iter: *mut n_primes_struct, a: mp_limb_t, b: mp_limb_t);
}
extern "C" {
    pub fn n_primes_jump_after(iter: *mut n_primes_struct, n: mp_limb_t);
}
extern "C" {
    pub static mut flint_primes_small: [::std::os::raw::c_uint; 0usize];
}
extern "C" {
    pub static mut _flint_primes: [*mut mp_limb_t; 64usize];
}
extern "C" {
    pub static mut _flint_prime_inverses: [*mut f64; 64usize];
}
extern "C" {
    pub static mut _flint_primes_used: ::std::os::raw::c_int;
}
extern "C" {
    pub fn n_compute_primes(num_primes: mp_limb_t);
}
extern "C" {
    pub fn n_cleanup_primes();
}
extern "C" {
    pub fn n_primes_arr_readonly(n: mp_limb_t) -> *const mp_limb_t;
}
extern "C" {
    pub fn n_prime_inverses_arr_readonly(n: mp_limb_t) -> *const f64;
}
extern "C" {
    pub fn n_randlimb(state: *mut flint_rand_s) -> mp_limb_t;
}
extern "C" {
    pub fn n_randint(state: *mut flint_rand_s, limit: mp_limb_t) -> mp_limb_t;
}
extern "C" {
    pub fn n_randbits(state: *mut flint_rand_s, bits: ::std::os::raw::c_uint) -> mp_limb_t;
}
extern "C" {
    pub fn n_randtest_bits(state: *mut flint_rand_s, bits: ::std::os::raw::c_int) -> mp_limb_t;
}
extern "C" {
    pub fn n_randtest(state: *mut flint_rand_s) -> mp_limb_t;
}
extern "C" {
    pub fn n_randtest_not_zero(state: *mut flint_rand_s) -> mp_limb_t;
}
extern "C" {
    pub fn n_randprime(
        state: *mut flint_rand_s,
        bits: mp_limb_t,
        proved: ::std::os::raw::c_int,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn n_randtest_prime(state: *mut flint_rand_s, proved: ::std::os::raw::c_int) -> mp_limb_t;
}
extern "C" {
    pub fn n_pow(n: mp_limb_t, exp: mp_limb_t) -> mp_limb_t;
}
extern "C" {
    pub fn n_flog(n: mp_limb_t, b: mp_limb_t) -> mp_limb_t;
}
extern "C" {
    pub fn n_clog(n: mp_limb_t, b: mp_limb_t) -> mp_limb_t;
}
extern "C" {
    pub fn n_mod_precomp(a: mp_limb_t, n: mp_limb_t, ninv: f64) -> mp_limb_t;
}
extern "C" {
    pub fn n_mod2_precomp(a: mp_limb_t, n: mp_limb_t, ninv: f64) -> mp_limb_t;
}
extern "C" {
    pub fn n_divrem2_precomp(q: *mut mp_limb_t, a: mp_limb_t, n: mp_limb_t, npre: f64)
        -> mp_limb_t;
}
extern "C" {
    pub fn n_mod2_preinv(a: mp_limb_t, n: mp_limb_t, ninv: mp_limb_t) -> mp_limb_t;
}
extern "C" {
    pub fn n_ll_mod_preinv(
        a_hi: mp_limb_t,
        a_lo: mp_limb_t,
        n: mp_limb_t,
        ninv: mp_limb_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn n_lll_mod_preinv(
        a_hi: mp_limb_t,
        a_mi: mp_limb_t,
        a_lo: mp_limb_t,
        n: mp_limb_t,
        ninv: mp_limb_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn n_mulmod_precomp(a: mp_limb_t, b: mp_limb_t, n: mp_limb_t, ninv: f64) -> mp_limb_t;
}
extern "C" {
    pub fn n_mulmod2_preinv(a: mp_limb_t, b: mp_limb_t, n: mp_limb_t, ninv: mp_limb_t)
        -> mp_limb_t;
}
extern "C" {
    pub fn n_mulmod_preinv(
        a: mp_limb_t,
        b: mp_limb_t,
        n: mp_limb_t,
        ninv: mp_limb_t,
        norm: mp_limb_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn n_powmod_ui_precomp(a: mp_limb_t, exp: mp_limb_t, n: mp_limb_t, npre: f64) -> mp_limb_t;
}
extern "C" {
    pub fn n_powmod_precomp(
        a: mp_limb_t,
        exp: mp_limb_signed_t,
        n: mp_limb_t,
        npre: f64,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn n_powmod2_preinv(
        a: mp_limb_t,
        exp: mp_limb_signed_t,
        n: mp_limb_t,
        ninv: mp_limb_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn n_powmod2_ui_preinv(
        a: mp_limb_t,
        exp: mp_limb_t,
        n: mp_limb_t,
        ninv: mp_limb_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn n_powmod_ui_preinv(
        a: mp_limb_t,
        exp: mp_limb_t,
        n: mp_limb_t,
        ninv: mp_limb_t,
        norm: mp_limb_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn n_sqrtmod(a: mp_limb_t, p: mp_limb_t) -> mp_limb_t;
}
extern "C" {
    pub fn n_sqrtmod_2pow(
        sqrt: *mut *mut mp_limb_t,
        a: mp_limb_t,
        exp: mp_limb_signed_t,
    ) -> mp_limb_signed_t;
}
extern "C" {
    pub fn n_sqrtmod_primepow(
        sqrt: *mut *mut mp_limb_t,
        a: mp_limb_t,
        p: mp_limb_t,
        exp: mp_limb_signed_t,
    ) -> mp_limb_signed_t;
}
extern "C" {
    pub fn n_sqrtmodn(
        sqrt: *mut *mut mp_limb_t,
        a: mp_limb_t,
        fac: *mut n_factor_t,
    ) -> mp_limb_signed_t;
}
extern "C" {
    pub fn n_gcd(x: mp_limb_t, y: mp_limb_t) -> mp_limb_t;
}
extern "C" {
    pub fn n_xgcd(a: *mut mp_limb_t, b: *mut mp_limb_t, x: mp_limb_t, y: mp_limb_t) -> mp_limb_t;
}
extern "C" {
    pub fn n_invmod(x: mp_limb_t, y: mp_limb_t) -> mp_limb_t;
}
extern "C" {
    pub fn n_gcdinv(a: *mut mp_limb_t, x: mp_limb_t, y: mp_limb_t) -> mp_limb_t;
}
extern "C" {
    pub fn n_revbin(in_: mp_limb_t, bits: mp_limb_t) -> mp_limb_t;
}
extern "C" {
    pub fn n_jacobi(x: mp_limb_signed_t, y: mp_limb_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn n_jacobi_unsigned(x: mp_limb_t, y: mp_limb_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn n_sqrt(a: mp_limb_t) -> mp_limb_t;
}
extern "C" {
    pub fn n_sqrtrem(r: *mut mp_limb_t, a: mp_limb_t) -> mp_limb_t;
}
extern "C" {
    pub fn n_is_square(x: mp_limb_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn n_cbrt_estimate(a: f64) -> f64;
}
extern "C" {
    pub fn n_cbrt(a: mp_limb_t) -> mp_limb_t;
}
extern "C" {
    pub fn n_cbrt_binary_search(x: mp_limb_t) -> mp_limb_t;
}
extern "C" {
    pub fn n_cbrt_newton_iteration(n: mp_limb_t) -> mp_limb_t;
}
extern "C" {
    pub fn n_cbrt_chebyshev_approx(n: mp_limb_t) -> mp_limb_t;
}
extern "C" {
    pub fn n_cbrtrem(remainder: *mut mp_limb_t, n: mp_limb_t) -> mp_limb_t;
}
extern "C" {
    pub fn n_is_perfect_power235(n: mp_limb_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn n_is_oddprime_small(n: mp_limb_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn n_is_oddprime_binary(n: mp_limb_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn n_is_probabprime_fermat(n: mp_limb_t, i: mp_limb_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn n_is_probabprime_fibonacci(n: mp_limb_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn n_is_probabprime_lucas(n: mp_limb_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn n_is_probabprime_BPSW(n: mp_limb_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn n_is_strong_probabprime_precomp(
        n: mp_limb_t,
        npre: f64,
        a: mp_limb_t,
        d: mp_limb_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn n_is_strong_probabprime2_preinv(
        n: mp_limb_t,
        ninv: mp_limb_t,
        a: mp_limb_t,
        d: mp_limb_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn n_is_probabprime(n: mp_limb_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn n_is_prime_pseudosquare(n: mp_limb_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn n_is_prime_pocklington(n: mp_limb_t, iterations: mp_limb_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn n_is_prime(n: mp_limb_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn n_nth_prime(n: mp_limb_t) -> mp_limb_t;
}
extern "C" {
    pub fn n_nth_prime_bounds(lo: *mut mp_limb_t, hi: *mut mp_limb_t, n: mp_limb_t);
}
extern "C" {
    pub fn n_prime_pi(n: mp_limb_t) -> mp_limb_t;
}
extern "C" {
    pub fn n_prime_pi_bounds(lo: *mut mp_limb_t, hi: *mut mp_limb_t, n: mp_limb_t);
}
extern "C" {
    pub fn n_remove(n: *mut mp_limb_t, p: mp_limb_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn n_remove2_precomp(n: *mut mp_limb_t, p: mp_limb_t, ppre: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn n_factor_insert(factors: *mut n_factor_t, p: mp_limb_t, exp: mp_limb_t);
}
extern "C" {
    pub fn n_factor_trial_range(
        factors: *mut n_factor_t,
        n: mp_limb_t,
        start: mp_limb_t,
        num_primes: mp_limb_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn n_factor_trial_partial(
        factors: *mut n_factor_t,
        n: mp_limb_t,
        prod: *mut mp_limb_t,
        num_primes: mp_limb_t,
        limit: mp_limb_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn n_factor_trial(
        factors: *mut n_factor_t,
        n: mp_limb_t,
        num_primes: mp_limb_t,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn n_factor_partial(
        factors: *mut n_factor_t,
        n: mp_limb_t,
        limit: mp_limb_t,
        proved: ::std::os::raw::c_int,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn n_factor_power235(exp: *mut mp_limb_t, n: mp_limb_t) -> mp_limb_t;
}
extern "C" {
    pub fn n_factor_one_line(n: mp_limb_t, iters: mp_limb_t) -> mp_limb_t;
}
extern "C" {
    pub fn n_factor_lehman(n: mp_limb_t) -> mp_limb_t;
}
extern "C" {
    pub fn n_factor_SQUFOF(n: mp_limb_t, iters: mp_limb_t) -> mp_limb_t;
}
extern "C" {
    pub fn n_factor(factors: *mut n_factor_t, n: mp_limb_t, proved: ::std::os::raw::c_int);
}
extern "C" {
    pub fn n_factor_pp1(n: mp_limb_t, B1: mp_limb_t, c: mp_limb_t) -> mp_limb_t;
}
extern "C" {
    pub fn n_is_squarefree(n: mp_limb_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn n_moebius_mu(n: mp_limb_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn n_moebius_mu_vec(mu: *mut ::std::os::raw::c_int, len: mp_limb_t);
}
extern "C" {
    pub fn n_euler_phi(n: mp_limb_t) -> mp_limb_t;
}
extern "C" {
    pub fn n_sizeinbase(n: mp_limb_t, base: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn n_nextprime(n: mp_limb_t, proved: ::std::os::raw::c_int) -> mp_limb_t;
}
extern "C" {
    pub fn n_factorial_mod2_preinv(n: mp_limb_t, p: mp_limb_t, pinv: mp_limb_t) -> mp_limb_t;
}
extern "C" {
    pub fn n_factorial_fast_mod2_preinv(n: mp_limb_t, p: mp_limb_t, pinv: mp_limb_t) -> mp_limb_t;
}
extern "C" {
    pub fn n_primitive_root_prime_prefactor(p: mp_limb_t, factors: *mut n_factor_t) -> mp_limb_t;
}
extern "C" {
    pub fn n_primitive_root_prime(p: mp_limb_t) -> mp_limb_t;
}
extern "C" {
    pub fn n_discrete_log_bsgs(b: mp_limb_t, a: mp_limb_t, n: mp_limb_t) -> mp_limb_t;
}
extern "C" {
    pub fn n_root_estimate(a: f64, n: ::std::os::raw::c_int) -> mp_limb_t;
}
extern "C" {
    pub fn n_rootrem(remainder: *mut mp_limb_t, n: mp_limb_t, root: mp_limb_t) -> mp_limb_t;
}
extern "C" {
    pub fn n_root(n: mp_limb_t, root: mp_limb_t) -> mp_limb_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nmod_t {
    pub n: mp_limb_t,
    pub ninv: mp_limb_t,
    pub norm: mp_limb_t,
}
#[test]
fn bindgen_test_layout_nmod_t() {
    assert_eq!(
        ::std::mem::size_of::<nmod_t>(),
        24usize,
        concat!("Size of: ", stringify!(nmod_t))
    );
    assert_eq!(
        ::std::mem::align_of::<nmod_t>(),
        8usize,
        concat!("Alignment of ", stringify!(nmod_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nmod_t>())).n as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(nmod_t), "::", stringify!(n))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nmod_t>())).ninv as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nmod_t),
            "::",
            stringify!(ninv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nmod_t>())).norm as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(nmod_t),
            "::",
            stringify!(norm)
        )
    );
}
extern "C" {
    pub fn _nmod_vec_randtest(
        vec: mp_ptr,
        state: *mut flint_rand_s,
        len: mp_limb_signed_t,
        mod_: nmod_t,
    );
}
extern "C" {
    pub fn _nmod_vec_max_bits(vec: mp_srcptr, len: mp_limb_signed_t) -> mp_limb_t;
}
extern "C" {
    pub fn _nmod_vec_reduce(res: mp_ptr, vec: mp_srcptr, len: mp_limb_signed_t, mod_: nmod_t);
}
extern "C" {
    pub fn _nmod_vec_add(
        res: mp_ptr,
        vec1: mp_srcptr,
        vec2: mp_srcptr,
        len: mp_limb_signed_t,
        mod_: nmod_t,
    );
}
extern "C" {
    pub fn _nmod_vec_sub(
        res: mp_ptr,
        vec1: mp_srcptr,
        vec2: mp_srcptr,
        len: mp_limb_signed_t,
        mod_: nmod_t,
    );
}
extern "C" {
    pub fn _nmod_vec_neg(res: mp_ptr, vec: mp_srcptr, len: mp_limb_signed_t, mod_: nmod_t);
}
extern "C" {
    pub fn _nmod_vec_scalar_mul_nmod(
        res: mp_ptr,
        vec: mp_srcptr,
        len: mp_limb_signed_t,
        c: mp_limb_t,
        mod_: nmod_t,
    );
}
extern "C" {
    pub fn _nmod_vec_scalar_addmul_nmod(
        res: mp_ptr,
        vec: mp_srcptr,
        len: mp_limb_signed_t,
        c: mp_limb_t,
        mod_: nmod_t,
    );
}
extern "C" {
    pub fn _nmod_vec_dot_bound_limbs(len: mp_limb_signed_t, mod_: nmod_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _nmod_vec_dot(
        vec1: mp_srcptr,
        vec2: mp_srcptr,
        len: mp_limb_signed_t,
        mod_: nmod_t,
        nlimbs: ::std::os::raw::c_int,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn _nmod_vec_dot_ptr(
        vec1: mp_srcptr,
        vec2: *const mp_ptr,
        offset: mp_limb_signed_t,
        len: mp_limb_signed_t,
        mod_: nmod_t,
        nlimbs: ::std::os::raw::c_int,
    ) -> mp_limb_t;
}
pub type fmpz = mp_limb_signed_t;
pub type fmpz_t = [fmpz; 1usize];
pub type fmpz_randstate_t = gmp_randstate_t;
extern "C" {
    pub static mut fmpz_arr: *mut __mpz_struct;
}
extern "C" {
    pub static mut fmpz_randstate: gmp_randstate_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fmpz_preinvn_struct {
    pub dinv: mp_ptr,
    pub n: mp_limb_signed_t,
    pub norm: mp_limb_t,
}
#[test]
fn bindgen_test_layout_fmpz_preinvn_struct() {
    assert_eq!(
        ::std::mem::size_of::<fmpz_preinvn_struct>(),
        24usize,
        concat!("Size of: ", stringify!(fmpz_preinvn_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<fmpz_preinvn_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(fmpz_preinvn_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fmpz_preinvn_struct>())).dinv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fmpz_preinvn_struct),
            "::",
            stringify!(dinv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fmpz_preinvn_struct>())).n as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fmpz_preinvn_struct),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fmpz_preinvn_struct>())).norm as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fmpz_preinvn_struct),
            "::",
            stringify!(norm)
        )
    );
}
pub type fmpz_preinvn_t = [fmpz_preinvn_struct; 1usize];
extern "C" {
    pub fn _fmpz_new_mpz() -> *mut __mpz_struct;
}
extern "C" {
    pub fn _fmpz_clear_mpz(f: fmpz);
}
extern "C" {
    pub fn _fmpz_cleanup_mpz_content();
}
extern "C" {
    pub fn _fmpz_cleanup();
}
extern "C" {
    pub fn _fmpz_promote(f: *mut fmpz) -> *mut __mpz_struct;
}
extern "C" {
    pub fn _fmpz_promote_val(f: *mut fmpz) -> *mut __mpz_struct;
}
extern "C" {
    pub fn _fmpz_demote_val(f: *mut fmpz);
}
extern "C" {
    pub fn _fmpz_init_readonly_mpz(f: *mut fmpz, z: *mut __mpz_struct);
}
extern "C" {
    pub fn _fmpz_clear_readonly_mpz(arg1: *mut __mpz_struct);
}
extern "C" {
    pub fn fmpz_init2(f: *mut fmpz, limbs: mp_limb_t);
}
extern "C" {
    pub fn fmpz_randbits(f: *mut fmpz, state: *mut flint_rand_s, bits: mp_limb_t);
}
extern "C" {
    pub fn fmpz_randm(f: *mut fmpz, state: *mut flint_rand_s, m: *mut fmpz);
}
extern "C" {
    pub fn fmpz_randtest(f: *mut fmpz, state: *mut flint_rand_s, bits: mp_limb_t);
}
extern "C" {
    pub fn fmpz_randtest_unsigned(f: *mut fmpz, state: *mut flint_rand_s, bits: mp_limb_t);
}
extern "C" {
    pub fn fmpz_randtest_not_zero(f: *mut fmpz, state: *mut flint_rand_s, bits: mp_limb_t);
}
extern "C" {
    pub fn fmpz_randtest_mod(f: *mut fmpz, state: *mut flint_rand_s, m: *mut fmpz);
}
extern "C" {
    pub fn fmpz_randtest_mod_signed(f: *mut fmpz, state: *mut flint_rand_s, m: *mut fmpz);
}
extern "C" {
    pub fn fmpz_get_si(f: *mut fmpz) -> mp_limb_signed_t;
}
extern "C" {
    pub fn fmpz_get_ui(f: *mut fmpz) -> mp_limb_t;
}
extern "C" {
    pub fn fmpz_get_mpz(x: *mut __mpz_struct, f: *mut fmpz);
}
extern "C" {
    pub fn fmpz_set_mpz(f: *mut fmpz, x: *mut __mpz_struct);
}
extern "C" {
    pub fn fmpz_get_d(f: *mut fmpz) -> f64;
}
extern "C" {
    pub fn fmpz_set_d(f: *mut fmpz, c: f64);
}
extern "C" {
    pub fn fmpz_get_mpf(x: *mut __mpf_struct, f: *mut fmpz);
}
extern "C" {
    pub fn fmpz_set_mpf(f: *mut fmpz, x: *mut __mpf_struct);
}
extern "C" {
    pub fn fmpz_get_mpfr(x: *mut __mpfr_struct, f: *mut fmpz, rnd: mpfr_rnd_t);
}
extern "C" {
    pub fn fmpz_set_str(
        f: *mut fmpz,
        str_: *const ::std::os::raw::c_char,
        b: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flint_mpz_init_set_readonly(z: *mut __mpz_struct, f: *mut fmpz);
}
extern "C" {
    pub fn flint_mpz_clear_readonly(z: *mut __mpz_struct);
}
extern "C" {
    pub fn fmpz_init_set_readonly(f: *mut fmpz, z: *mut __mpz_struct);
}
extern "C" {
    pub fn fmpz_clear_readonly(f: *mut fmpz);
}
extern "C" {
    pub fn fmpz_abs_fits_ui(f: *mut fmpz) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmpz_fits_si(f: *mut fmpz) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmpz_set(f: *mut fmpz, g: *mut fmpz);
}
extern "C" {
    pub fn fmpz_equal(f: *mut fmpz, g: *mut fmpz) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmpz_equal_si(f: *mut fmpz, g: mp_limb_signed_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmpz_equal_ui(f: *mut fmpz, g: mp_limb_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmpz_read(f: *mut fmpz) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmpz_fread(file: *mut FILE, f: *mut fmpz) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmpz_inp_raw(x: *mut fmpz, fin: *mut FILE) -> size_t;
}
extern "C" {
    pub fn fmpz_print(x: *mut fmpz) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmpz_fprint(file: *mut FILE, x: *mut fmpz) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmpz_out_raw(fout: *mut FILE, x: *mut fmpz) -> size_t;
}
extern "C" {
    pub fn fmpz_sizeinbase(f: *mut fmpz, b: ::std::os::raw::c_int) -> size_t;
}
extern "C" {
    pub fn fmpz_get_str(
        str_: *mut ::std::os::raw::c_char,
        b: ::std::os::raw::c_int,
        f: *mut fmpz,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fmpz_cmp(f: *mut fmpz, g: *mut fmpz) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmpz_cmp_ui(f: *mut fmpz, g: mp_limb_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmpz_cmp_si(f: *mut fmpz, g: mp_limb_signed_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmpz_cmpabs(f: *mut fmpz, g: *mut fmpz) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmpz_size(f: *mut fmpz) -> mp_size_t;
}
extern "C" {
    pub fn fmpz_sgn(f: *mut fmpz) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmpz_bits(f: *mut fmpz) -> mp_limb_t;
}
extern "C" {
    pub fn fmpz_val2(x: *mut fmpz) -> mp_limb_t;
}
extern "C" {
    pub fn fmpz_abs(f1: *mut fmpz, f2: *mut fmpz);
}
extern "C" {
    pub fn fmpz_add(f: *mut fmpz, g: *mut fmpz, h: *mut fmpz);
}
extern "C" {
    pub fn fmpz_sub(f: *mut fmpz, g: *mut fmpz, h: *mut fmpz);
}
extern "C" {
    pub fn fmpz_mul_ui(f: *mut fmpz, g: *mut fmpz, x: mp_limb_t);
}
extern "C" {
    pub fn fmpz_mul_si(f: *mut fmpz, g: *mut fmpz, x: mp_limb_signed_t);
}
extern "C" {
    pub fn fmpz_mul(f: *mut fmpz, g: *mut fmpz, h: *mut fmpz);
}
extern "C" {
    pub fn fmpz_mul_2exp(f: *mut fmpz, g: *mut fmpz, exp: mp_limb_t);
}
extern "C" {
    pub fn fmpz_add_ui(f: *mut fmpz, g: *mut fmpz, x: mp_limb_t);
}
extern "C" {
    pub fn fmpz_sub_ui(f: *mut fmpz, g: *mut fmpz, x: mp_limb_t);
}
extern "C" {
    pub fn fmpz_addmul_ui(f: *mut fmpz, g: *mut fmpz, x: mp_limb_t);
}
extern "C" {
    pub fn fmpz_submul_ui(f: *mut fmpz, g: *mut fmpz, x: mp_limb_t);
}
extern "C" {
    pub fn fmpz_addmul(f: *mut fmpz, g: *mut fmpz, h: *mut fmpz);
}
extern "C" {
    pub fn fmpz_submul(f: *mut fmpz, g: *mut fmpz, h: *mut fmpz);
}
extern "C" {
    pub fn fmpz_pow_ui(f: *mut fmpz, g: *mut fmpz, exp: mp_limb_t);
}
extern "C" {
    pub fn fmpz_powm_ui(f: *mut fmpz, g: *mut fmpz, exp: mp_limb_t, m: *mut fmpz);
}
extern "C" {
    pub fn fmpz_powm(f: *mut fmpz, g: *mut fmpz, e: *mut fmpz, m: *mut fmpz);
}
extern "C" {
    pub fn fmpz_setbit(f: *mut fmpz, i: mp_limb_t);
}
extern "C" {
    pub fn fmpz_tstbit(f: *mut fmpz, i: mp_limb_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmpz_clrbit(f: *mut fmpz, i: mp_limb_t);
}
extern "C" {
    pub fn fmpz_complement(r: *mut fmpz, f: *mut fmpz);
}
extern "C" {
    pub fn fmpz_combit(f: *mut fmpz, i: mp_limb_t);
}
extern "C" {
    pub fn fmpz_and(r: *mut fmpz, a: *mut fmpz, b: *mut fmpz);
}
extern "C" {
    pub fn fmpz_or(r: *mut fmpz, a: *mut fmpz, b: *mut fmpz);
}
extern "C" {
    pub fn fmpz_xor(r: *mut fmpz, a: *mut fmpz, b: *mut fmpz);
}
extern "C" {
    pub fn fmpz_popcnt(c: *mut fmpz) -> mp_limb_t;
}
extern "C" {
    pub fn fmpz_dlog(x: *mut fmpz) -> f64;
}
extern "C" {
    pub fn fmpz_flog(x: *mut fmpz, b: *mut fmpz) -> mp_limb_signed_t;
}
extern "C" {
    pub fn fmpz_flog_ui(x: *mut fmpz, b: mp_limb_t) -> mp_limb_signed_t;
}
extern "C" {
    pub fn fmpz_clog(x: *mut fmpz, b: *mut fmpz) -> mp_limb_signed_t;
}
extern "C" {
    pub fn fmpz_clog_ui(x: *mut fmpz, b: mp_limb_t) -> mp_limb_signed_t;
}
extern "C" {
    pub fn fmpz_sqrtmod(b: *mut fmpz, a: *mut fmpz, p: *mut fmpz) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmpz_sqrt(f: *mut fmpz, g: *mut fmpz);
}
extern "C" {
    pub fn fmpz_is_square(f: *mut fmpz) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmpz_root(r: *mut fmpz, f: *mut fmpz, n: mp_limb_signed_t);
}
extern "C" {
    pub fn fmpz_sqrtrem(f: *mut fmpz, r: *mut fmpz, g: *mut fmpz);
}
extern "C" {
    pub fn fmpz_fdiv_ui(g: *mut fmpz, h: mp_limb_t) -> mp_limb_t;
}
extern "C" {
    pub fn fmpz_mod_ui(f: *mut fmpz, g: *mut fmpz, h: mp_limb_t) -> mp_limb_t;
}
extern "C" {
    pub fn fmpz_mod(f: *mut fmpz, g: *mut fmpz, h: *mut fmpz);
}
extern "C" {
    pub fn fmpz_mods(f: *mut fmpz, g: *mut fmpz, h: *mut fmpz);
}
extern "C" {
    pub fn fmpz_gcd(f: *mut fmpz, g: *mut fmpz, h: *mut fmpz);
}
extern "C" {
    pub fn fmpz_lcm(f: *mut fmpz, g: *mut fmpz, h: *mut fmpz);
}
extern "C" {
    pub fn fmpz_gcdinv(d: *mut fmpz, a: *mut fmpz, f: *mut fmpz, g: *mut fmpz);
}
extern "C" {
    pub fn fmpz_xgcd(d: *mut fmpz, a: *mut fmpz, b: *mut fmpz, f: *mut fmpz, g: *mut fmpz);
}
extern "C" {
    pub fn fmpz_xgcd_partial(
        co2: *mut fmpz,
        co1: *mut fmpz,
        r2: *mut fmpz,
        r1: *mut fmpz,
        L: *mut fmpz,
    );
}
extern "C" {
    pub fn fmpz_invmod(f: *mut fmpz, g: *mut fmpz, h: *mut fmpz) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmpz_jacobi(a: *mut fmpz, p: *mut fmpz) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fmpz_remove(x: *mut fmpz, f: *mut fmpz, finv: f64) -> mp_limb_signed_t;
}
extern "C" {
    pub fn fmpz_remove(rop: *mut fmpz, op: *mut fmpz, f: *mut fmpz) -> mp_limb_signed_t;
}
extern "C" {
    pub fn fmpz_divexact(f: *mut fmpz, g: *mut fmpz, h: *mut fmpz);
}
extern "C" {
    pub fn fmpz_divexact_si(f: *mut fmpz, g: *mut fmpz, h: mp_limb_signed_t);
}
extern "C" {
    pub fn fmpz_divexact_ui(f: *mut fmpz, g: *mut fmpz, h: mp_limb_t);
}
extern "C" {
    pub fn fmpz_divisible(f: *mut fmpz, g: *mut fmpz) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmpz_divisible_si(f: *mut fmpz, g: mp_limb_signed_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmpz_cdiv_q(f: *mut fmpz, g: *mut fmpz, h: *mut fmpz);
}
extern "C" {
    pub fn fmpz_cdiv_q_si(f: *mut fmpz, g: *mut fmpz, h: mp_limb_signed_t);
}
extern "C" {
    pub fn fmpz_cdiv_q_ui(f: *mut fmpz, g: *mut fmpz, h: mp_limb_t);
}
extern "C" {
    pub fn fmpz_cdiv_q_2exp(f: *mut fmpz, g: *mut fmpz, exp: mp_limb_t);
}
extern "C" {
    pub fn fmpz_fdiv_qr(f: *mut fmpz, s: *mut fmpz, g: *mut fmpz, h: *mut fmpz);
}
extern "C" {
    pub fn fmpz_fdiv_qr_preinvn(
        f: *mut fmpz,
        s: *mut fmpz,
        g: *mut fmpz,
        h: *mut fmpz,
        inv: *mut fmpz_preinvn_struct,
    );
}
extern "C" {
    pub fn fmpz_fdiv_q(f: *mut fmpz, g: *mut fmpz, h: *mut fmpz);
}
extern "C" {
    pub fn fmpz_fdiv_r(f: *mut fmpz, g: *mut fmpz, h: *mut fmpz);
}
extern "C" {
    pub fn fmpz_fdiv_q_ui(f: *mut fmpz, g: *mut fmpz, h: mp_limb_t);
}
extern "C" {
    pub fn fmpz_fdiv_q_si(f: *mut fmpz, g: *mut fmpz, h: mp_limb_signed_t);
}
extern "C" {
    pub fn fmpz_fdiv_q_2exp(f: *mut fmpz, g: *mut fmpz, exp: mp_limb_t);
}
extern "C" {
    pub fn fmpz_fdiv_r_2exp(f: *mut fmpz, g: *mut fmpz, exp: mp_limb_t);
}
extern "C" {
    pub fn fmpz_tdiv_q(f: *mut fmpz, g: *mut fmpz, h: *mut fmpz);
}
extern "C" {
    pub fn fmpz_tdiv_qr(f: *mut fmpz, s: *mut fmpz, g: *mut fmpz, h: *mut fmpz);
}
extern "C" {
    pub fn fmpz_tdiv_q_ui(f: *mut fmpz, g: *mut fmpz, h: mp_limb_t);
}
extern "C" {
    pub fn fmpz_tdiv_q_si(f: *mut fmpz, g: *mut fmpz, h: mp_limb_signed_t);
}
extern "C" {
    pub fn fmpz_tdiv_ui(g: *mut fmpz, h: mp_limb_t) -> mp_limb_t;
}
extern "C" {
    pub fn fmpz_tdiv_q_2exp(f: *mut fmpz, g: *mut fmpz, exp: mp_limb_t);
}
extern "C" {
    pub fn fmpz_preinvn_init(inv: *mut fmpz_preinvn_struct, f: *mut fmpz);
}
extern "C" {
    pub fn fmpz_preinvn_clear(inv: *mut fmpz_preinvn_struct);
}
extern "C" {
    pub fn fmpz_get_d_2exp(exp: *mut mp_limb_signed_t, f: *mut fmpz) -> f64;
}
extern "C" {
    pub fn fmpz_mul_tdiv_q_2exp(f: *mut fmpz, g: *mut fmpz, h: *mut fmpz, exp: mp_limb_t);
}
extern "C" {
    pub fn fmpz_mul_si_tdiv_q_2exp(f: *mut fmpz, g: *mut fmpz, x: mp_limb_signed_t, exp: mp_limb_t);
}
extern "C" {
    pub fn fmpz_fac_ui(f: *mut fmpz, n: mp_limb_t);
}
extern "C" {
    pub fn fmpz_fib_ui(f: *mut fmpz, n: mp_limb_t);
}
extern "C" {
    pub fn fmpz_bin_uiui(res: *mut fmpz, n: mp_limb_t, k: mp_limb_t);
}
extern "C" {
    pub fn _fmpz_rfac_ui(r: *mut fmpz, x: *mut fmpz, a: mp_limb_t, b: mp_limb_t);
}
extern "C" {
    pub fn fmpz_rfac_ui(r: *mut fmpz, x: *mut fmpz, n: mp_limb_t);
}
extern "C" {
    pub fn fmpz_rfac_uiui(r: *mut fmpz, x: mp_limb_t, n: mp_limb_t);
}
extern "C" {
    pub fn fmpz_bit_pack(
        arr: mp_ptr,
        shift: mp_limb_t,
        bits: mp_limb_t,
        coeff: *mut fmpz,
        negate: ::std::os::raw::c_int,
        borrow: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmpz_bit_unpack(
        coeff: *mut fmpz,
        arr: mp_srcptr,
        shift: mp_limb_t,
        bits: mp_limb_t,
        negate: ::std::os::raw::c_int,
        borrow: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmpz_bit_unpack_unsigned(
        coeff: *mut fmpz,
        arr: mp_srcptr,
        shift: mp_limb_t,
        bits: mp_limb_t,
    );
}
extern "C" {
    pub fn _fmpz_CRT_ui_precomp(
        out: *mut fmpz,
        r1: *mut fmpz,
        m1: *mut fmpz,
        r2: mp_limb_t,
        m2: mp_limb_t,
        m2inv: mp_limb_t,
        m1m2: *mut fmpz,
        c: mp_limb_t,
        sign: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _fmpz_CRT_ui_signed_precomp(
        out: *mut fmpz,
        r1: *mut fmpz,
        m1: *mut fmpz,
        r2: mp_limb_t,
        m2: mp_limb_t,
        m2inv: mp_limb_t,
        m1m2: *mut fmpz,
        halfm1m2: *mut fmpz,
        c: mp_limb_t,
    );
}
extern "C" {
    pub fn fmpz_CRT_ui(
        out: *mut fmpz,
        r1: *mut fmpz,
        m1: *mut fmpz,
        r2: mp_limb_t,
        m2: mp_limb_t,
        sign: ::std::os::raw::c_int,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fmpz_comb_struct {
    pub primes: *const mp_limb_t,
    pub num_primes: mp_limb_signed_t,
    pub n: mp_limb_signed_t,
    pub comb: *mut *mut fmpz,
    pub res: *mut *mut fmpz,
    pub mod_: *mut nmod_t,
}
#[test]
fn bindgen_test_layout_fmpz_comb_struct() {
    assert_eq!(
        ::std::mem::size_of::<fmpz_comb_struct>(),
        48usize,
        concat!("Size of: ", stringify!(fmpz_comb_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<fmpz_comb_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(fmpz_comb_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fmpz_comb_struct>())).primes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fmpz_comb_struct),
            "::",
            stringify!(primes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fmpz_comb_struct>())).num_primes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fmpz_comb_struct),
            "::",
            stringify!(num_primes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fmpz_comb_struct>())).n as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fmpz_comb_struct),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fmpz_comb_struct>())).comb as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fmpz_comb_struct),
            "::",
            stringify!(comb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fmpz_comb_struct>())).res as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fmpz_comb_struct),
            "::",
            stringify!(res)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fmpz_comb_struct>())).mod_ as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(fmpz_comb_struct),
            "::",
            stringify!(mod_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fmpz_comb_temp_struct {
    pub n: mp_limb_signed_t,
    pub comb_temp: *mut *mut fmpz,
    pub temp: fmpz_t,
    pub temp2: fmpz_t,
}
#[test]
fn bindgen_test_layout_fmpz_comb_temp_struct() {
    assert_eq!(
        ::std::mem::size_of::<fmpz_comb_temp_struct>(),
        32usize,
        concat!("Size of: ", stringify!(fmpz_comb_temp_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<fmpz_comb_temp_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(fmpz_comb_temp_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fmpz_comb_temp_struct>())).n as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fmpz_comb_temp_struct),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fmpz_comb_temp_struct>())).comb_temp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fmpz_comb_temp_struct),
            "::",
            stringify!(comb_temp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fmpz_comb_temp_struct>())).temp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fmpz_comb_temp_struct),
            "::",
            stringify!(temp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fmpz_comb_temp_struct>())).temp2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fmpz_comb_temp_struct),
            "::",
            stringify!(temp2)
        )
    );
}
pub type fmpz_comb_t = [fmpz_comb_struct; 1usize];
pub type fmpz_comb_temp_t = [fmpz_comb_temp_struct; 1usize];
extern "C" {
    pub fn fmpz_comb_temp_init(temp: *mut fmpz_comb_temp_struct, comb: *mut fmpz_comb_struct);
}
extern "C" {
    pub fn fmpz_comb_temp_clear(temp: *mut fmpz_comb_temp_struct);
}
extern "C" {
    pub fn fmpz_comb_init(
        comb: *mut fmpz_comb_struct,
        primes: mp_srcptr,
        num_primes: mp_limb_signed_t,
    );
}
extern "C" {
    pub fn fmpz_comb_clear(comb: *mut fmpz_comb_struct);
}
extern "C" {
    pub fn fmpz_multi_mod_ui(
        out: *mut mp_limb_t,
        in_: *mut fmpz,
        comb: *mut fmpz_comb_struct,
        temp: *mut fmpz_comb_temp_struct,
    );
}
extern "C" {
    pub fn fmpz_multi_CRT_ui(
        output: *mut fmpz,
        residues: mp_srcptr,
        comb: *mut fmpz_comb_struct,
        temp: *mut fmpz_comb_temp_struct,
        sign: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn fmpz_CRT(
        out: *mut fmpz,
        r1: *mut fmpz,
        m1: *mut fmpz,
        r2: *mut fmpz,
        m2: *mut fmpz,
        sign: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn fmpz_abs_ubound_ui_2exp(
        exp: *mut mp_limb_signed_t,
        x: *mut fmpz,
        bits: ::std::os::raw::c_int,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn fmpz_abs_lbound_ui_2exp(
        exp: *mut mp_limb_signed_t,
        x: *mut fmpz,
        bits: ::std::os::raw::c_int,
    ) -> mp_limb_t;
}
extern "C" {
    pub fn fmpz_lucas_chain(
        Vm: *mut fmpz,
        Vm1: *mut fmpz,
        A: *mut fmpz,
        m: *mut fmpz,
        n: *mut fmpz,
    );
}
extern "C" {
    pub fn fmpz_lucas_chain_full(
        Vm: *mut fmpz,
        Vm1: *mut fmpz,
        A: *mut fmpz,
        B: *mut fmpz,
        m: *mut fmpz,
        n: *mut fmpz,
    );
}
extern "C" {
    pub fn fmpz_lucas_chain_double(
        U2m: *mut fmpz,
        U2m1: *mut fmpz,
        Um: *mut fmpz,
        Um1: *mut fmpz,
        A: *mut fmpz,
        B: *mut fmpz,
        n: *mut fmpz,
    );
}
extern "C" {
    pub fn fmpz_lucas_chain_add(
        Umn: *mut fmpz,
        Umn1: *mut fmpz,
        Um: *mut fmpz,
        Um1: *mut fmpz,
        Un: *mut fmpz,
        Un1: *mut fmpz,
        A: *mut fmpz,
        B: *mut fmpz,
        n: *mut fmpz,
    );
}
extern "C" {
    pub fn fmpz_lucas_chain_mul(
        Ukm: *mut fmpz,
        Ukm1: *mut fmpz,
        Um: *mut fmpz,
        Um1: *mut fmpz,
        A: *mut fmpz,
        B: *mut fmpz,
        k: *mut fmpz,
        n: *mut fmpz,
    );
}
extern "C" {
    pub fn fmpz_lucas_chain_VtoU(
        Um: *mut fmpz,
        Um1: *mut fmpz,
        Vm: *mut fmpz,
        Vm1: *mut fmpz,
        A: *mut fmpz,
        B: *mut fmpz,
        Dinv: *mut fmpz,
        n: *mut fmpz,
    );
}
extern "C" {
    pub fn fmpz_is_probabprime_lucas(n: *mut fmpz) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmpz_is_probabprime_BPSW(n: *mut fmpz) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmpz_is_strong_probabprime(n: *mut fmpz, a: *mut fmpz) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmpz_is_probabprime(p: *mut fmpz) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmpz_is_prime_pseudosquare(n: *mut fmpz) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fmpz_nm1_trial_factors(
        n: *mut fmpz,
        pm1: mp_ptr,
        num_pm1: *mut mp_limb_signed_t,
        limit: mp_limb_t,
    );
}
extern "C" {
    pub fn fmpz_is_prime_pocklington(
        F: *mut fmpz,
        R: *mut fmpz,
        n: *mut fmpz,
        pm1: mp_ptr,
        num_pm1: mp_limb_signed_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fmpz_np1_trial_factors(
        n: *mut fmpz,
        pp1: mp_ptr,
        num_pp1: *mut mp_limb_signed_t,
        limit: mp_limb_t,
    );
}
extern "C" {
    pub fn fmpz_is_prime_morrison(
        F: *mut fmpz,
        R: *mut fmpz,
        n: *mut fmpz,
        pm1: mp_ptr,
        num_pm1: mp_limb_signed_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmpz_is_prime(p: *mut fmpz) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmpz_divisor_in_residue_class_lenstra(
        fac: *mut fmpz,
        n: *mut fmpz,
        r: *mut fmpz,
        s: *mut fmpz,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmpz_primorial(res: *mut fmpz, n: mp_limb_t);
}
extern "C" {
    pub fn fmpz_euler_phi(res: *mut fmpz, n: *mut fmpz);
}
extern "C" {
    pub fn fmpz_moebius_mu(n: *mut fmpz) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmpz_divisor_sigma(res: *mut fmpz, n: *mut fmpz, k: mp_limb_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fmpz_actor_struct {
    pub sign: ::std::os::raw::c_int,
    pub p: *mut fmpz,
    pub exp: *mut mp_limb_t,
    pub alloc: mp_limb_signed_t,
    pub num: mp_limb_signed_t,
}
#[test]
fn bindgen_test_layout_fmpz_factor_struct() {
    assert_eq!(
        ::std::mem::size_of::<fmpz_factor_struct>(),
        40usize,
        concat!("Size of: ", stringify!(fmpz_factor_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<fmpz_factor_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(fmpz_factor_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fmpz_factor_struct>())).sign as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fmpz_factor_struct),
            "::",
            stringify!(sign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fmpz_factor_struct>())).p as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fmpz_factor_struct),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fmpz_factor_struct>())).exp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fmpz_factor_struct),
            "::",
            stringify!(exp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fmpz_factor_struct>())).alloc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fmpz_factor_struct),
            "::",
            stringify!(alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fmpz_factor_struct>())).num as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fmpz_factor_struct),
            "::",
            stringify!(num)
        )
    );
}
pub type fmpz_factor_t = [fmpz_factor_struct; 1usize];
extern "C" {
    pub fn fmpz_factor_init(factor: *mut fmpz_factor_struct);
}
extern "C" {
    pub fn fmpz_factor_clear(factor: *mut fmpz_factor_struct);
}
extern "C" {
    pub fn fmpz_factor_print(factor: *mut fmpz_factor_struct);
}
extern "C" {
    pub fn _fmpz_factor_fit_length(factor: *mut fmpz_factor_struct, len: mp_limb_signed_t);
}
extern "C" {
    pub fn _fmpz_factor_append_ui(factor: *mut fmpz_factor_struct, p: mp_limb_t, exp: mp_limb_t);
}
extern "C" {
    pub fn _fmpz_factor_append(factor: *mut fmpz_factor_struct, p: *mut fmpz, exp: mp_limb_t);
}
extern "C" {
    pub fn _fmpz_factor_set_length(factor: *mut fmpz_factor_struct, newlen: mp_limb_signed_t);
}
extern "C" {
    pub fn _fmpz_factor_extend_factor_ui(factor: *mut fmpz_factor_struct, n: mp_limb_t);
}
extern "C" {
    pub fn fmpz_factor_trial_range(
        factor: *mut fmpz_factor_struct,
        n: *mut fmpz,
        start: mp_limb_t,
        num_primes: mp_limb_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmpz_factor(factor: *mut fmpz_factor_struct, n: *mut fmpz);
}
extern "C" {
    pub fn fmpz_factor_si(factor: *mut fmpz_factor_struct, n: mp_limb_signed_t);
}
extern "C" {
    pub fn fmpz_factor_pp1(
        factor: *mut fmpz,
        n: *mut fmpz,
        B1: mp_limb_t,
        B2_sqrt: mp_limb_t,
        c: mp_limb_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmpz_factor_expand_iterative(n: *mut fmpz, factor: *mut fmpz_factor_struct);
}
extern "C" {
    pub fn fmpz_factor_expand_multiexp(n: *mut fmpz, factor: *mut fmpz_factor_struct);
}
extern "C" {
    pub fn fmpz_factor_expand(n: *mut fmpz, factor: *mut fmpz_factor_struct);
}
extern "C" {
    pub fn fmpz_factor_euler_phi(res: *mut fmpz, fac: *mut fmpz_factor_struct);
}
extern "C" {
    pub fn fmpz_factor_moebius_mu(fac: *mut fmpz_factor_struct) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmpz_factor_divisor_sigma(res: *mut fmpz, fac: *mut fmpz_factor_struct, k: mp_limb_t);
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
