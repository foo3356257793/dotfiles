#!/usr/bin/sage

# Find the smallest prime which, by replacing part of the number (not
# necessarily adjacent digits) with the same digit, is part of an eight prime
# value family.

from itertools import combinations, product


if __name__ == "__main__":

    # 6 digit numbers?
    # try the string a***b

    num_digits = 6
    num_change = 3
    num_base = 3

    min_prime = 10**(num_digits-1)

    for combo in combinations(range(1,num_digits),3):

        change_digits = sum([1 * (10**combo[i]) for i in range(3)])

        non_zero_digits = [i for i in range(num_digits) if not i in combo]

        for tup in product(range(10), repeat=num_base):

            base = sum([tup[i] * (10**non_zero_digits[i]) for i in range(num_base)])

            if base & 1 == 0 or base % 3 == 0:
                continue

            # test first three values for primality

            num_prime = 0
            for i in range(3):

                if is_prime(base) and base > min_prime:
                    num_prime += 1
                base += change_digits

            if num_prime > 0:

                for i in range(3,10):

                    if is_prime(base):
                        num_prime += 1
                    base += change_digits

                    if i - num_prime > 1:
                        break

                if num_prime >= 8:

                    print('HIT')
                    base -= 10*change_digits
                    print('base = %d' % base)
